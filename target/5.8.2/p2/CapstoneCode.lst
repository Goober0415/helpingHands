
c:/Users/caitl/Downloads/IoT/helpingHands/CapstoneCode/target/5.8.2/p2/CapstoneCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f8000  085f8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f8018  085f8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8d20  085f80a8  00008d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000072d0  023f8d28  085f80b0  00008d28  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000084  1007ac8c  085ff380  0001ac8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e8  1007ad10  1007ad10  0002ad10  2**3
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff404  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000bb0  085ff408  085ff408  0001f408  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f408  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0019b3de  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001a36f  00000000  00000000  001bb3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004fe92  00000000  00000000  001d574d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003850  00000000  00000000  002255df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000d5a8  00000000  00000000  00228e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031609  00000000  00000000  002363d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005b29b  00000000  00000000  002679e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ee878  00000000  00000000  002c2c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a938  00000000  00000000  003b14f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f8018:	4813      	ldr	r0, [pc, #76]	; (85f8068 <module_user_pre_init+0x50>)
 85f801a:	4914      	ldr	r1, [pc, #80]	; (85f806c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f801e:	4288      	cmp	r0, r1
 85f8020:	d005      	beq.n	85f802e <module_user_pre_init+0x16>
 85f8022:	4a13      	ldr	r2, [pc, #76]	; (85f8070 <module_user_pre_init+0x58>)
 85f8024:	4282      	cmp	r2, r0
 85f8026:	d002      	beq.n	85f802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f8028:	4b12      	ldr	r3, [pc, #72]	; (85f8074 <module_user_pre_init+0x5c>)
 85f802a:	1a12      	subs	r2, r2, r0
 85f802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f802e:	4812      	ldr	r0, [pc, #72]	; (85f8078 <module_user_pre_init+0x60>)
 85f8030:	4a12      	ldr	r2, [pc, #72]	; (85f807c <module_user_pre_init+0x64>)
 85f8032:	2100      	movs	r1, #0
 85f8034:	4b12      	ldr	r3, [pc, #72]	; (85f8080 <module_user_pre_init+0x68>)
 85f8036:	1a12      	subs	r2, r2, r0
 85f8038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f803a:	4812      	ldr	r0, [pc, #72]	; (85f8084 <module_user_pre_init+0x6c>)
 85f803c:	4912      	ldr	r1, [pc, #72]	; (85f8088 <module_user_pre_init+0x70>)
 85f803e:	4288      	cmp	r0, r1
 85f8040:	d005      	beq.n	85f804e <module_user_pre_init+0x36>
 85f8042:	4a12      	ldr	r2, [pc, #72]	; (85f808c <module_user_pre_init+0x74>)
 85f8044:	4282      	cmp	r2, r0
 85f8046:	d002      	beq.n	85f804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f8048:	4b0a      	ldr	r3, [pc, #40]	; (85f8074 <module_user_pre_init+0x5c>)
 85f804a:	1a12      	subs	r2, r2, r0
 85f804c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f804e:	4810      	ldr	r0, [pc, #64]	; (85f8090 <module_user_pre_init+0x78>)
 85f8050:	4910      	ldr	r1, [pc, #64]	; (85f8094 <module_user_pre_init+0x7c>)
 85f8052:	4288      	cmp	r0, r1
 85f8054:	d005      	beq.n	85f8062 <module_user_pre_init+0x4a>
 85f8056:	4a10      	ldr	r2, [pc, #64]	; (85f8098 <module_user_pre_init+0x80>)
 85f8058:	4282      	cmp	r2, r0
 85f805a:	d002      	beq.n	85f8062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f805c:	4b05      	ldr	r3, [pc, #20]	; (85f8074 <module_user_pre_init+0x5c>)
 85f805e:	1a12      	subs	r2, r2, r0
 85f8060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f8062:	4801      	ldr	r0, [pc, #4]	; (85f8068 <module_user_pre_init+0x50>)
 85f8064:	bd08      	pop	{r3, pc}
 85f8066:	bf00      	nop
 85f8068:	1007ac8c 	.word	0x1007ac8c
 85f806c:	085ff380 	.word	0x085ff380
 85f8070:	1007ad10 	.word	0x1007ad10
 85f8074:	10110d2d 	.word	0x10110d2d
 85f8078:	1007ad10 	.word	0x1007ad10
 85f807c:	1007aff8 	.word	0x1007aff8
 85f8080:	10110ea1 	.word	0x10110ea1
 85f8084:	023f8d20 	.word	0x023f8d20
 85f8088:	085f80a8 	.word	0x085f80a8
 85f808c:	023f8d28 	.word	0x023f8d28
 85f8090:	023f8d28 	.word	0x023f8d28
 85f8094:	085f80b0 	.word	0x085f80b0
 85f8098:	023ffff8 	.word	0x023ffff8

085f809c <dynalib_preinit>:
 85f809c:	085f8019 00000000                       .._.....

Disassembly of section .psram_text:

023f8d28 <__aeabi_drsub>:
 23f8d28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f8d2c:	e002      	b.n	23f8d34 <__adddf3>
 23f8d2e:	bf00      	nop

023f8d30 <__aeabi_dsub>:
 23f8d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f8d34 <__adddf3>:
 23f8d34:	b530      	push	{r4, r5, lr}
 23f8d36:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f8d3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f8d3e:	ea94 0f05 	teq	r4, r5
 23f8d42:	bf08      	it	eq
 23f8d44:	ea90 0f02 	teqeq	r0, r2
 23f8d48:	bf1f      	itttt	ne
 23f8d4a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f8d4e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f8d52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f8d56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f8d5a:	f000 80e2 	beq.w	23f8f22 <__adddf3+0x1ee>
 23f8d5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f8d62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f8d66:	bfb8      	it	lt
 23f8d68:	426d      	neglt	r5, r5
 23f8d6a:	dd0c      	ble.n	23f8d86 <__adddf3+0x52>
 23f8d6c:	442c      	add	r4, r5
 23f8d6e:	ea80 0202 	eor.w	r2, r0, r2
 23f8d72:	ea81 0303 	eor.w	r3, r1, r3
 23f8d76:	ea82 0000 	eor.w	r0, r2, r0
 23f8d7a:	ea83 0101 	eor.w	r1, r3, r1
 23f8d7e:	ea80 0202 	eor.w	r2, r0, r2
 23f8d82:	ea81 0303 	eor.w	r3, r1, r3
 23f8d86:	2d36      	cmp	r5, #54	; 0x36
 23f8d88:	bf88      	it	hi
 23f8d8a:	bd30      	pophi	{r4, r5, pc}
 23f8d8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f8d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f8d94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f8d98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f8d9c:	d002      	beq.n	23f8da4 <__adddf3+0x70>
 23f8d9e:	4240      	negs	r0, r0
 23f8da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f8da4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f8da8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f8dac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f8db0:	d002      	beq.n	23f8db8 <__adddf3+0x84>
 23f8db2:	4252      	negs	r2, r2
 23f8db4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f8db8:	ea94 0f05 	teq	r4, r5
 23f8dbc:	f000 80a7 	beq.w	23f8f0e <__adddf3+0x1da>
 23f8dc0:	f1a4 0401 	sub.w	r4, r4, #1
 23f8dc4:	f1d5 0e20 	rsbs	lr, r5, #32
 23f8dc8:	db0d      	blt.n	23f8de6 <__adddf3+0xb2>
 23f8dca:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f8dce:	fa22 f205 	lsr.w	r2, r2, r5
 23f8dd2:	1880      	adds	r0, r0, r2
 23f8dd4:	f141 0100 	adc.w	r1, r1, #0
 23f8dd8:	fa03 f20e 	lsl.w	r2, r3, lr
 23f8ddc:	1880      	adds	r0, r0, r2
 23f8dde:	fa43 f305 	asr.w	r3, r3, r5
 23f8de2:	4159      	adcs	r1, r3
 23f8de4:	e00e      	b.n	23f8e04 <__adddf3+0xd0>
 23f8de6:	f1a5 0520 	sub.w	r5, r5, #32
 23f8dea:	f10e 0e20 	add.w	lr, lr, #32
 23f8dee:	2a01      	cmp	r2, #1
 23f8df0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f8df4:	bf28      	it	cs
 23f8df6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f8dfa:	fa43 f305 	asr.w	r3, r3, r5
 23f8dfe:	18c0      	adds	r0, r0, r3
 23f8e00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f8e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8e08:	d507      	bpl.n	23f8e1a <__adddf3+0xe6>
 23f8e0a:	f04f 0e00 	mov.w	lr, #0
 23f8e0e:	f1dc 0c00 	rsbs	ip, ip, #0
 23f8e12:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f8e16:	eb6e 0101 	sbc.w	r1, lr, r1
 23f8e1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f8e1e:	d31b      	bcc.n	23f8e58 <__adddf3+0x124>
 23f8e20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f8e24:	d30c      	bcc.n	23f8e40 <__adddf3+0x10c>
 23f8e26:	0849      	lsrs	r1, r1, #1
 23f8e28:	ea5f 0030 	movs.w	r0, r0, rrx
 23f8e2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f8e30:	f104 0401 	add.w	r4, r4, #1
 23f8e34:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f8e38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f8e3c:	f080 809a 	bcs.w	23f8f74 <__adddf3+0x240>
 23f8e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f8e44:	bf08      	it	eq
 23f8e46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f8e4a:	f150 0000 	adcs.w	r0, r0, #0
 23f8e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f8e52:	ea41 0105 	orr.w	r1, r1, r5
 23f8e56:	bd30      	pop	{r4, r5, pc}
 23f8e58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f8e5c:	4140      	adcs	r0, r0
 23f8e5e:	eb41 0101 	adc.w	r1, r1, r1
 23f8e62:	3c01      	subs	r4, #1
 23f8e64:	bf28      	it	cs
 23f8e66:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f8e6a:	d2e9      	bcs.n	23f8e40 <__adddf3+0x10c>
 23f8e6c:	f091 0f00 	teq	r1, #0
 23f8e70:	bf04      	itt	eq
 23f8e72:	4601      	moveq	r1, r0
 23f8e74:	2000      	moveq	r0, #0
 23f8e76:	fab1 f381 	clz	r3, r1
 23f8e7a:	bf08      	it	eq
 23f8e7c:	3320      	addeq	r3, #32
 23f8e7e:	f1a3 030b 	sub.w	r3, r3, #11
 23f8e82:	f1b3 0220 	subs.w	r2, r3, #32
 23f8e86:	da0c      	bge.n	23f8ea2 <__adddf3+0x16e>
 23f8e88:	320c      	adds	r2, #12
 23f8e8a:	dd08      	ble.n	23f8e9e <__adddf3+0x16a>
 23f8e8c:	f102 0c14 	add.w	ip, r2, #20
 23f8e90:	f1c2 020c 	rsb	r2, r2, #12
 23f8e94:	fa01 f00c 	lsl.w	r0, r1, ip
 23f8e98:	fa21 f102 	lsr.w	r1, r1, r2
 23f8e9c:	e00c      	b.n	23f8eb8 <__adddf3+0x184>
 23f8e9e:	f102 0214 	add.w	r2, r2, #20
 23f8ea2:	bfd8      	it	le
 23f8ea4:	f1c2 0c20 	rsble	ip, r2, #32
 23f8ea8:	fa01 f102 	lsl.w	r1, r1, r2
 23f8eac:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f8eb0:	bfdc      	itt	le
 23f8eb2:	ea41 010c 	orrle.w	r1, r1, ip
 23f8eb6:	4090      	lslle	r0, r2
 23f8eb8:	1ae4      	subs	r4, r4, r3
 23f8eba:	bfa2      	ittt	ge
 23f8ebc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f8ec0:	4329      	orrge	r1, r5
 23f8ec2:	bd30      	popge	{r4, r5, pc}
 23f8ec4:	ea6f 0404 	mvn.w	r4, r4
 23f8ec8:	3c1f      	subs	r4, #31
 23f8eca:	da1c      	bge.n	23f8f06 <__adddf3+0x1d2>
 23f8ecc:	340c      	adds	r4, #12
 23f8ece:	dc0e      	bgt.n	23f8eee <__adddf3+0x1ba>
 23f8ed0:	f104 0414 	add.w	r4, r4, #20
 23f8ed4:	f1c4 0220 	rsb	r2, r4, #32
 23f8ed8:	fa20 f004 	lsr.w	r0, r0, r4
 23f8edc:	fa01 f302 	lsl.w	r3, r1, r2
 23f8ee0:	ea40 0003 	orr.w	r0, r0, r3
 23f8ee4:	fa21 f304 	lsr.w	r3, r1, r4
 23f8ee8:	ea45 0103 	orr.w	r1, r5, r3
 23f8eec:	bd30      	pop	{r4, r5, pc}
 23f8eee:	f1c4 040c 	rsb	r4, r4, #12
 23f8ef2:	f1c4 0220 	rsb	r2, r4, #32
 23f8ef6:	fa20 f002 	lsr.w	r0, r0, r2
 23f8efa:	fa01 f304 	lsl.w	r3, r1, r4
 23f8efe:	ea40 0003 	orr.w	r0, r0, r3
 23f8f02:	4629      	mov	r1, r5
 23f8f04:	bd30      	pop	{r4, r5, pc}
 23f8f06:	fa21 f004 	lsr.w	r0, r1, r4
 23f8f0a:	4629      	mov	r1, r5
 23f8f0c:	bd30      	pop	{r4, r5, pc}
 23f8f0e:	f094 0f00 	teq	r4, #0
 23f8f12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f8f16:	bf06      	itte	eq
 23f8f18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f8f1c:	3401      	addeq	r4, #1
 23f8f1e:	3d01      	subne	r5, #1
 23f8f20:	e74e      	b.n	23f8dc0 <__adddf3+0x8c>
 23f8f22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f8f26:	bf18      	it	ne
 23f8f28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f8f2c:	d029      	beq.n	23f8f82 <__adddf3+0x24e>
 23f8f2e:	ea94 0f05 	teq	r4, r5
 23f8f32:	bf08      	it	eq
 23f8f34:	ea90 0f02 	teqeq	r0, r2
 23f8f38:	d005      	beq.n	23f8f46 <__adddf3+0x212>
 23f8f3a:	ea54 0c00 	orrs.w	ip, r4, r0
 23f8f3e:	bf04      	itt	eq
 23f8f40:	4619      	moveq	r1, r3
 23f8f42:	4610      	moveq	r0, r2
 23f8f44:	bd30      	pop	{r4, r5, pc}
 23f8f46:	ea91 0f03 	teq	r1, r3
 23f8f4a:	bf1e      	ittt	ne
 23f8f4c:	2100      	movne	r1, #0
 23f8f4e:	2000      	movne	r0, #0
 23f8f50:	bd30      	popne	{r4, r5, pc}
 23f8f52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f8f56:	d105      	bne.n	23f8f64 <__adddf3+0x230>
 23f8f58:	0040      	lsls	r0, r0, #1
 23f8f5a:	4149      	adcs	r1, r1
 23f8f5c:	bf28      	it	cs
 23f8f5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f8f62:	bd30      	pop	{r4, r5, pc}
 23f8f64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f8f68:	bf3c      	itt	cc
 23f8f6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f8f6e:	bd30      	popcc	{r4, r5, pc}
 23f8f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8f74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f8f78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f8f7c:	f04f 0000 	mov.w	r0, #0
 23f8f80:	bd30      	pop	{r4, r5, pc}
 23f8f82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f8f86:	bf1a      	itte	ne
 23f8f88:	4619      	movne	r1, r3
 23f8f8a:	4610      	movne	r0, r2
 23f8f8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f8f90:	bf1c      	itt	ne
 23f8f92:	460b      	movne	r3, r1
 23f8f94:	4602      	movne	r2, r0
 23f8f96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f8f9a:	bf06      	itte	eq
 23f8f9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f8fa0:	ea91 0f03 	teqeq	r1, r3
 23f8fa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f8fa8:	bd30      	pop	{r4, r5, pc}
 23f8faa:	bf00      	nop

023f8fac <__aeabi_ui2d>:
 23f8fac:	f090 0f00 	teq	r0, #0
 23f8fb0:	bf04      	itt	eq
 23f8fb2:	2100      	moveq	r1, #0
 23f8fb4:	4770      	bxeq	lr
 23f8fb6:	b530      	push	{r4, r5, lr}
 23f8fb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8fbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8fc0:	f04f 0500 	mov.w	r5, #0
 23f8fc4:	f04f 0100 	mov.w	r1, #0
 23f8fc8:	e750      	b.n	23f8e6c <__adddf3+0x138>
 23f8fca:	bf00      	nop

023f8fcc <__aeabi_i2d>:
 23f8fcc:	f090 0f00 	teq	r0, #0
 23f8fd0:	bf04      	itt	eq
 23f8fd2:	2100      	moveq	r1, #0
 23f8fd4:	4770      	bxeq	lr
 23f8fd6:	b530      	push	{r4, r5, lr}
 23f8fd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8fdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8fe0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f8fe4:	bf48      	it	mi
 23f8fe6:	4240      	negmi	r0, r0
 23f8fe8:	f04f 0100 	mov.w	r1, #0
 23f8fec:	e73e      	b.n	23f8e6c <__adddf3+0x138>
 23f8fee:	bf00      	nop

023f8ff0 <__aeabi_f2d>:
 23f8ff0:	0042      	lsls	r2, r0, #1
 23f8ff2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f8ff6:	ea4f 0131 	mov.w	r1, r1, rrx
 23f8ffa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f8ffe:	bf1f      	itttt	ne
 23f9000:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f9004:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f9008:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f900c:	4770      	bxne	lr
 23f900e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f9012:	bf08      	it	eq
 23f9014:	4770      	bxeq	lr
 23f9016:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f901a:	bf04      	itt	eq
 23f901c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f9020:	4770      	bxeq	lr
 23f9022:	b530      	push	{r4, r5, lr}
 23f9024:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f9028:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f902c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9030:	e71c      	b.n	23f8e6c <__adddf3+0x138>
 23f9032:	bf00      	nop

023f9034 <__aeabi_ul2d>:
 23f9034:	ea50 0201 	orrs.w	r2, r0, r1
 23f9038:	bf08      	it	eq
 23f903a:	4770      	bxeq	lr
 23f903c:	b530      	push	{r4, r5, lr}
 23f903e:	f04f 0500 	mov.w	r5, #0
 23f9042:	e00a      	b.n	23f905a <__aeabi_l2d+0x16>

023f9044 <__aeabi_l2d>:
 23f9044:	ea50 0201 	orrs.w	r2, r0, r1
 23f9048:	bf08      	it	eq
 23f904a:	4770      	bxeq	lr
 23f904c:	b530      	push	{r4, r5, lr}
 23f904e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f9052:	d502      	bpl.n	23f905a <__aeabi_l2d+0x16>
 23f9054:	4240      	negs	r0, r0
 23f9056:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f905a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f905e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9062:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f9066:	f43f aed8 	beq.w	23f8e1a <__adddf3+0xe6>
 23f906a:	f04f 0203 	mov.w	r2, #3
 23f906e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f9072:	bf18      	it	ne
 23f9074:	3203      	addne	r2, #3
 23f9076:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f907a:	bf18      	it	ne
 23f907c:	3203      	addne	r2, #3
 23f907e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f9082:	f1c2 0320 	rsb	r3, r2, #32
 23f9086:	fa00 fc03 	lsl.w	ip, r0, r3
 23f908a:	fa20 f002 	lsr.w	r0, r0, r2
 23f908e:	fa01 fe03 	lsl.w	lr, r1, r3
 23f9092:	ea40 000e 	orr.w	r0, r0, lr
 23f9096:	fa21 f102 	lsr.w	r1, r1, r2
 23f909a:	4414      	add	r4, r2
 23f909c:	e6bd      	b.n	23f8e1a <__adddf3+0xe6>
 23f909e:	bf00      	nop

023f90a0 <__aeabi_dmul>:
 23f90a0:	b570      	push	{r4, r5, r6, lr}
 23f90a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f90a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f90aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f90ae:	bf1d      	ittte	ne
 23f90b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f90b4:	ea94 0f0c 	teqne	r4, ip
 23f90b8:	ea95 0f0c 	teqne	r5, ip
 23f90bc:	f000 f8de 	bleq	23f927c <__aeabi_dmul+0x1dc>
 23f90c0:	442c      	add	r4, r5
 23f90c2:	ea81 0603 	eor.w	r6, r1, r3
 23f90c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f90ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f90ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f90d2:	bf18      	it	ne
 23f90d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f90d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f90dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f90e0:	d038      	beq.n	23f9154 <__aeabi_dmul+0xb4>
 23f90e2:	fba0 ce02 	umull	ip, lr, r0, r2
 23f90e6:	f04f 0500 	mov.w	r5, #0
 23f90ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f90ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f90f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f90f6:	f04f 0600 	mov.w	r6, #0
 23f90fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f90fe:	f09c 0f00 	teq	ip, #0
 23f9102:	bf18      	it	ne
 23f9104:	f04e 0e01 	orrne.w	lr, lr, #1
 23f9108:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f910c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f9110:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f9114:	d204      	bcs.n	23f9120 <__aeabi_dmul+0x80>
 23f9116:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f911a:	416d      	adcs	r5, r5
 23f911c:	eb46 0606 	adc.w	r6, r6, r6
 23f9120:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f9124:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f9128:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f912c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f9130:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f9134:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f9138:	bf88      	it	hi
 23f913a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f913e:	d81e      	bhi.n	23f917e <__aeabi_dmul+0xde>
 23f9140:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f9144:	bf08      	it	eq
 23f9146:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f914a:	f150 0000 	adcs.w	r0, r0, #0
 23f914e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f9152:	bd70      	pop	{r4, r5, r6, pc}
 23f9154:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f9158:	ea46 0101 	orr.w	r1, r6, r1
 23f915c:	ea40 0002 	orr.w	r0, r0, r2
 23f9160:	ea81 0103 	eor.w	r1, r1, r3
 23f9164:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f9168:	bfc2      	ittt	gt
 23f916a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f916e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f9172:	bd70      	popgt	{r4, r5, r6, pc}
 23f9174:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f9178:	f04f 0e00 	mov.w	lr, #0
 23f917c:	3c01      	subs	r4, #1
 23f917e:	f300 80ab 	bgt.w	23f92d8 <__aeabi_dmul+0x238>
 23f9182:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f9186:	bfde      	ittt	le
 23f9188:	2000      	movle	r0, #0
 23f918a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f918e:	bd70      	pople	{r4, r5, r6, pc}
 23f9190:	f1c4 0400 	rsb	r4, r4, #0
 23f9194:	3c20      	subs	r4, #32
 23f9196:	da35      	bge.n	23f9204 <__aeabi_dmul+0x164>
 23f9198:	340c      	adds	r4, #12
 23f919a:	dc1b      	bgt.n	23f91d4 <__aeabi_dmul+0x134>
 23f919c:	f104 0414 	add.w	r4, r4, #20
 23f91a0:	f1c4 0520 	rsb	r5, r4, #32
 23f91a4:	fa00 f305 	lsl.w	r3, r0, r5
 23f91a8:	fa20 f004 	lsr.w	r0, r0, r4
 23f91ac:	fa01 f205 	lsl.w	r2, r1, r5
 23f91b0:	ea40 0002 	orr.w	r0, r0, r2
 23f91b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f91b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f91bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f91c0:	fa21 f604 	lsr.w	r6, r1, r4
 23f91c4:	eb42 0106 	adc.w	r1, r2, r6
 23f91c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f91cc:	bf08      	it	eq
 23f91ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f91d2:	bd70      	pop	{r4, r5, r6, pc}
 23f91d4:	f1c4 040c 	rsb	r4, r4, #12
 23f91d8:	f1c4 0520 	rsb	r5, r4, #32
 23f91dc:	fa00 f304 	lsl.w	r3, r0, r4
 23f91e0:	fa20 f005 	lsr.w	r0, r0, r5
 23f91e4:	fa01 f204 	lsl.w	r2, r1, r4
 23f91e8:	ea40 0002 	orr.w	r0, r0, r2
 23f91ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f91f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f91f4:	f141 0100 	adc.w	r1, r1, #0
 23f91f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f91fc:	bf08      	it	eq
 23f91fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f9202:	bd70      	pop	{r4, r5, r6, pc}
 23f9204:	f1c4 0520 	rsb	r5, r4, #32
 23f9208:	fa00 f205 	lsl.w	r2, r0, r5
 23f920c:	ea4e 0e02 	orr.w	lr, lr, r2
 23f9210:	fa20 f304 	lsr.w	r3, r0, r4
 23f9214:	fa01 f205 	lsl.w	r2, r1, r5
 23f9218:	ea43 0302 	orr.w	r3, r3, r2
 23f921c:	fa21 f004 	lsr.w	r0, r1, r4
 23f9220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f9224:	fa21 f204 	lsr.w	r2, r1, r4
 23f9228:	ea20 0002 	bic.w	r0, r0, r2
 23f922c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f9230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f9234:	bf08      	it	eq
 23f9236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f923a:	bd70      	pop	{r4, r5, r6, pc}
 23f923c:	f094 0f00 	teq	r4, #0
 23f9240:	d10f      	bne.n	23f9262 <__aeabi_dmul+0x1c2>
 23f9242:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f9246:	0040      	lsls	r0, r0, #1
 23f9248:	eb41 0101 	adc.w	r1, r1, r1
 23f924c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f9250:	bf08      	it	eq
 23f9252:	3c01      	subeq	r4, #1
 23f9254:	d0f7      	beq.n	23f9246 <__aeabi_dmul+0x1a6>
 23f9256:	ea41 0106 	orr.w	r1, r1, r6
 23f925a:	f095 0f00 	teq	r5, #0
 23f925e:	bf18      	it	ne
 23f9260:	4770      	bxne	lr
 23f9262:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f9266:	0052      	lsls	r2, r2, #1
 23f9268:	eb43 0303 	adc.w	r3, r3, r3
 23f926c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f9270:	bf08      	it	eq
 23f9272:	3d01      	subeq	r5, #1
 23f9274:	d0f7      	beq.n	23f9266 <__aeabi_dmul+0x1c6>
 23f9276:	ea43 0306 	orr.w	r3, r3, r6
 23f927a:	4770      	bx	lr
 23f927c:	ea94 0f0c 	teq	r4, ip
 23f9280:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f9284:	bf18      	it	ne
 23f9286:	ea95 0f0c 	teqne	r5, ip
 23f928a:	d00c      	beq.n	23f92a6 <__aeabi_dmul+0x206>
 23f928c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f9290:	bf18      	it	ne
 23f9292:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f9296:	d1d1      	bne.n	23f923c <__aeabi_dmul+0x19c>
 23f9298:	ea81 0103 	eor.w	r1, r1, r3
 23f929c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f92a0:	f04f 0000 	mov.w	r0, #0
 23f92a4:	bd70      	pop	{r4, r5, r6, pc}
 23f92a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f92aa:	bf06      	itte	eq
 23f92ac:	4610      	moveq	r0, r2
 23f92ae:	4619      	moveq	r1, r3
 23f92b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f92b4:	d019      	beq.n	23f92ea <__aeabi_dmul+0x24a>
 23f92b6:	ea94 0f0c 	teq	r4, ip
 23f92ba:	d102      	bne.n	23f92c2 <__aeabi_dmul+0x222>
 23f92bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f92c0:	d113      	bne.n	23f92ea <__aeabi_dmul+0x24a>
 23f92c2:	ea95 0f0c 	teq	r5, ip
 23f92c6:	d105      	bne.n	23f92d4 <__aeabi_dmul+0x234>
 23f92c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f92cc:	bf1c      	itt	ne
 23f92ce:	4610      	movne	r0, r2
 23f92d0:	4619      	movne	r1, r3
 23f92d2:	d10a      	bne.n	23f92ea <__aeabi_dmul+0x24a>
 23f92d4:	ea81 0103 	eor.w	r1, r1, r3
 23f92d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f92dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f92e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f92e4:	f04f 0000 	mov.w	r0, #0
 23f92e8:	bd70      	pop	{r4, r5, r6, pc}
 23f92ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f92ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f92f2:	bd70      	pop	{r4, r5, r6, pc}

023f92f4 <__aeabi_ddiv>:
 23f92f4:	b570      	push	{r4, r5, r6, lr}
 23f92f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f92fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f92fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f9302:	bf1d      	ittte	ne
 23f9304:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f9308:	ea94 0f0c 	teqne	r4, ip
 23f930c:	ea95 0f0c 	teqne	r5, ip
 23f9310:	f000 f8a7 	bleq	23f9462 <__aeabi_ddiv+0x16e>
 23f9314:	eba4 0405 	sub.w	r4, r4, r5
 23f9318:	ea81 0e03 	eor.w	lr, r1, r3
 23f931c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f9320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f9324:	f000 8088 	beq.w	23f9438 <__aeabi_ddiv+0x144>
 23f9328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f932c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f9330:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f9334:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f9338:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f933c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f9340:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f9344:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f9348:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f934c:	429d      	cmp	r5, r3
 23f934e:	bf08      	it	eq
 23f9350:	4296      	cmpeq	r6, r2
 23f9352:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f9356:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f935a:	d202      	bcs.n	23f9362 <__aeabi_ddiv+0x6e>
 23f935c:	085b      	lsrs	r3, r3, #1
 23f935e:	ea4f 0232 	mov.w	r2, r2, rrx
 23f9362:	1ab6      	subs	r6, r6, r2
 23f9364:	eb65 0503 	sbc.w	r5, r5, r3
 23f9368:	085b      	lsrs	r3, r3, #1
 23f936a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f936e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f9372:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f9376:	ebb6 0e02 	subs.w	lr, r6, r2
 23f937a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f937e:	bf22      	ittt	cs
 23f9380:	1ab6      	subcs	r6, r6, r2
 23f9382:	4675      	movcs	r5, lr
 23f9384:	ea40 000c 	orrcs.w	r0, r0, ip
 23f9388:	085b      	lsrs	r3, r3, #1
 23f938a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f938e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f9392:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f9396:	bf22      	ittt	cs
 23f9398:	1ab6      	subcs	r6, r6, r2
 23f939a:	4675      	movcs	r5, lr
 23f939c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f93a0:	085b      	lsrs	r3, r3, #1
 23f93a2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f93a6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f93aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f93ae:	bf22      	ittt	cs
 23f93b0:	1ab6      	subcs	r6, r6, r2
 23f93b2:	4675      	movcs	r5, lr
 23f93b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f93b8:	085b      	lsrs	r3, r3, #1
 23f93ba:	ea4f 0232 	mov.w	r2, r2, rrx
 23f93be:	ebb6 0e02 	subs.w	lr, r6, r2
 23f93c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f93c6:	bf22      	ittt	cs
 23f93c8:	1ab6      	subcs	r6, r6, r2
 23f93ca:	4675      	movcs	r5, lr
 23f93cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f93d0:	ea55 0e06 	orrs.w	lr, r5, r6
 23f93d4:	d018      	beq.n	23f9408 <__aeabi_ddiv+0x114>
 23f93d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f93da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f93de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f93e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f93e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f93ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f93ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f93f2:	d1c0      	bne.n	23f9376 <__aeabi_ddiv+0x82>
 23f93f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f93f8:	d10b      	bne.n	23f9412 <__aeabi_ddiv+0x11e>
 23f93fa:	ea41 0100 	orr.w	r1, r1, r0
 23f93fe:	f04f 0000 	mov.w	r0, #0
 23f9402:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f9406:	e7b6      	b.n	23f9376 <__aeabi_ddiv+0x82>
 23f9408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f940c:	bf04      	itt	eq
 23f940e:	4301      	orreq	r1, r0
 23f9410:	2000      	moveq	r0, #0
 23f9412:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f9416:	bf88      	it	hi
 23f9418:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f941c:	f63f aeaf 	bhi.w	23f917e <__aeabi_dmul+0xde>
 23f9420:	ebb5 0c03 	subs.w	ip, r5, r3
 23f9424:	bf04      	itt	eq
 23f9426:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f942a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f942e:	f150 0000 	adcs.w	r0, r0, #0
 23f9432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f9436:	bd70      	pop	{r4, r5, r6, pc}
 23f9438:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f943c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f9440:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f9444:	bfc2      	ittt	gt
 23f9446:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f944a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f944e:	bd70      	popgt	{r4, r5, r6, pc}
 23f9450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f9454:	f04f 0e00 	mov.w	lr, #0
 23f9458:	3c01      	subs	r4, #1
 23f945a:	e690      	b.n	23f917e <__aeabi_dmul+0xde>
 23f945c:	ea45 0e06 	orr.w	lr, r5, r6
 23f9460:	e68d      	b.n	23f917e <__aeabi_dmul+0xde>
 23f9462:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f9466:	ea94 0f0c 	teq	r4, ip
 23f946a:	bf08      	it	eq
 23f946c:	ea95 0f0c 	teqeq	r5, ip
 23f9470:	f43f af3b 	beq.w	23f92ea <__aeabi_dmul+0x24a>
 23f9474:	ea94 0f0c 	teq	r4, ip
 23f9478:	d10a      	bne.n	23f9490 <__aeabi_ddiv+0x19c>
 23f947a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f947e:	f47f af34 	bne.w	23f92ea <__aeabi_dmul+0x24a>
 23f9482:	ea95 0f0c 	teq	r5, ip
 23f9486:	f47f af25 	bne.w	23f92d4 <__aeabi_dmul+0x234>
 23f948a:	4610      	mov	r0, r2
 23f948c:	4619      	mov	r1, r3
 23f948e:	e72c      	b.n	23f92ea <__aeabi_dmul+0x24a>
 23f9490:	ea95 0f0c 	teq	r5, ip
 23f9494:	d106      	bne.n	23f94a4 <__aeabi_ddiv+0x1b0>
 23f9496:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f949a:	f43f aefd 	beq.w	23f9298 <__aeabi_dmul+0x1f8>
 23f949e:	4610      	mov	r0, r2
 23f94a0:	4619      	mov	r1, r3
 23f94a2:	e722      	b.n	23f92ea <__aeabi_dmul+0x24a>
 23f94a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f94a8:	bf18      	it	ne
 23f94aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f94ae:	f47f aec5 	bne.w	23f923c <__aeabi_dmul+0x19c>
 23f94b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f94b6:	f47f af0d 	bne.w	23f92d4 <__aeabi_dmul+0x234>
 23f94ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f94be:	f47f aeeb 	bne.w	23f9298 <__aeabi_dmul+0x1f8>
 23f94c2:	e712      	b.n	23f92ea <__aeabi_dmul+0x24a>

023f94c4 <__aeabi_f2lz>:
 23f94c4:	ee07 0a90 	vmov	s15, r0
 23f94c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f94cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f94d0:	d401      	bmi.n	23f94d6 <__aeabi_f2lz+0x12>
 23f94d2:	f000 b80b 	b.w	23f94ec <__aeabi_f2ulz>
 23f94d6:	eef1 7a67 	vneg.f32	s15, s15
 23f94da:	b508      	push	{r3, lr}
 23f94dc:	ee17 0a90 	vmov	r0, s15
 23f94e0:	f000 f804 	bl	23f94ec <__aeabi_f2ulz>
 23f94e4:	4240      	negs	r0, r0
 23f94e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f94ea:	bd08      	pop	{r3, pc}

023f94ec <__aeabi_f2ulz>:
 23f94ec:	b5d0      	push	{r4, r6, r7, lr}
 23f94ee:	f7ff fd7f 	bl	23f8ff0 <__aeabi_f2d>
 23f94f2:	2200      	movs	r2, #0
 23f94f4:	4b0b      	ldr	r3, [pc, #44]	; (23f9524 <__aeabi_f2ulz+0x38>)
 23f94f6:	4606      	mov	r6, r0
 23f94f8:	460f      	mov	r7, r1
 23f94fa:	f7ff fdd1 	bl	23f90a0 <__aeabi_dmul>
 23f94fe:	f000 f815 	bl	23f952c <__aeabi_d2uiz>
 23f9502:	4604      	mov	r4, r0
 23f9504:	f7ff fd52 	bl	23f8fac <__aeabi_ui2d>
 23f9508:	2200      	movs	r2, #0
 23f950a:	4b07      	ldr	r3, [pc, #28]	; (23f9528 <__aeabi_f2ulz+0x3c>)
 23f950c:	f7ff fdc8 	bl	23f90a0 <__aeabi_dmul>
 23f9510:	4602      	mov	r2, r0
 23f9512:	460b      	mov	r3, r1
 23f9514:	4630      	mov	r0, r6
 23f9516:	4639      	mov	r1, r7
 23f9518:	f7ff fc0a 	bl	23f8d30 <__aeabi_dsub>
 23f951c:	f000 f806 	bl	23f952c <__aeabi_d2uiz>
 23f9520:	4621      	mov	r1, r4
 23f9522:	bdd0      	pop	{r4, r6, r7, pc}
 23f9524:	3df00000 	.word	0x3df00000
 23f9528:	41f00000 	.word	0x41f00000

023f952c <__aeabi_d2uiz>:
 23f952c:	004a      	lsls	r2, r1, #1
 23f952e:	d211      	bcs.n	23f9554 <__aeabi_d2uiz+0x28>
 23f9530:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f9534:	d211      	bcs.n	23f955a <__aeabi_d2uiz+0x2e>
 23f9536:	d50d      	bpl.n	23f9554 <__aeabi_d2uiz+0x28>
 23f9538:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f953c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f9540:	d40e      	bmi.n	23f9560 <__aeabi_d2uiz+0x34>
 23f9542:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f9546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f954a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f954e:	fa23 f002 	lsr.w	r0, r3, r2
 23f9552:	4770      	bx	lr
 23f9554:	f04f 0000 	mov.w	r0, #0
 23f9558:	4770      	bx	lr
 23f955a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f955e:	d102      	bne.n	23f9566 <__aeabi_d2uiz+0x3a>
 23f9560:	f04f 30ff 	mov.w	r0, #4294967295
 23f9564:	4770      	bx	lr
 23f9566:	f04f 0000 	mov.w	r0, #0
 23f956a:	4770      	bx	lr

023f956c <strcmp>:
 23f956c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f9570:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f9574:	2a01      	cmp	r2, #1
 23f9576:	bf28      	it	cs
 23f9578:	429a      	cmpcs	r2, r3
 23f957a:	d0f7      	beq.n	23f956c <strcmp>
 23f957c:	1ad0      	subs	r0, r2, r3
 23f957e:	4770      	bx	lr

023f9580 <strlen>:
 23f9580:	4603      	mov	r3, r0
 23f9582:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f9586:	2a00      	cmp	r2, #0
 23f9588:	d1fb      	bne.n	23f9582 <strlen+0x2>
 23f958a:	1a18      	subs	r0, r3, r0
 23f958c:	3801      	subs	r0, #1
 23f958e:	4770      	bx	lr

023f9590 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f9590:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f9592:	f004 fb3d 	bl	23fdc10 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f9596:	2500      	movs	r5, #0
 23f9598:	4e05      	ldr	r6, [pc, #20]	; (23f95b0 <module_user_init+0x20>)
 23f959a:	4c06      	ldr	r4, [pc, #24]	; (23f95b4 <module_user_init+0x24>)
 23f959c:	1ba4      	subs	r4, r4, r6
 23f959e:	08a4      	lsrs	r4, r4, #2
 23f95a0:	42ac      	cmp	r4, r5
 23f95a2:	d100      	bne.n	23f95a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f95a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f95a6:	f856 3b04 	ldr.w	r3, [r6], #4
 23f95aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f95ac:	3501      	adds	r5, #1
 23f95ae:	e7f7      	b.n	23f95a0 <module_user_init+0x10>
 23f95b0:	023fffd0 	.word	0x023fffd0
 23f95b4:	023ffff8 	.word	0x023ffff8

023f95b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f95b8:	f000 bf66 	b.w	23fa488 <setup>

023f95bc <module_user_loop>:
}

void module_user_loop() {
 23f95bc:	b508      	push	{r3, lr}
    loop();
 23f95be:	f000 fefd 	bl	23fa3bc <loop>
    _post_loop();
}
 23f95c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f95c6:	f004 badb 	b.w	23fdb80 <_post_loop>

023f95ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f95ca:	f003 be71 	b.w	23fd2b0 <malloc>

023f95ce <_Znaj>:
 23f95ce:	f003 be6f 	b.w	23fd2b0 <malloc>

023f95d2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f95d2:	f003 be7b 	b.w	23fd2cc <free>
	...

023f95d8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f95d8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f95da:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f95dc:	4a02      	ldr	r2, [pc, #8]	; (23f95e8 <__cxa_pure_virtual+0x10>)
 23f95de:	4903      	ldr	r1, [pc, #12]	; (23f95ec <__cxa_pure_virtual+0x14>)
 23f95e0:	f003 fcde 	bl	23fcfa0 <panic_>
  while (1);
 23f95e4:	e7fe      	b.n	23f95e4 <__cxa_pure_virtual+0xc>
 23f95e6:	bf00      	nop
 23f95e8:	023fc965 	.word	0x023fc965
 23f95ec:	023fee0c 	.word	0x023fee0c

023f95f0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f95f0:	7800      	ldrb	r0, [r0, #0]
 23f95f2:	fab0 f080 	clz	r0, r0
 23f95f6:	0940      	lsrs	r0, r0, #5
 23f95f8:	4770      	bx	lr

023f95fa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f95fa:	2301      	movs	r3, #1
 23f95fc:	7003      	strb	r3, [r0, #0]
 23f95fe:	4770      	bx	lr

023f9600 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 23f9600:	6943      	ldr	r3, [r0, #20]
 23f9602:	b113      	cbz	r3, 23f960a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f9604:	6983      	ldr	r3, [r0, #24]
 23f9606:	300c      	adds	r0, #12
 23f9608:	4718      	bx	r3
            callback();
        }
    }
 23f960a:	4770      	bx	lr

023f960c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 23f960c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 23f960e:	2100      	movs	r1, #0
 23f9610:	4604      	mov	r4, r0
 23f9612:	4608      	mov	r0, r1
 23f9614:	f003 fa08 	bl	23fca28 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 23f9618:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 23f961a:	4620      	mov	r0, r4
 23f961c:	a901      	add	r1, sp, #4
            void* id = nullptr;
 23f961e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 23f9620:	f003 fa2c 	bl	23fca7c <os_timer_get_id>
            t = static_cast<Timer*>(id);
 23f9624:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 23f9626:	b10c      	cbz	r4, 23f962c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 23f9628:	2301      	movs	r3, #1
 23f962a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 23f962c:	2100      	movs	r1, #0
 23f962e:	2001      	movs	r0, #1
 23f9630:	f003 f9fa 	bl	23fca28 <os_thread_scheduling>
            }
        }
        if (t) {
 23f9634:	b12c      	cbz	r4, 23f9642 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 23f9636:	6823      	ldr	r3, [r4, #0]
 23f9638:	4620      	mov	r0, r4
 23f963a:	689b      	ldr	r3, [r3, #8]
 23f963c:	4798      	blx	r3
            t->running = false;
 23f963e:	2300      	movs	r3, #0
 23f9640:	7123      	strb	r3, [r4, #4]
        }
    }
 23f9642:	b002      	add	sp, #8
 23f9644:	bd10      	pop	{r4, pc}

023f9646 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f9646:	2a01      	cmp	r2, #1
 23f9648:	d102      	bne.n	23f9650 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f964a:	6001      	str	r1, [r0, #0]
      }
 23f964c:	2000      	movs	r0, #0
 23f964e:	4770      	bx	lr
	  switch (__op)
 23f9650:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f9652:	bf04      	itt	eq
 23f9654:	680b      	ldreq	r3, [r1, #0]
 23f9656:	6003      	streq	r3, [r0, #0]
	      break;
 23f9658:	e7f8      	b.n	23f964c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f965a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f965a:	6803      	ldr	r3, [r0, #0]
 23f965c:	4718      	bx	r3

023f965e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 23f965e:	b510      	push	{r4, lr}
 23f9660:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
{
    if (base == 0) {
 23f9662:	b93a      	cbnz	r2, 23f9674 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
 23f9664:	6803      	ldr	r3, [r0, #0]
 23f9666:	689b      	ldr	r3, [r3, #8]
 23f9668:	4798      	blx	r3
        n += println();
 23f966a:	4620      	mov	r0, r4
    }
 23f966c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 23f9670:	f004 b8c1 	b.w	23fd7f6 <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f9674:	b2d2      	uxtb	r2, r2
 23f9676:	f004 f8d6 	bl	23fd826 <_ZN5Print11printNumberEmh>
 23f967a:	e7f6      	b.n	23f966a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

023f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 23f967c:	b510      	push	{r4, lr}
 23f967e:	4604      	mov	r4, r0
    if (base == 0) {
 23f9680:	b942      	cbnz	r2, 23f9694 <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0x18>
        return write(n);
 23f9682:	6802      	ldr	r2, [r0, #0]
 23f9684:	b2c9      	uxtb	r1, r1
 23f9686:	6892      	ldr	r2, [r2, #8]
 23f9688:	4790      	blx	r2
        n += println();
 23f968a:	4620      	mov	r0, r4
    }
 23f968c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 23f9690:	f004 b8b1 	b.w	23fd7f6 <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
 23f9694:	b2d2      	uxtb	r2, r2
 23f9696:	f004 f8c6 	bl	23fd826 <_ZN5Print11printNumberEmh>
 23f969a:	e7f6      	b.n	23f968a <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0xe>

023f969c <_ZN5Timer5resetEj.isra.0>:
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
 23f969c:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
 23f969e:	6880      	ldr	r0, [r0, #8]
 23f96a0:	b130      	cbz	r0, 23f96b0 <_ZN5Timer5resetEj.isra.0+0x14>
 23f96a2:	2300      	movs	r3, #0
 23f96a4:	e9cd 1300 	strd	r1, r3, [sp]
 23f96a8:	461a      	mov	r2, r3
 23f96aa:	2101      	movs	r1, #1
 23f96ac:	f003 f9f4 	bl	23fca98 <os_timer_change>
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
 23f96b0:	b003      	add	sp, #12
 23f96b2:	f85d fb04 	ldr.w	pc, [sp], #4

023f96b6 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
 23f96b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f96b8:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 23f96ba:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
 23f96bc:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 23f96be:	b130      	cbz	r0, 23f96ce <_ZN5Timer5startEj.isra.0+0x18>
 23f96c0:	2300      	movs	r3, #0
 23f96c2:	2102      	movs	r1, #2
 23f96c4:	461a      	mov	r2, r3
 23f96c6:	e9cd 3300 	strd	r3, r3, [sp]
 23f96ca:	f003 f9e5 	bl	23fca98 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 23f96ce:	68a0      	ldr	r0, [r4, #8]
 23f96d0:	b130      	cbz	r0, 23f96e0 <_ZN5Timer5startEj.isra.0+0x2a>
 23f96d2:	2300      	movs	r3, #0
 23f96d4:	461a      	mov	r2, r3
 23f96d6:	4619      	mov	r1, r3
 23f96d8:	e9cd 5300 	strd	r5, r3, [sp]
 23f96dc:	f003 f9dc 	bl	23fca98 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
 23f96e0:	b003      	add	sp, #12
 23f96e2:	bd30      	pop	{r4, r5, pc}

023f96e4 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
 23f96e4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f96e6:	f003 fdab 	bl	23fd240 <spark_cloud_flag_connected>
        if (!connected()) {
 23f96ea:	b120      	cbz	r0, 23f96f6 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
 23f96ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
 23f96f0:	2000      	movs	r0, #0
 23f96f2:	f003 bdb3 	b.w	23fd25c <spark_sync_time>
    }
 23f96f6:	bd08      	pop	{r3, pc}

023f96f8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23f96f8:	b40e      	push	{r1, r2, r3}
 23f96fa:	b503      	push	{r0, r1, lr}
 23f96fc:	ab03      	add	r3, sp, #12
 23f96fe:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 23f9702:	2100      	movs	r1, #0
        va_start(args, format);
 23f9704:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23f9706:	f004 f8ac 	bl	23fd862 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 23f970a:	b002      	add	sp, #8
 23f970c:	f85d eb04 	ldr.w	lr, [sp], #4
 23f9710:	b003      	add	sp, #12
 23f9712:	4770      	bx	lr

023f9714 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f9714:	b510      	push	{r4, lr}
      if (_M_manager)
 23f9716:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f9718:	4604      	mov	r4, r0
      if (_M_manager)
 23f971a:	b113      	cbz	r3, 23f9722 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f971c:	2203      	movs	r2, #3
 23f971e:	4601      	mov	r1, r0
 23f9720:	4798      	blx	r3
    }
 23f9722:	4620      	mov	r0, r4
 23f9724:	bd10      	pop	{r4, pc}
	...

023f9728 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 23f9728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f972a:	4b13      	ldr	r3, [pc, #76]	; (23f9778 <_ZN5TimerD1Ev+0x50>)
 23f972c:	4604      	mov	r4, r0
 23f972e:	6003      	str	r3, [r0, #0]
        if (handle) {
 23f9730:	6880      	ldr	r0, [r0, #8]
 23f9732:	b1c8      	cbz	r0, 23f9768 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 23f9734:	2500      	movs	r5, #0
 23f9736:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 23f973a:	2102      	movs	r1, #2
 23f973c:	e9cd 3500 	strd	r3, r5, [sp]
 23f9740:	462a      	mov	r2, r5
 23f9742:	462b      	mov	r3, r5
 23f9744:	f003 f9a8 	bl	23fca98 <os_timer_change>
            os_timer_set_id(handle, nullptr);
 23f9748:	4629      	mov	r1, r5
 23f974a:	68a0      	ldr	r0, [r4, #8]
 23f974c:	f003 f9c0 	bl	23fcad0 <os_timer_set_id>
            while (running) {
 23f9750:	7923      	ldrb	r3, [r4, #4]
 23f9752:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 23f9756:	b113      	cbz	r3, 23f975e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
 23f9758:	f003 f958 	bl	23fca0c <os_thread_yield>
            while (running) {
 23f975c:	e7f8      	b.n	23f9750 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
 23f975e:	4629      	mov	r1, r5
 23f9760:	68a0      	ldr	r0, [r4, #8]
 23f9762:	f003 f97d 	bl	23fca60 <os_timer_destroy>
            handle = nullptr;
 23f9766:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 23f9768:	f104 000c 	add.w	r0, r4, #12
 23f976c:	f7ff ffd2 	bl	23f9714 <_ZNSt14_Function_baseD1Ev>
    }
 23f9770:	4620      	mov	r0, r4
 23f9772:	b003      	add	sp, #12
 23f9774:	bd30      	pop	{r4, r5, pc}
 23f9776:	bf00      	nop
 23f9778:	023ff480 	.word	0x023ff480

023f977c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 23f977c:	b510      	push	{r4, lr}
 23f977e:	4604      	mov	r4, r0
    }
 23f9780:	f7ff ffd2 	bl	23f9728 <_ZN5TimerD1Ev>
 23f9784:	4620      	mov	r0, r4
 23f9786:	211c      	movs	r1, #28
 23f9788:	f7ff ff23 	bl	23f95d2 <_ZdlPvj>
 23f978c:	4620      	mov	r0, r4
 23f978e:	bd10      	pop	{r4, pc}

023f9790 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 23f9790:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9792:	2500      	movs	r5, #0
 23f9794:	4604      	mov	r4, r0
 23f9796:	468c      	mov	ip, r1
 23f9798:	b085      	sub	sp, #20
 23f979a:	4913      	ldr	r1, [pc, #76]	; (23f97e8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f979c:	af02      	add	r7, sp, #8
 23f979e:	7105      	strb	r5, [r0, #4]
 23f97a0:	6085      	str	r5, [r0, #8]
 23f97a2:	6001      	str	r1, [r0, #0]
 23f97a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 23f97a8:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f97ac:	f104 060c 	add.w	r6, r4, #12
 23f97b0:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f97b4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f97b8:	e897 0003 	ldmia.w	r7, {r0, r1}
 23f97bc:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f97c0:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f97c2:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23f97c4:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f97c6:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f97c8:	6095      	str	r5, [r2, #8]
 23f97ca:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f97cc:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 23f97ce:	e9cd 3500 	strd	r3, r5, [sp]
 23f97d2:	4661      	mov	r1, ip
 23f97d4:	4623      	mov	r3, r4
 23f97d6:	4a05      	ldr	r2, [pc, #20]	; (23f97ec <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
 23f97d8:	f104 0008 	add.w	r0, r4, #8
 23f97dc:	f003 f932 	bl	23fca44 <os_timer_create>
    }
 23f97e0:	4620      	mov	r0, r4
 23f97e2:	b005      	add	sp, #20
 23f97e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f97e6:	bf00      	nop
 23f97e8:	023ff480 	.word	0x023ff480
 23f97ec:	023f960d 	.word	0x023f960d

023f97f0 <_Z8switchONi>:
  }
}

// turn on specified wemo outlet
void switchON(int wemo)
{
 23f97f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f97f2:	4604      	mov	r4, r0

  String data1;
 23f97f4:	4924      	ldr	r1, [pc, #144]	; (23f9888 <_Z8switchONi+0x98>)
 23f97f6:	4668      	mov	r0, sp
 23f97f8:	f003 ff6d 	bl	23fd6d6 <_ZN6StringC1EPK19__FlashStringHelper>

  Serial.printf("Switching On Wemo #%i\n", wemo);
 23f97fc:	f004 fb26 	bl	23fde4c <_Z16_fetch_usbserialv>
 23f9800:	4622      	mov	r2, r4
 23f9802:	4922      	ldr	r1, [pc, #136]	; (23f988c <_Z8switchONi+0x9c>)
 23f9804:	f7ff ff78 	bl	23f96f8 <_ZN5Print6printfEPKcz>
    unsigned char concat(double num);

    // if there's not enough memory for the concatenated value, the string
    // will be left unchanged (but this isn't signalled in any way)
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f9808:	4921      	ldr	r1, [pc, #132]	; (23f9890 <_Z8switchONi+0xa0>)
 23f980a:	4668      	mov	r0, sp
 23f980c:	f003 ff93 	bl	23fd736 <_ZN6String6concatEPKc>
  data1 += "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo], wemoPort))
 23f9810:	4a20      	ldr	r2, [pc, #128]	; (23f9894 <_Z8switchONi+0xa4>)
 23f9812:	4921      	ldr	r1, [pc, #132]	; (23f9898 <_Z8switchONi+0xa8>)
 23f9814:	2300      	movs	r3, #0
 23f9816:	8812      	ldrh	r2, [r2, #0]
 23f9818:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 23f981c:	481f      	ldr	r0, [pc, #124]	; (23f989c <_Z8switchONi+0xac>)
 23f981e:	f004 fc91 	bl	23fe144 <_ZN9TCPClient7connectEPKctm>
 23f9822:	b328      	cbz	r0, 23f9870 <_Z8switchONi+0x80>
  {
    WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
 23f9824:	491e      	ldr	r1, [pc, #120]	; (23f98a0 <_Z8switchONi+0xb0>)
 23f9826:	481d      	ldr	r0, [pc, #116]	; (23f989c <_Z8switchONi+0xac>)
 23f9828:	f003 fff1 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.println("Content-Type: text/xml; charset=utf-8");
 23f982c:	491d      	ldr	r1, [pc, #116]	; (23f98a4 <_Z8switchONi+0xb4>)
 23f982e:	481b      	ldr	r0, [pc, #108]	; (23f989c <_Z8switchONi+0xac>)
 23f9830:	f003 ffed 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
 23f9834:	491c      	ldr	r1, [pc, #112]	; (23f98a8 <_Z8switchONi+0xb8>)
 23f9836:	4819      	ldr	r0, [pc, #100]	; (23f989c <_Z8switchONi+0xac>)
 23f9838:	f003 ffe9 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.println("Connection: keep-alive");
 23f983c:	491b      	ldr	r1, [pc, #108]	; (23f98ac <_Z8switchONi+0xbc>)
 23f983e:	4817      	ldr	r0, [pc, #92]	; (23f989c <_Z8switchONi+0xac>)
 23f9840:	f003 ffe5 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.print("Content-Length: ");
 23f9844:	491a      	ldr	r1, [pc, #104]	; (23f98b0 <_Z8switchONi+0xc0>)
 23f9846:	4815      	ldr	r0, [pc, #84]	; (23f989c <_Z8switchONi+0xac>)
 23f9848:	f003 ffca 	bl	23fd7e0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 23f984c:	220a      	movs	r2, #10
 23f984e:	9902      	ldr	r1, [sp, #8]
 23f9850:	4812      	ldr	r0, [pc, #72]	; (23f989c <_Z8switchONi+0xac>)
 23f9852:	f003 ffe8 	bl	23fd826 <_ZN5Print11printNumberEmh>
        n += println();
 23f9856:	4811      	ldr	r0, [pc, #68]	; (23f989c <_Z8switchONi+0xac>)
 23f9858:	f003 ffcd 	bl	23fd7f6 <_ZN5Print7printlnEv>
    WemoClient.println(data1.length());
    WemoClient.println();
 23f985c:	480f      	ldr	r0, [pc, #60]	; (23f989c <_Z8switchONi+0xac>)
 23f985e:	f003 ffca 	bl	23fd7f6 <_ZN5Print7printlnEv>
    WemoClient.print(data1);
 23f9862:	9900      	ldr	r1, [sp, #0]
 23f9864:	480d      	ldr	r0, [pc, #52]	; (23f989c <_Z8switchONi+0xac>)
 23f9866:	f003 ffbb 	bl	23fd7e0 <_ZN5Print5printEPKc>
    WemoClient.println();
 23f986a:	480c      	ldr	r0, [pc, #48]	; (23f989c <_Z8switchONi+0xac>)
 23f986c:	f003 ffc3 	bl	23fd7f6 <_ZN5Print7printlnEv>
  }

  if (WemoClient.connected())
 23f9870:	480a      	ldr	r0, [pc, #40]	; (23f989c <_Z8switchONi+0xac>)
 23f9872:	f004 fce5 	bl	23fe240 <_ZN9TCPClient9connectedEv>
 23f9876:	b110      	cbz	r0, 23f987e <_Z8switchONi+0x8e>
  {
    WemoClient.stop();
 23f9878:	4808      	ldr	r0, [pc, #32]	; (23f989c <_Z8switchONi+0xac>)
 23f987a:	f004 fe15 	bl	23fe4a8 <_ZN9TCPClient4stopEv>
  String data1;
 23f987e:	4668      	mov	r0, sp
 23f9880:	f003 fede 	bl	23fd640 <_ZN6StringD1Ev>
  }
}
 23f9884:	b004      	add	sp, #16
 23f9886:	bd10      	pop	{r4, pc}
 23f9888:	023ff02f 	.word	0x023ff02f
 23f988c:	023fee21 	.word	0x023fee21
 23f9890:	023fee38 	.word	0x023fee38
 23f9894:	1007aca0 	.word	0x1007aca0
 23f9898:	1007ac9c 	.word	0x1007ac9c
 23f989c:	1007ad28 	.word	0x1007ad28
 23f98a0:	023fef64 	.word	0x023fef64
 23f98a4:	023fef8c 	.word	0x023fef8c
 23f98a8:	023fefb2 	.word	0x023fefb2
 23f98ac:	023fefef 	.word	0x023fefef
 23f98b0:	023ff006 	.word	0x023ff006

023f98b4 <_Z9switchOFFi>:

// turn off wemo outlet specified
void switchOFF(int wemo)
{
 23f98b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f98b6:	4604      	mov	r4, r0
  String data1;
 23f98b8:	4924      	ldr	r1, [pc, #144]	; (23f994c <_Z9switchOFFi+0x98>)
 23f98ba:	4668      	mov	r0, sp
 23f98bc:	f003 ff0b 	bl	23fd6d6 <_ZN6StringC1EPK19__FlashStringHelper>

  Serial.printf("Switching Off Wemo #%i \n", wemo);
 23f98c0:	f004 fac4 	bl	23fde4c <_Z16_fetch_usbserialv>
 23f98c4:	4622      	mov	r2, r4
 23f98c6:	4922      	ldr	r1, [pc, #136]	; (23f9950 <_Z9switchOFFi+0x9c>)
 23f98c8:	f7ff ff16 	bl	23f96f8 <_ZN5Print6printfEPKcz>
 23f98cc:	4921      	ldr	r1, [pc, #132]	; (23f9954 <_Z9switchOFFi+0xa0>)
 23f98ce:	4668      	mov	r0, sp
 23f98d0:	f003 ff31 	bl	23fd736 <_ZN6String6concatEPKc>
  data1 += "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo], wemoPort))
 23f98d4:	4a20      	ldr	r2, [pc, #128]	; (23f9958 <_Z9switchOFFi+0xa4>)
 23f98d6:	4921      	ldr	r1, [pc, #132]	; (23f995c <_Z9switchOFFi+0xa8>)
 23f98d8:	2300      	movs	r3, #0
 23f98da:	8812      	ldrh	r2, [r2, #0]
 23f98dc:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 23f98e0:	481f      	ldr	r0, [pc, #124]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f98e2:	f004 fc2f 	bl	23fe144 <_ZN9TCPClient7connectEPKctm>
 23f98e6:	b328      	cbz	r0, 23f9934 <_Z9switchOFFi+0x80>
  {
    WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
 23f98e8:	491e      	ldr	r1, [pc, #120]	; (23f9964 <_Z9switchOFFi+0xb0>)
 23f98ea:	481d      	ldr	r0, [pc, #116]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f98ec:	f003 ff8f 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.println("Content-Type: text/xml; charset=utf-8");
 23f98f0:	491d      	ldr	r1, [pc, #116]	; (23f9968 <_Z9switchOFFi+0xb4>)
 23f98f2:	481b      	ldr	r0, [pc, #108]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f98f4:	f003 ff8b 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
 23f98f8:	491c      	ldr	r1, [pc, #112]	; (23f996c <_Z9switchOFFi+0xb8>)
 23f98fa:	4819      	ldr	r0, [pc, #100]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f98fc:	f003 ff87 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.println("Connection: keep-alive");
 23f9900:	491b      	ldr	r1, [pc, #108]	; (23f9970 <_Z9switchOFFi+0xbc>)
 23f9902:	4817      	ldr	r0, [pc, #92]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f9904:	f003 ff83 	bl	23fd80e <_ZN5Print7printlnEPKc>
    WemoClient.print("Content-Length: ");
 23f9908:	491a      	ldr	r1, [pc, #104]	; (23f9974 <_Z9switchOFFi+0xc0>)
 23f990a:	4815      	ldr	r0, [pc, #84]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f990c:	f003 ff68 	bl	23fd7e0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 23f9910:	220a      	movs	r2, #10
 23f9912:	9902      	ldr	r1, [sp, #8]
 23f9914:	4812      	ldr	r0, [pc, #72]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f9916:	f003 ff86 	bl	23fd826 <_ZN5Print11printNumberEmh>
        n += println();
 23f991a:	4811      	ldr	r0, [pc, #68]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f991c:	f003 ff6b 	bl	23fd7f6 <_ZN5Print7printlnEv>
    WemoClient.println(data1.length());
    WemoClient.println();
 23f9920:	480f      	ldr	r0, [pc, #60]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f9922:	f003 ff68 	bl	23fd7f6 <_ZN5Print7printlnEv>
    WemoClient.print(data1);
 23f9926:	9900      	ldr	r1, [sp, #0]
 23f9928:	480d      	ldr	r0, [pc, #52]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f992a:	f003 ff59 	bl	23fd7e0 <_ZN5Print5printEPKc>
    WemoClient.println();
 23f992e:	480c      	ldr	r0, [pc, #48]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f9930:	f003 ff61 	bl	23fd7f6 <_ZN5Print7printlnEv>
  }

  if (WemoClient.connected())
 23f9934:	480a      	ldr	r0, [pc, #40]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f9936:	f004 fc83 	bl	23fe240 <_ZN9TCPClient9connectedEv>
 23f993a:	b110      	cbz	r0, 23f9942 <_Z9switchOFFi+0x8e>
  {
    WemoClient.stop();
 23f993c:	4808      	ldr	r0, [pc, #32]	; (23f9960 <_Z9switchOFFi+0xac>)
 23f993e:	f004 fdb3 	bl	23fe4a8 <_ZN9TCPClient4stopEv>
  String data1;
 23f9942:	4668      	mov	r0, sp
 23f9944:	f003 fe7c 	bl	23fd640 <_ZN6StringD1Ev>
  }
}
 23f9948:	b004      	add	sp, #16
 23f994a:	bd10      	pop	{r4, pc}
 23f994c:	023ff02f 	.word	0x023ff02f
 23f9950:	023ff017 	.word	0x023ff017
 23f9954:	023ff030 	.word	0x023ff030
 23f9958:	1007aca0 	.word	0x1007aca0
 23f995c:	1007ac9c 	.word	0x1007ac9c
 23f9960:	1007ad28 	.word	0x1007ad28
 23f9964:	023fef64 	.word	0x023fef64
 23f9968:	023fef8c 	.word	0x023fef8c
 23f996c:	023fefb2 	.word	0x023fefb2
 23f9970:	023fefef 	.word	0x023fefef
 23f9974:	023ff006 	.word	0x023ff006

023f9978 <_Z14testFillScreenv>:
}

// FUNCTION DEFINITIONS
// DISPLAY FUNCTIONS
unsigned long testFillScreen()
{
 23f9978:	b538      	push	{r3, r4, r5, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f997a:	f003 f801 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  unsigned long start = micros();
  tft.fillScreen(ILI9341_BLACK);
 23f997e:	4c13      	ldr	r4, [pc, #76]	; (23f99cc <_Z14testFillScreenv+0x54>)
 23f9980:	4605      	mov	r5, r0
 23f9982:	2100      	movs	r1, #0
 23f9984:	4620      	mov	r0, r4
 23f9986:	f001 fd6a 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 23f998a:	f003 f83f 	bl	23fca0c <os_thread_yield>
  yield();
  tft.fillScreen(ILI9341_RED);
 23f998e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 23f9992:	4620      	mov	r0, r4
 23f9994:	f001 fd63 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9998:	f003 f838 	bl	23fca0c <os_thread_yield>
  yield();
  tft.fillScreen(ILI9341_GREEN);
 23f999c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 23f99a0:	4620      	mov	r0, r4
 23f99a2:	f001 fd5c 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f99a6:	f003 f831 	bl	23fca0c <os_thread_yield>
  yield();
  tft.fillScreen(ILI9341_BLUE);
 23f99aa:	211f      	movs	r1, #31
 23f99ac:	4620      	mov	r0, r4
 23f99ae:	f001 fd56 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f99b2:	f003 f82b 	bl	23fca0c <os_thread_yield>
  yield();
  tft.fillScreen(ILI9341_BLACK);
 23f99b6:	2100      	movs	r1, #0
 23f99b8:	4620      	mov	r0, r4
 23f99ba:	f001 fd50 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f99be:	f003 f825 	bl	23fca0c <os_thread_yield>
 23f99c2:	f002 ffdd 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  yield();
  return micros() - start;
}
 23f99c6:	1b40      	subs	r0, r0, r5
 23f99c8:	bd38      	pop	{r3, r4, r5, pc}
 23f99ca:	bf00      	nop
 23f99cc:	1007adcc 	.word	0x1007adcc

023f99d0 <_Z8testTextv>:
unsigned long testText()
{
 23f99d0:	b538      	push	{r3, r4, r5, lr}
  tft.fillScreen(ILI9341_BLACK);
 23f99d2:	4c37      	ldr	r4, [pc, #220]	; (23f9ab0 <_Z8testTextv+0xe0>)
 23f99d4:	2100      	movs	r1, #0
 23f99d6:	4620      	mov	r0, r4
 23f99d8:	f001 fd41 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f99dc:	f002 ffd0 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f99e0:	2300      	movs	r3, #0
 23f99e2:	4605      	mov	r5, r0
  unsigned long start = micros();
  tft.setCursor(0, 0);
  tft.setRotation(1),
 23f99e4:	2101      	movs	r1, #1
 23f99e6:	4620      	mov	r0, r4
 23f99e8:	6123      	str	r3, [r4, #16]
 23f99ea:	f002 fe7f 	bl	23fc6ec <_ZN16Adafruit_ILI934111setRotationEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f99ee:	f04f 33ff 	mov.w	r3, #4294967295
      tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(1);
 23f99f2:	4620      	mov	r0, r4
 23f99f4:	2101      	movs	r1, #1
 23f99f6:	6163      	str	r3, [r4, #20]
 23f99f8:	f002 fc2b 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("Hello Tammylee!");
 23f99fc:	4620      	mov	r0, r4
 23f99fe:	492d      	ldr	r1, [pc, #180]	; (23f9ab4 <_Z8testTextv+0xe4>)
 23f9a00:	f003 ff05 	bl	23fd80e <_ZN5Print7printlnEPKc>
 23f9a04:	f06f 131f 	mvn.w	r3, #2031647	; 0x1f001f
  tft.setTextColor(ILI9341_YELLOW);
  tft.setTextSize(2);
 23f9a08:	4620      	mov	r0, r4
 23f9a0a:	2102      	movs	r1, #2
 23f9a0c:	6163      	str	r3, [r4, #20]
 23f9a0e:	f002 fc20 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
        return printNumber(val, base) + t;
 23f9a12:	220a      	movs	r2, #10
 23f9a14:	f240 41d2 	movw	r1, #1234	; 0x4d2
 23f9a18:	4620      	mov	r0, r4
 23f9a1a:	f003 ff04 	bl	23fd826 <_ZN5Print11printNumberEmh>
            n += print(".");
 23f9a1e:	4620      	mov	r0, r4
 23f9a20:	4925      	ldr	r1, [pc, #148]	; (23f9ab8 <_Z8testTextv+0xe8>)
 23f9a22:	f003 fedd 	bl	23fd7e0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 23f9a26:	220a      	movs	r2, #10
 23f9a28:	2105      	movs	r1, #5
 23f9a2a:	4620      	mov	r0, r4
 23f9a2c:	f003 fefb 	bl	23fd826 <_ZN5Print11printNumberEmh>
 23f9a30:	220a      	movs	r2, #10
 23f9a32:	2106      	movs	r1, #6
 23f9a34:	4620      	mov	r0, r4
 23f9a36:	f003 fef6 	bl	23fd826 <_ZN5Print11printNumberEmh>
        n += println();
 23f9a3a:	4620      	mov	r0, r4
 23f9a3c:	f003 fedb 	bl	23fd7f6 <_ZN5Print7printlnEv>
 23f9a40:	f04f 23f8 	mov.w	r3, #4160813056	; 0xf800f800
  tft.println(1234.56);
  tft.setTextColor(ILI9341_RED);
  tft.setTextSize(3);
 23f9a44:	4620      	mov	r0, r4
 23f9a46:	2103      	movs	r1, #3
 23f9a48:	6163      	str	r3, [r4, #20]
 23f9a4a:	f002 fc02 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
        return printNumber(val, base) + t;
 23f9a4e:	2210      	movs	r2, #16
 23f9a50:	491a      	ldr	r1, [pc, #104]	; (23f9abc <_Z8testTextv+0xec>)
 23f9a52:	4620      	mov	r0, r4
 23f9a54:	f003 fee7 	bl	23fd826 <_ZN5Print11printNumberEmh>
        n += println();
 23f9a58:	4620      	mov	r0, r4
 23f9a5a:	f003 fecc 	bl	23fd7f6 <_ZN5Print7printlnEv>
  tft.println(0xDEADBEEF, HEX);
  tft.println();
 23f9a5e:	4620      	mov	r0, r4
 23f9a60:	f003 fec9 	bl	23fd7f6 <_ZN5Print7printlnEv>
 23f9a64:	4b16      	ldr	r3, [pc, #88]	; (23f9ac0 <_Z8testTextv+0xf0>)
  tft.setTextColor(ILI9341_GREEN);
  tft.setTextSize(5);
 23f9a66:	4620      	mov	r0, r4
 23f9a68:	2105      	movs	r1, #5
 23f9a6a:	6163      	str	r3, [r4, #20]
 23f9a6c:	f002 fbf1 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("How Are you?");
 23f9a70:	4620      	mov	r0, r4
 23f9a72:	4914      	ldr	r1, [pc, #80]	; (23f9ac4 <_Z8testTextv+0xf4>)
 23f9a74:	f003 fecb 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.setTextSize(2);
 23f9a78:	4620      	mov	r0, r4
 23f9a7a:	2102      	movs	r1, #2
 23f9a7c:	f002 fbe9 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("Jamie loves you!");
 23f9a80:	4620      	mov	r0, r4
 23f9a82:	4911      	ldr	r1, [pc, #68]	; (23f9ac8 <_Z8testTextv+0xf8>)
 23f9a84:	f003 fec3 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.setTextSize(1);
 23f9a88:	4620      	mov	r0, r4
 23f9a8a:	2101      	movs	r1, #1
 23f9a8c:	f002 fbe1 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("Time to meet your helping hands pal");
 23f9a90:	4620      	mov	r0, r4
 23f9a92:	490e      	ldr	r1, [pc, #56]	; (23f9acc <_Z8testTextv+0xfc>)
 23f9a94:	f003 febb 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println("I'm a device Jamie made for you");
 23f9a98:	4620      	mov	r0, r4
 23f9a9a:	490d      	ldr	r1, [pc, #52]	; (23f9ad0 <_Z8testTextv+0x100>)
 23f9a9c:	f003 feb7 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println("I'm here to help you remember!");
 23f9aa0:	490c      	ldr	r1, [pc, #48]	; (23f9ad4 <_Z8testTextv+0x104>)
 23f9aa2:	4620      	mov	r0, r4
 23f9aa4:	f003 feb3 	bl	23fd80e <_ZN5Print7printlnEPKc>
 23f9aa8:	f002 ff6a 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  return micros() - start;
}
 23f9aac:	1b40      	subs	r0, r0, r5
 23f9aae:	bd38      	pop	{r3, r4, r5, pc}
 23f9ab0:	1007adcc 	.word	0x1007adcc
 23f9ab4:	023ff15c 	.word	0x023ff15c
 23f9ab8:	023ff16c 	.word	0x023ff16c
 23f9abc:	deadbeef 	.word	0xdeadbeef
 23f9ac0:	07e007e0 	.word	0x07e007e0
 23f9ac4:	023ff16e 	.word	0x023ff16e
 23f9ac8:	023ff17b 	.word	0x023ff17b
 23f9acc:	023ff18c 	.word	0x023ff18c
 23f9ad0:	023ff1b0 	.word	0x023ff1b0
 23f9ad4:	023ff1d0 	.word	0x023ff1d0

023f9ad8 <_Z9testLinest>:
unsigned long testLines(uint16_t color)
{
 23f9ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /*!
    @brief      Get width of the display, accounting for current rotation
    @returns    Width in pixels
  */
  /************************************************************************/
  int16_t width(void) const { return _width; };
 23f9adc:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 23f9cac <_Z9testLinest+0x1d4>
  unsigned long start, t;
  int x1, y1, x2, y2,
      w = tft.width(),
      h = tft.height();

  tft.fillScreen(ILI9341_BLACK);
 23f9ae0:	2100      	movs	r1, #0
{
 23f9ae2:	b085      	sub	sp, #20
 23f9ae4:	4604      	mov	r4, r0
  tft.fillScreen(ILI9341_BLACK);
 23f9ae6:	4648      	mov	r0, r9
  /*!
    @brief      Get height of the display, accounting for current rotation
    @returns    Height in pixels
  */
  /************************************************************************/
  int16_t height(void) const { return _height; }
 23f9ae8:	f9b9 700e 	ldrsh.w	r7, [r9, #14]
  int16_t width(void) const { return _width; };
 23f9aec:	f9b9 800c 	ldrsh.w	r8, [r9, #12]
  yield();

  x1 = y1 = 0;
  y2 = h - 1;
  start = micros();
  for (x2 = 0; x2 < w; x2 += 6)
 23f9af0:	2500      	movs	r5, #0
  tft.fillScreen(ILI9341_BLACK);
 23f9af2:	f001 fcb4 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9af6:	f002 ff89 	bl	23fca0c <os_thread_yield>
 23f9afa:	f002 ff41 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  y2 = h - 1;
 23f9afe:	1e7e      	subs	r6, r7, #1
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b00:	fa0f fa86 	sxth.w	sl, r6
  for (x2 = 0; x2 < w; x2 += 6)
 23f9b04:	4545      	cmp	r5, r8
 23f9b06:	da09      	bge.n	23f9b1c <_Z9testLinest+0x44>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b08:	2200      	movs	r2, #0
 23f9b0a:	b22b      	sxth	r3, r5
 23f9b0c:	4611      	mov	r1, r2
 23f9b0e:	4648      	mov	r0, r9
 23f9b10:	e9cd a400 	strd	sl, r4, [sp]
 23f9b14:	f001 fcb1 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (x2 = 0; x2 < w; x2 += 6)
 23f9b18:	3506      	adds	r5, #6
 23f9b1a:	e7f3      	b.n	23f9b04 <_Z9testLinest+0x2c>
  x2 = w - 1;
  for (y2 = 0; y2 < h; y2 += 6)
 23f9b1c:	f04f 0900 	mov.w	r9, #0
  x2 = w - 1;
 23f9b20:	f108 35ff 	add.w	r5, r8, #4294967295
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b24:	f8df a184 	ldr.w	sl, [pc, #388]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9b28:	fa0f fb85 	sxth.w	fp, r5
  for (y2 = 0; y2 < h; y2 += 6)
 23f9b2c:	45b9      	cmp	r9, r7
 23f9b2e:	da0c      	bge.n	23f9b4a <_Z9testLinest+0x72>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b30:	2200      	movs	r2, #0
 23f9b32:	fa0f f389 	sxth.w	r3, r9
 23f9b36:	9300      	str	r3, [sp, #0]
 23f9b38:	4611      	mov	r1, r2
 23f9b3a:	465b      	mov	r3, fp
 23f9b3c:	4650      	mov	r0, sl
 23f9b3e:	9401      	str	r4, [sp, #4]
 23f9b40:	f001 fc9b 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (y2 = 0; y2 < h; y2 += 6)
 23f9b44:	f109 0906 	add.w	r9, r9, #6
 23f9b48:	e7f0      	b.n	23f9b2c <_Z9testLinest+0x54>

  x1 = w - 1;
  y1 = 0;
  y2 = h - 1;
  start = micros();
  for (x2 = 0; x2 < w; x2 += 6)
 23f9b4a:	f04f 0900 	mov.w	r9, #0
 23f9b4e:	f002 ff17 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b52:	f8df a158 	ldr.w	sl, [pc, #344]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9b56:	f002 ff59 	bl	23fca0c <os_thread_yield>
  tft.fillScreen(ILI9341_BLACK);
 23f9b5a:	2100      	movs	r1, #0
 23f9b5c:	4853      	ldr	r0, [pc, #332]	; (23f9cac <_Z9testLinest+0x1d4>)
 23f9b5e:	f001 fc7e 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b62:	fa0f fb86 	sxth.w	fp, r6
 23f9b66:	f002 ff51 	bl	23fca0c <os_thread_yield>
 23f9b6a:	f002 ff09 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
 23f9b6e:	b229      	sxth	r1, r5
  for (x2 = 0; x2 < w; x2 += 6)
 23f9b70:	45c1      	cmp	r9, r8
 23f9b72:	da0c      	bge.n	23f9b8e <_Z9testLinest+0xb6>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b74:	fa0f f389 	sxth.w	r3, r9
 23f9b78:	2200      	movs	r2, #0
 23f9b7a:	4650      	mov	r0, sl
 23f9b7c:	e9cd b400 	strd	fp, r4, [sp]
 23f9b80:	9102      	str	r1, [sp, #8]
  for (x2 = 0; x2 < w; x2 += 6)
 23f9b82:	f109 0906 	add.w	r9, r9, #6
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b86:	f001 fc78 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (x2 = 0; x2 < w; x2 += 6)
 23f9b8a:	9902      	ldr	r1, [sp, #8]
 23f9b8c:	e7f0      	b.n	23f9b70 <_Z9testLinest+0x98>
  x2 = 0;
  for (y2 = 0; y2 < h; y2 += 6)
 23f9b8e:	f04f 0900 	mov.w	r9, #0
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b92:	f8df a118 	ldr.w	sl, [pc, #280]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9b96:	fa0f fb85 	sxth.w	fp, r5
  for (y2 = 0; y2 < h; y2 += 6)
 23f9b9a:	45b9      	cmp	r9, r7
 23f9b9c:	da0c      	bge.n	23f9bb8 <_Z9testLinest+0xe0>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9b9e:	fa0f f389 	sxth.w	r3, r9
 23f9ba2:	9300      	str	r3, [sp, #0]
 23f9ba4:	2300      	movs	r3, #0
 23f9ba6:	4659      	mov	r1, fp
 23f9ba8:	461a      	mov	r2, r3
 23f9baa:	4650      	mov	r0, sl
 23f9bac:	9401      	str	r4, [sp, #4]
 23f9bae:	f001 fc64 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (y2 = 0; y2 < h; y2 += 6)
 23f9bb2:	f109 0906 	add.w	r9, r9, #6
 23f9bb6:	e7f0      	b.n	23f9b9a <_Z9testLinest+0xc2>

  x1 = 0;
  y1 = h - 1;
  y2 = 0;
  start = micros();
  for (x2 = 0; x2 < w; x2 += 6)
 23f9bb8:	f04f 0900 	mov.w	r9, #0
 23f9bbc:	46cb      	mov	fp, r9
 23f9bbe:	f002 fedf 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9bc2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9bc6:	f002 ff21 	bl	23fca0c <os_thread_yield>
  tft.fillScreen(ILI9341_BLACK);
 23f9bca:	2100      	movs	r1, #0
 23f9bcc:	4837      	ldr	r0, [pc, #220]	; (23f9cac <_Z9testLinest+0x1d4>)
 23f9bce:	f001 fc46 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9bd2:	f002 ff1b 	bl	23fca0c <os_thread_yield>
 23f9bd6:	f002 fed3 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9bda:	b232      	sxth	r2, r6
  for (x2 = 0; x2 < w; x2 += 6)
 23f9bdc:	45c1      	cmp	r9, r8
 23f9bde:	da0c      	bge.n	23f9bfa <_Z9testLinest+0x122>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9be0:	fa0f f389 	sxth.w	r3, r9
 23f9be4:	2100      	movs	r1, #0
 23f9be6:	4650      	mov	r0, sl
 23f9be8:	e9cd b400 	strd	fp, r4, [sp]
 23f9bec:	9202      	str	r2, [sp, #8]
  for (x2 = 0; x2 < w; x2 += 6)
 23f9bee:	f109 0906 	add.w	r9, r9, #6
    tft.drawLine(x1, y1, x2, y2, color);
 23f9bf2:	f001 fc42 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (x2 = 0; x2 < w; x2 += 6)
 23f9bf6:	9a02      	ldr	r2, [sp, #8]
 23f9bf8:	e7f0      	b.n	23f9bdc <_Z9testLinest+0x104>
  x2 = w - 1;
  for (y2 = 0; y2 < h; y2 += 6)
 23f9bfa:	f04f 0900 	mov.w	r9, #0
    tft.drawLine(x1, y1, x2, y2, color);
 23f9bfe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9c02:	b22b      	sxth	r3, r5
 23f9c04:	fa0f fb86 	sxth.w	fp, r6
  for (y2 = 0; y2 < h; y2 += 6)
 23f9c08:	45b9      	cmp	r9, r7
 23f9c0a:	da0d      	bge.n	23f9c28 <_Z9testLinest+0x150>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c0c:	fa0f f289 	sxth.w	r2, r9
 23f9c10:	9200      	str	r2, [sp, #0]
 23f9c12:	2100      	movs	r1, #0
 23f9c14:	465a      	mov	r2, fp
 23f9c16:	4650      	mov	r0, sl
 23f9c18:	9401      	str	r4, [sp, #4]
 23f9c1a:	9302      	str	r3, [sp, #8]
  for (y2 = 0; y2 < h; y2 += 6)
 23f9c1c:	f109 0906 	add.w	r9, r9, #6
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c20:	f001 fc2b 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (y2 = 0; y2 < h; y2 += 6)
 23f9c24:	9b02      	ldr	r3, [sp, #8]
 23f9c26:	e7ef      	b.n	23f9c08 <_Z9testLinest+0x130>
 23f9c28:	f002 feaa 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
 23f9c2c:	f002 feee 	bl	23fca0c <os_thread_yield>
  t += micros() - start;

  yield();
  tft.fillScreen(ILI9341_BLACK);
 23f9c30:	2100      	movs	r1, #0
 23f9c32:	481e      	ldr	r0, [pc, #120]	; (23f9cac <_Z9testLinest+0x1d4>)
 23f9c34:	f001 fc13 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9c38:	f002 fee8 	bl	23fca0c <os_thread_yield>
 23f9c3c:	f002 fea0 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>

  x1 = w - 1;
  y1 = h - 1;
  y2 = 0;
  start = micros();
  for (x2 = 0; x2 < w; x2 += 6)
 23f9c40:	f04f 0900 	mov.w	r9, #0
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c44:	f8df a064 	ldr.w	sl, [pc, #100]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9c48:	9002      	str	r0, [sp, #8]
 23f9c4a:	b232      	sxth	r2, r6
 23f9c4c:	fa0f fb85 	sxth.w	fp, r5
  for (x2 = 0; x2 < w; x2 += 6)
 23f9c50:	45c1      	cmp	r9, r8
 23f9c52:	da0d      	bge.n	23f9c70 <_Z9testLinest+0x198>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c54:	2300      	movs	r3, #0
 23f9c56:	4659      	mov	r1, fp
 23f9c58:	9300      	str	r3, [sp, #0]
 23f9c5a:	4650      	mov	r0, sl
 23f9c5c:	fa0f f389 	sxth.w	r3, r9
 23f9c60:	9401      	str	r4, [sp, #4]
 23f9c62:	9203      	str	r2, [sp, #12]
  for (x2 = 0; x2 < w; x2 += 6)
 23f9c64:	f109 0906 	add.w	r9, r9, #6
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c68:	f001 fc07 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (x2 = 0; x2 < w; x2 += 6)
 23f9c6c:	9a03      	ldr	r2, [sp, #12]
 23f9c6e:	e7ef      	b.n	23f9c50 <_Z9testLinest+0x178>
  x2 = 0;
  for (y2 = 0; y2 < h; y2 += 6)
 23f9c70:	f04f 0800 	mov.w	r8, #0
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c74:	f8df 9034 	ldr.w	r9, [pc, #52]	; 23f9cac <_Z9testLinest+0x1d4>
 23f9c78:	b236      	sxth	r6, r6
 23f9c7a:	b22d      	sxth	r5, r5
  for (y2 = 0; y2 < h; y2 += 6)
 23f9c7c:	45b8      	cmp	r8, r7
 23f9c7e:	da0c      	bge.n	23f9c9a <_Z9testLinest+0x1c2>
    tft.drawLine(x1, y1, x2, y2, color);
 23f9c80:	fa0f f388 	sxth.w	r3, r8
 23f9c84:	9300      	str	r3, [sp, #0]
 23f9c86:	4632      	mov	r2, r6
 23f9c88:	2300      	movs	r3, #0
 23f9c8a:	4629      	mov	r1, r5
 23f9c8c:	4648      	mov	r0, r9
 23f9c8e:	9401      	str	r4, [sp, #4]
 23f9c90:	f001 fbf3 	bl	23fb47a <_ZN12Adafruit_GFX8drawLineEsssst>
  for (y2 = 0; y2 < h; y2 += 6)
 23f9c94:	f108 0806 	add.w	r8, r8, #6
 23f9c98:	e7f0      	b.n	23f9c7c <_Z9testLinest+0x1a4>
 23f9c9a:	f002 feb7 	bl	23fca0c <os_thread_yield>
 23f9c9e:	f002 fe6f 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>

  yield();
  return micros() - start;
}
 23f9ca2:	9b02      	ldr	r3, [sp, #8]
 23f9ca4:	1ac0      	subs	r0, r0, r3
 23f9ca6:	b005      	add	sp, #20
 23f9ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9cac:	1007adcc 	.word	0x1007adcc

023f9cb0 <_Z13testFastLinestt>:
unsigned long testFastLines(uint16_t color1, uint16_t color2)
{
 23f9cb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f9cb4:	4d16      	ldr	r5, [pc, #88]	; (23f9d10 <_Z13testFastLinestt+0x60>)
 23f9cb6:	4680      	mov	r8, r0
 23f9cb8:	460f      	mov	r7, r1
  unsigned long start;
  int x, y, w = tft.width(), h = tft.height();

  tft.fillScreen(ILI9341_BLACK);
 23f9cba:	4628      	mov	r0, r5
 23f9cbc:	2100      	movs	r1, #0
 23f9cbe:	f9b5 a00c 	ldrsh.w	sl, [r5, #12]
  int16_t height(void) const { return _height; }
 23f9cc2:	f9b5 900e 	ldrsh.w	r9, [r5, #14]
 23f9cc6:	f001 fbca 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9cca:	f002 fe59 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  start = micros();
  for (y = 0; y < h; y += 5)
 23f9cce:	2400      	movs	r4, #0
 23f9cd0:	4606      	mov	r6, r0
 23f9cd2:	454c      	cmp	r4, r9
 23f9cd4:	da09      	bge.n	23f9cea <_Z13testFastLinestt+0x3a>
    tft.drawFastHLine(0, y, w, color1);
 23f9cd6:	b222      	sxth	r2, r4
 23f9cd8:	4653      	mov	r3, sl
 23f9cda:	2100      	movs	r1, #0
 23f9cdc:	4628      	mov	r0, r5
 23f9cde:	f8cd 8000 	str.w	r8, [sp]
 23f9ce2:	f001 f902 	bl	23faeea <_ZN15Adafruit_SPITFT13drawFastHLineEssst>
  for (y = 0; y < h; y += 5)
 23f9ce6:	3405      	adds	r4, #5
 23f9ce8:	e7f3      	b.n	23f9cd2 <_Z13testFastLinestt+0x22>
  for (x = 0; x < w; x += 5)
 23f9cea:	2400      	movs	r4, #0
    tft.drawFastVLine(x, 0, h, color2);
 23f9cec:	4d08      	ldr	r5, [pc, #32]	; (23f9d10 <_Z13testFastLinestt+0x60>)
  for (x = 0; x < w; x += 5)
 23f9cee:	4554      	cmp	r4, sl
 23f9cf0:	da08      	bge.n	23f9d04 <_Z13testFastLinestt+0x54>
    tft.drawFastVLine(x, 0, h, color2);
 23f9cf2:	b221      	sxth	r1, r4
 23f9cf4:	464b      	mov	r3, r9
 23f9cf6:	2200      	movs	r2, #0
 23f9cf8:	4628      	mov	r0, r5
 23f9cfa:	9700      	str	r7, [sp, #0]
 23f9cfc:	f001 f935 	bl	23faf6a <_ZN15Adafruit_SPITFT13drawFastVLineEssst>
  for (x = 0; x < w; x += 5)
 23f9d00:	3405      	adds	r4, #5
 23f9d02:	e7f4      	b.n	23f9cee <_Z13testFastLinestt+0x3e>
 23f9d04:	f002 fe3c 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>

  return micros() - start;
}
 23f9d08:	1b80      	subs	r0, r0, r6
 23f9d0a:	b002      	add	sp, #8
 23f9d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f9d10:	1007adcc 	.word	0x1007adcc

023f9d14 <_Z9testRectst>:
unsigned long testRects(uint16_t color)
{
 23f9d14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  int16_t width(void) const { return _width; };
 23f9d18:	4c18      	ldr	r4, [pc, #96]	; (23f9d7c <_Z9testRectst+0x68>)
  unsigned long start;
  int n, i, i2,
      cx = tft.width() / 2,
      cy = tft.height() / 2;

  tft.fillScreen(ILI9341_BLACK);
 23f9d1a:	2100      	movs	r1, #0
{
 23f9d1c:	4681      	mov	r9, r0
  tft.fillScreen(ILI9341_BLACK);
 23f9d1e:	4620      	mov	r0, r4
      cx = tft.width() / 2,
 23f9d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
      cy = tft.height() / 2;
 23f9d24:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
  tft.fillScreen(ILI9341_BLACK);
 23f9d28:	f001 fb99 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
  n = min(tft.width(), tft.height());
 23f9d2c:	f9b4 a00c 	ldrsh.w	sl, [r4, #12]
 23f9d30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  start = micros();
  for (i = 2; i < n; i += 6)
 23f9d34:	2702      	movs	r7, #2
  n = min(tft.width(), tft.height());
 23f9d36:	459a      	cmp	sl, r3
 23f9d38:	bfa8      	it	ge
 23f9d3a:	469a      	movge	sl, r3
 23f9d3c:	f002 fe20 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
 23f9d40:	4680      	mov	r8, r0
      cx = tft.width() / 2,
 23f9d42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
      cy = tft.height() / 2;
 23f9d46:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
      cx = tft.width() / 2,
 23f9d4a:	106d      	asrs	r5, r5, #1
      cy = tft.height() / 2;
 23f9d4c:	1076      	asrs	r6, r6, #1
  for (i = 2; i < n; i += 6)
 23f9d4e:	4557      	cmp	r7, sl
 23f9d50:	da0d      	bge.n	23f9d6e <_Z9testRectst+0x5a>
  {
    i2 = i / 2;
    tft.drawRect(cx - i2, cy - i2, i, i, color);
 23f9d52:	f3c7 014f 	ubfx	r1, r7, #1, #16
 23f9d56:	b23b      	sxth	r3, r7
 23f9d58:	1a72      	subs	r2, r6, r1
 23f9d5a:	1a69      	subs	r1, r5, r1
 23f9d5c:	4620      	mov	r0, r4
 23f9d5e:	e9cd 3900 	strd	r3, r9, [sp]
 23f9d62:	b212      	sxth	r2, r2
 23f9d64:	b209      	sxth	r1, r1
 23f9d66:	f001 fbc9 	bl	23fb4fc <_ZN12Adafruit_GFX8drawRectEsssst>
  for (i = 2; i < n; i += 6)
 23f9d6a:	3706      	adds	r7, #6
 23f9d6c:	e7ef      	b.n	23f9d4e <_Z9testRectst+0x3a>
 23f9d6e:	f002 fe07 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  }

  return micros() - start;
}
 23f9d72:	eba0 0008 	sub.w	r0, r0, r8
 23f9d76:	b002      	add	sp, #8
 23f9d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f9d7c:	1007adcc 	.word	0x1007adcc

023f9d80 <_Z15testFilledRectstt>:
unsigned long testFilledRects(uint16_t color1, uint16_t color2)
{
 23f9d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9d84:	4f24      	ldr	r7, [pc, #144]	; (23f9e18 <_Z15testFilledRectstt+0x98>)
 23f9d86:	b087      	sub	sp, #28
 23f9d88:	9103      	str	r1, [sp, #12]
 23f9d8a:	4681      	mov	r9, r0
  unsigned long start, t = 0;
  int n, i, i2,
      cx = tft.width() / 2 - 1,
      cy = tft.height() / 2 - 1;

  tft.fillScreen(ILI9341_BLACK);
 23f9d8c:	2100      	movs	r1, #0
 23f9d8e:	4638      	mov	r0, r7
      cx = tft.width() / 2 - 1,
 23f9d90:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
      cy = tft.height() / 2 - 1;
 23f9d94:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
  tft.fillScreen(ILI9341_BLACK);
 23f9d98:	f001 fb61 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
  n = min(tft.width(), tft.height());
 23f9d9c:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 23f9da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  unsigned long start, t = 0;
 23f9da4:	f04f 0800 	mov.w	r8, #0
  n = min(tft.width(), tft.height());
 23f9da8:	429e      	cmp	r6, r3
 23f9daa:	bfa8      	it	ge
 23f9dac:	461e      	movge	r6, r3
      cx = tft.width() / 2 - 1,
 23f9dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
      cy = tft.height() / 2 - 1;
 23f9db2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
      cx = tft.width() / 2 - 1,
 23f9db6:	106d      	asrs	r5, r5, #1
      cy = tft.height() / 2 - 1;
 23f9db8:	1064      	asrs	r4, r4, #1
 23f9dba:	3d01      	subs	r5, #1
 23f9dbc:	3c01      	subs	r4, #1
 23f9dbe:	b22d      	sxth	r5, r5
  int16_t height(void) const { return _height; }
 23f9dc0:	b224      	sxth	r4, r4
  for (i = n; i > 0; i -= 6)
 23f9dc2:	2e00      	cmp	r6, #0
 23f9dc4:	dd24      	ble.n	23f9e10 <_Z15testFilledRectstt+0x90>
 23f9dc6:	f002 fddb 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  {
    i2 = i / 2;
    start = micros();
    tft.fillRect(cx - i2, cy - i2, i, i, color1);
 23f9dca:	f3c6 024f 	ubfx	r2, r6, #1, #16
 23f9dce:	fa0f fa86 	sxth.w	sl, r6
 23f9dd2:	1aa9      	subs	r1, r5, r2
 23f9dd4:	1aa2      	subs	r2, r4, r2
 23f9dd6:	b209      	sxth	r1, r1
 23f9dd8:	b212      	sxth	r2, r2
 23f9dda:	4653      	mov	r3, sl
 23f9ddc:	4683      	mov	fp, r0
 23f9dde:	e9cd a900 	strd	sl, r9, [sp]
 23f9de2:	4638      	mov	r0, r7
 23f9de4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 23f9de8:	f001 f81d 	bl	23fae26 <_ZN15Adafruit_SPITFT8fillRectEsssst>
 23f9dec:	f002 fdc8 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    t += micros() - start;
    // Outlines are not included in timing results
    tft.drawRect(cx - i2, cy - i2, i, i, color2);
 23f9df0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 23f9df4:	9b03      	ldr	r3, [sp, #12]
    t += micros() - start;
 23f9df6:	eba0 000b 	sub.w	r0, r0, fp
    tft.drawRect(cx - i2, cy - i2, i, i, color2);
 23f9dfa:	e9cd a300 	strd	sl, r3, [sp]
    t += micros() - start;
 23f9dfe:	4480      	add	r8, r0
    tft.drawRect(cx - i2, cy - i2, i, i, color2);
 23f9e00:	4653      	mov	r3, sl
 23f9e02:	4638      	mov	r0, r7
 23f9e04:	f001 fb7a 	bl	23fb4fc <_ZN12Adafruit_GFX8drawRectEsssst>
  for (i = n; i > 0; i -= 6)
 23f9e08:	3e06      	subs	r6, #6
 23f9e0a:	f002 fdff 	bl	23fca0c <os_thread_yield>
 23f9e0e:	e7d8      	b.n	23f9dc2 <_Z15testFilledRectstt+0x42>
    yield();
  }

  return t;
}
 23f9e10:	4640      	mov	r0, r8
 23f9e12:	b007      	add	sp, #28
 23f9e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9e18:	1007adcc 	.word	0x1007adcc

023f9e1c <_Z17testFilledCirclesht>:
unsigned long testFilledCircles(uint8_t radius, uint16_t color)
{
 23f9e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9e20:	4604      	mov	r4, r0
  int16_t width(void) const { return _width; };
 23f9e22:	4e16      	ldr	r6, [pc, #88]	; (23f9e7c <_Z17testFilledCirclesht+0x60>)
 23f9e24:	b087      	sub	sp, #28
 23f9e26:	9104      	str	r1, [sp, #16]
  unsigned long start;
  int x, y, w = tft.width(), h = tft.height(), r2 = radius * 2;
 23f9e28:	fa0f f880 	sxth.w	r8, r0

  tft.fillScreen(ILI9341_BLACK);
 23f9e2c:	2100      	movs	r1, #0
  int x, y, w = tft.width(), h = tft.height(), r2 = radius * 2;
 23f9e2e:	ea4f 0a40 	mov.w	sl, r0, lsl #1
  tft.fillScreen(ILI9341_BLACK);
 23f9e32:	4630      	mov	r0, r6
  int x, y, w = tft.width(), h = tft.height(), r2 = radius * 2;
 23f9e34:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 23f9e38:	f9b6 b00e 	ldrsh.w	fp, [r6, #14]
  tft.fillScreen(ILI9341_BLACK);
 23f9e3c:	f001 fb0f 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9e40:	f002 fd9e 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  start = micros();
  for (x = radius; x < w; x += r2)
 23f9e44:	4625      	mov	r5, r4
 23f9e46:	9003      	str	r0, [sp, #12]
 23f9e48:	454d      	cmp	r5, r9
 23f9e4a:	da10      	bge.n	23f9e6e <_Z17testFilledCirclesht+0x52>
  {
    for (y = radius; y < h; y += r2)
 23f9e4c:	4627      	mov	r7, r4
    {
      tft.fillCircle(x, y, radius, color);
 23f9e4e:	b229      	sxth	r1, r5
    for (y = radius; y < h; y += r2)
 23f9e50:	455f      	cmp	r7, fp
 23f9e52:	da0a      	bge.n	23f9e6a <_Z17testFilledCirclesht+0x4e>
      tft.fillCircle(x, y, radius, color);
 23f9e54:	9b04      	ldr	r3, [sp, #16]
 23f9e56:	b23a      	sxth	r2, r7
 23f9e58:	9300      	str	r3, [sp, #0]
 23f9e5a:	4630      	mov	r0, r6
 23f9e5c:	4643      	mov	r3, r8
 23f9e5e:	9105      	str	r1, [sp, #20]
    for (y = radius; y < h; y += r2)
 23f9e60:	4457      	add	r7, sl
      tft.fillCircle(x, y, radius, color);
 23f9e62:	f001 fdcd 	bl	23fba00 <_ZN12Adafruit_GFX10fillCircleEssst>
    for (y = radius; y < h; y += r2)
 23f9e66:	9905      	ldr	r1, [sp, #20]
 23f9e68:	e7f2      	b.n	23f9e50 <_Z17testFilledCirclesht+0x34>
  for (x = radius; x < w; x += r2)
 23f9e6a:	4455      	add	r5, sl
 23f9e6c:	e7ec      	b.n	23f9e48 <_Z17testFilledCirclesht+0x2c>
 23f9e6e:	f002 fd87 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    }
  }

  return micros() - start;
}
 23f9e72:	9b03      	ldr	r3, [sp, #12]
 23f9e74:	1ac0      	subs	r0, r0, r3
 23f9e76:	b007      	add	sp, #28
 23f9e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9e7c:	1007adcc 	.word	0x1007adcc

023f9e80 <_Z11testCirclesht>:
unsigned long testCircles(uint8_t radius, uint16_t color)
{
 23f9e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9e84:	f8df a054 	ldr.w	sl, [pc, #84]	; 23f9edc <_Z11testCirclesht+0x5c>
 23f9e88:	b085      	sub	sp, #20
  unsigned long start;
  int x, y, r2 = radius * 2,
            w = tft.width() + radius,
 23f9e8a:	f9ba 700c 	ldrsh.w	r7, [sl, #12]
            h = tft.height() + radius;
 23f9e8e:	f9ba 800e 	ldrsh.w	r8, [sl, #14]
{
 23f9e92:	9102      	str	r1, [sp, #8]
  int x, y, r2 = radius * 2,
 23f9e94:	fa0f f980 	sxth.w	r9, r0
 23f9e98:	ea4f 0b40 	mov.w	fp, r0, lsl #1
            w = tft.width() + radius,
 23f9e9c:	4407      	add	r7, r0
            h = tft.height() + radius;
 23f9e9e:	4480      	add	r8, r0
 23f9ea0:	f002 fd6e 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>

  // Screen is not cleared for this one -- this is
  // intentional and does not affect the reported time.
  start = micros();
  for (x = 0; x < w; x += r2)
 23f9ea4:	2400      	movs	r4, #0
 23f9ea6:	4606      	mov	r6, r0
 23f9ea8:	42bc      	cmp	r4, r7
 23f9eaa:	da10      	bge.n	23f9ece <_Z11testCirclesht+0x4e>
  {
    for (y = 0; y < h; y += r2)
 23f9eac:	2500      	movs	r5, #0
    {
      tft.drawCircle(x, y, radius, color);
 23f9eae:	b221      	sxth	r1, r4
    for (y = 0; y < h; y += r2)
 23f9eb0:	4545      	cmp	r5, r8
 23f9eb2:	da0a      	bge.n	23f9eca <_Z11testCirclesht+0x4a>
      tft.drawCircle(x, y, radius, color);
 23f9eb4:	9b02      	ldr	r3, [sp, #8]
 23f9eb6:	b22a      	sxth	r2, r5
 23f9eb8:	9300      	str	r3, [sp, #0]
 23f9eba:	4650      	mov	r0, sl
 23f9ebc:	464b      	mov	r3, r9
 23f9ebe:	9103      	str	r1, [sp, #12]
    for (y = 0; y < h; y += r2)
 23f9ec0:	445d      	add	r5, fp
      tft.drawCircle(x, y, radius, color);
 23f9ec2:	f001 fb81 	bl	23fb5c8 <_ZN12Adafruit_GFX10drawCircleEssst>
    for (y = 0; y < h; y += r2)
 23f9ec6:	9903      	ldr	r1, [sp, #12]
 23f9ec8:	e7f2      	b.n	23f9eb0 <_Z11testCirclesht+0x30>
  for (x = 0; x < w; x += r2)
 23f9eca:	445c      	add	r4, fp
 23f9ecc:	e7ec      	b.n	23f9ea8 <_Z11testCirclesht+0x28>
 23f9ece:	f002 fd57 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    }
  }

  return micros() - start;
}
 23f9ed2:	1b80      	subs	r0, r0, r6
 23f9ed4:	b005      	add	sp, #20
 23f9ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9eda:	bf00      	nop
 23f9edc:	1007adcc 	.word	0x1007adcc

023f9ee0 <_Z13testTrianglesv>:
unsigned long testTriangles()
{
 23f9ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9ee4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 23f9f78 <_Z13testTrianglesv+0x98>
 23f9ee8:	b087      	sub	sp, #28
  unsigned long start;
  int n, i, cx = tft.width() / 2 - 1,
 23f9eea:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
            cy = tft.height() / 2 - 1;
 23f9eee:	f9b8 400e 	ldrsh.w	r4, [r8, #14]
  int n, i, cx = tft.width() / 2 - 1,
 23f9ef2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            cy = tft.height() / 2 - 1;
 23f9ef6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
  int n, i, cx = tft.width() / 2 - 1,
 23f9efa:	1076      	asrs	r6, r6, #1
            cy = tft.height() / 2 - 1;
 23f9efc:	1064      	asrs	r4, r4, #1

  tft.fillScreen(ILI9341_BLACK);
 23f9efe:	2100      	movs	r1, #0
 23f9f00:	4640      	mov	r0, r8
            cy = tft.height() / 2 - 1;
 23f9f02:	3c01      	subs	r4, #1
 23f9f04:	f106 39ff 	add.w	r9, r6, #4294967295
  tft.fillScreen(ILI9341_BLACK);
 23f9f08:	f001 faa9 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9f0c:	fa0f f989 	sxth.w	r9, r9
            cy = tft.height() / 2 - 1;
 23f9f10:	b223      	sxth	r3, r4
 23f9f12:	454b      	cmp	r3, r9
 23f9f14:	bfa8      	it	ge
 23f9f16:	464b      	movge	r3, r9
 23f9f18:	9304      	str	r3, [sp, #16]
 23f9f1a:	f002 fd31 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  n = min(cx, cy);
  start = micros();
  for (i = 0; i < n; i += 5)
 23f9f1e:	2700      	movs	r7, #0
 23f9f20:	9005      	str	r0, [sp, #20]
 23f9f22:	b2a4      	uxth	r4, r4
 23f9f24:	9b04      	ldr	r3, [sp, #16]
 23f9f26:	429f      	cmp	r7, r3
 23f9f28:	da1f      	bge.n	23f9f6a <_Z13testTrianglesv+0x8a>
  {
    tft.drawTriangle(
 23f9f2a:	b2fb      	uxtb	r3, r7
 23f9f2c:	461a      	mov	r2, r3
 23f9f2e:	4619      	mov	r1, r3
 23f9f30:	4640      	mov	r0, r8
 23f9f32:	f000 fe57 	bl	23fabe4 <_ZN15Adafruit_SPITFT8color565Ehhh>
 23f9f36:	1e75      	subs	r5, r6, #1
 23f9f38:	fa1f fb87 	uxth.w	fp, r7
 23f9f3c:	b2ad      	uxth	r5, r5
 23f9f3e:	fa14 fa87 	uxtah	sl, r4, r7
 23f9f42:	eba5 030b 	sub.w	r3, r5, fp
 23f9f46:	445d      	add	r5, fp
 23f9f48:	fa0f fa8a 	sxth.w	sl, sl
 23f9f4c:	eba4 020b 	sub.w	r2, r4, fp
 23f9f50:	b22d      	sxth	r5, r5
 23f9f52:	e9cd a002 	strd	sl, r0, [sp, #8]
 23f9f56:	4649      	mov	r1, r9
 23f9f58:	4640      	mov	r0, r8
 23f9f5a:	e9cd a500 	strd	sl, r5, [sp]
 23f9f5e:	b21b      	sxth	r3, r3
 23f9f60:	b212      	sxth	r2, r2
 23f9f62:	f001 fe75 	bl	23fbc50 <_ZN12Adafruit_GFX12drawTriangleEsssssst>
  for (i = 0; i < n; i += 5)
 23f9f66:	3705      	adds	r7, #5
 23f9f68:	e7dc      	b.n	23f9f24 <_Z13testTrianglesv+0x44>
 23f9f6a:	f002 fd09 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
        cx + i, cy + i, // bottom right
        tft.color565(i, i, i));
  }

  return micros() - start;
}
 23f9f6e:	9b05      	ldr	r3, [sp, #20]
 23f9f70:	1ac0      	subs	r0, r0, r3
 23f9f72:	b007      	add	sp, #28
 23f9f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9f78:	1007adcc 	.word	0x1007adcc

023f9f7c <_Z19testFilledTrianglesv>:
unsigned long testFilledTriangles()
{
 23f9f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9f80:	4d35      	ldr	r5, [pc, #212]	; (23fa058 <_Z19testFilledTrianglesv+0xdc>)
 23f9f82:	b089      	sub	sp, #36	; 0x24
  unsigned long start, t = 0;
  int i, cx = tft.width() / 2 - 1,
 23f9f84:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
         cy = tft.height() / 2 - 1;

  tft.fillScreen(ILI9341_BLACK);
 23f9f88:	2100      	movs	r1, #0
  int i, cx = tft.width() / 2 - 1,
 23f9f8a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23f9f8e:	105b      	asrs	r3, r3, #1
 23f9f90:	9304      	str	r3, [sp, #16]
 23f9f92:	f103 38ff 	add.w	r8, r3, #4294967295
         cy = tft.height() / 2 - 1;
 23f9f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  tft.fillScreen(ILI9341_BLACK);
 23f9f9a:	4628      	mov	r0, r5
         cy = tft.height() / 2 - 1;
 23f9f9c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23f9fa0:	105c      	asrs	r4, r3, #1
  tft.fillScreen(ILI9341_BLACK);
 23f9fa2:	f001 fa5c 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23f9fa6:	f002 fceb 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
         cy = tft.height() / 2 - 1;
 23f9faa:	1e63      	subs	r3, r4, #1
 23f9fac:	b21c      	sxth	r4, r3
 23f9fae:	fa0f f888 	sxth.w	r8, r8
  start = micros();
  for (i = min(cx, cy); i > 10; i -= 5)
 23f9fb2:	4544      	cmp	r4, r8
 23f9fb4:	bfa8      	it	ge
 23f9fb6:	4644      	movge	r4, r8
  unsigned long start, t = 0;
 23f9fb8:	f04f 0b00 	mov.w	fp, #0
 23f9fbc:	b29b      	uxth	r3, r3
 23f9fbe:	9306      	str	r3, [sp, #24]
  for (i = min(cx, cy); i > 10; i -= 5)
 23f9fc0:	2c0a      	cmp	r4, #10
 23f9fc2:	dd44      	ble.n	23fa04e <_Z19testFilledTrianglesv+0xd2>
 23f9fc4:	f002 fcdc 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
 23f9fc8:	9b06      	ldr	r3, [sp, #24]
 23f9fca:	b2a2      	uxth	r2, r4
 23f9fcc:	eba3 0902 	sub.w	r9, r3, r2
 23f9fd0:	9b04      	ldr	r3, [sp, #16]
 23f9fd2:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 23f9fd6:	3b01      	subs	r3, #1
 23f9fd8:	b29b      	uxth	r3, r3
 23f9fda:	9906      	ldr	r1, [sp, #24]
 23f9fdc:	eba3 0a02 	sub.w	sl, r3, r2
 23f9fe0:	0076      	lsls	r6, r6, #1
 23f9fe2:	4413      	add	r3, r2
 23f9fe4:	b2f6      	uxtb	r6, r6
 23f9fe6:	b21b      	sxth	r3, r3
 23f9fe8:	188f      	adds	r7, r1, r2
 23f9fea:	9007      	str	r0, [sp, #28]
  {
    start = micros();
    tft.fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 23f9fec:	4632      	mov	r2, r6
 23f9fee:	2100      	movs	r1, #0
 23f9ff0:	9305      	str	r3, [sp, #20]
 23f9ff2:	4628      	mov	r0, r5
 23f9ff4:	4633      	mov	r3, r6
 23f9ff6:	f000 fdf5 	bl	23fabe4 <_ZN15Adafruit_SPITFT8color565Ehhh>
 23f9ffa:	9b05      	ldr	r3, [sp, #20]
 23f9ffc:	b23f      	sxth	r7, r7
 23f9ffe:	fa0f f989 	sxth.w	r9, r9
 23fa002:	fa0f fa8a 	sxth.w	sl, sl
 23fa006:	464a      	mov	r2, r9
 23fa008:	4641      	mov	r1, r8
 23fa00a:	e9cd 7002 	strd	r7, r0, [sp, #8]
 23fa00e:	e9cd 7300 	strd	r7, r3, [sp]
 23fa012:	4628      	mov	r0, r5
 23fa014:	4653      	mov	r3, sl
 23fa016:	f001 fe46 	bl	23fbca6 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
 23fa01a:	f002 fcb1 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
                     tft.color565(0, i * 10, i * 10));
    t += micros() - start;
 23fa01e:	9b07      	ldr	r3, [sp, #28]
    tft.drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 23fa020:	4632      	mov	r2, r6
    t += micros() - start;
 23fa022:	1ac0      	subs	r0, r0, r3
    tft.drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 23fa024:	4631      	mov	r1, r6
 23fa026:	2300      	movs	r3, #0
    t += micros() - start;
 23fa028:	4483      	add	fp, r0
    tft.drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 23fa02a:	4628      	mov	r0, r5
 23fa02c:	f000 fdda 	bl	23fabe4 <_ZN15Adafruit_SPITFT8color565Ehhh>
 23fa030:	9b05      	ldr	r3, [sp, #20]
 23fa032:	464a      	mov	r2, r9
 23fa034:	4641      	mov	r1, r8
 23fa036:	e9cd 7002 	strd	r7, r0, [sp, #8]
 23fa03a:	e9cd 7300 	strd	r7, r3, [sp]
 23fa03e:	4628      	mov	r0, r5
 23fa040:	4653      	mov	r3, sl
 23fa042:	f001 fe05 	bl	23fbc50 <_ZN12Adafruit_GFX12drawTriangleEsssssst>
  for (i = min(cx, cy); i > 10; i -= 5)
 23fa046:	3c05      	subs	r4, #5
 23fa048:	f002 fce0 	bl	23fca0c <os_thread_yield>
 23fa04c:	e7b8      	b.n	23f9fc0 <_Z19testFilledTrianglesv+0x44>
                     tft.color565(i * 10, i * 10, 0));
    yield();
  }

  return t;
}
 23fa04e:	4658      	mov	r0, fp
 23fa050:	b009      	add	sp, #36	; 0x24
 23fa052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa056:	bf00      	nop
 23fa058:	1007adcc 	.word	0x1007adcc

023fa05c <_Z14testRoundRectsv>:
unsigned long testRoundRects()
{
 23fa05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa060:	4e21      	ldr	r6, [pc, #132]	; (23fa0e8 <_Z14testRoundRectsv+0x8c>)
  unsigned long start;
  int w, i, i2,
      cx = tft.width() / 2 - 1,
      cy = tft.height() / 2 - 1;

  tft.fillScreen(ILI9341_BLACK);
 23fa062:	2100      	movs	r1, #0
      cx = tft.width() / 2 - 1,
 23fa064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
  tft.fillScreen(ILI9341_BLACK);
 23fa068:	4630      	mov	r0, r6
      cx = tft.width() / 2 - 1,
 23fa06a:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
      cy = tft.height() / 2 - 1;
 23fa06e:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
{
 23fa072:	b085      	sub	sp, #20
      cy = tft.height() / 2 - 1;
 23fa074:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
  tft.fillScreen(ILI9341_BLACK);
 23fa078:	f001 f9f1 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
  w = min(tft.width(), tft.height());
 23fa07c:	f9b6 a00c 	ldrsh.w	sl, [r6, #12]
 23fa080:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
  start = micros();
  for (i = 0; i < w; i += 6)
 23fa084:	2700      	movs	r7, #0
  w = min(tft.width(), tft.height());
 23fa086:	459a      	cmp	sl, r3
 23fa088:	bfa8      	it	ge
 23fa08a:	469a      	movge	sl, r3
 23fa08c:	f002 fc78 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
 23fa090:	4681      	mov	r9, r0
      cx = tft.width() / 2 - 1,
 23fa092:	106d      	asrs	r5, r5, #1
      cy = tft.height() / 2 - 1;
 23fa094:	1064      	asrs	r4, r4, #1
 23fa096:	3d01      	subs	r5, #1
 23fa098:	3c01      	subs	r4, #1
 23fa09a:	b22d      	sxth	r5, r5
  int16_t height(void) const { return _height; }
 23fa09c:	b224      	sxth	r4, r4
  for (i = 0; i < w; i += 6)
 23fa09e:	4557      	cmp	r7, sl
 23fa0a0:	da1a      	bge.n	23fa0d8 <_Z14testRoundRectsv+0x7c>
  {
    i2 = i / 2;
    tft.drawRoundRect(cx - i2, cy - i2, i, i, i / 8, tft.color565(i, 0, 0));
 23fa0a2:	2300      	movs	r3, #0
 23fa0a4:	b2f9      	uxtb	r1, r7
 23fa0a6:	461a      	mov	r2, r3
 23fa0a8:	4630      	mov	r0, r6
 23fa0aa:	f000 fd9b 	bl	23fabe4 <_ZN15Adafruit_SPITFT8color565Ehhh>
 23fa0ae:	f3c7 084f 	ubfx	r8, r7, #1, #16
 23fa0b2:	fa0f fb87 	sxth.w	fp, r7
 23fa0b6:	f347 03cf 	sbfx	r3, r7, #3, #16
 23fa0ba:	eba4 0208 	sub.w	r2, r4, r8
 23fa0be:	eba5 0108 	sub.w	r1, r5, r8
 23fa0c2:	e9cd b300 	strd	fp, r3, [sp]
 23fa0c6:	9002      	str	r0, [sp, #8]
 23fa0c8:	465b      	mov	r3, fp
 23fa0ca:	4630      	mov	r0, r6
 23fa0cc:	b212      	sxth	r2, r2
 23fa0ce:	b209      	sxth	r1, r1
 23fa0d0:	f001 fcc1 	bl	23fba56 <_ZN12Adafruit_GFX13drawRoundRectEssssst>
  for (i = 0; i < w; i += 6)
 23fa0d4:	3706      	adds	r7, #6
 23fa0d6:	e7e2      	b.n	23fa09e <_Z14testRoundRectsv+0x42>
 23fa0d8:	f002 fc52 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  }

  return micros() - start;
}
 23fa0dc:	eba0 0009 	sub.w	r0, r0, r9
 23fa0e0:	b005      	add	sp, #20
 23fa0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa0e6:	bf00      	nop
 23fa0e8:	1007adcc 	.word	0x1007adcc

023fa0ec <_Z20testFilledRoundRectsv>:
unsigned long testFilledRoundRects()
{
 23fa0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  int16_t width(void) const { return _width; };
 23fa0f0:	4e21      	ldr	r6, [pc, #132]	; (23fa178 <_Z20testFilledRoundRectsv+0x8c>)
  unsigned long start;
  int i, i2,
      cx = tft.width() / 2 - 1,
      cy = tft.height() / 2 - 1;

  tft.fillScreen(ILI9341_BLACK);
 23fa0f2:	2100      	movs	r1, #0
      cx = tft.width() / 2 - 1,
 23fa0f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
  tft.fillScreen(ILI9341_BLACK);
 23fa0f8:	4630      	mov	r0, r6
      cx = tft.width() / 2 - 1,
 23fa0fa:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
      cy = tft.height() / 2 - 1;
 23fa0fe:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
      cx = tft.width() / 2 - 1,
 23fa102:	107f      	asrs	r7, r7, #1
      cy = tft.height() / 2 - 1;
 23fa104:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  tft.fillScreen(ILI9341_BLACK);
 23fa108:	f001 f9a9 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23fa10c:	f002 fc38 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  start = micros();
  for (i = min(tft.width(), tft.height()); i > 20; i -= 6)
 23fa110:	f9b6 400c 	ldrsh.w	r4, [r6, #12]
 23fa114:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fa118:	4681      	mov	r9, r0
 23fa11a:	429c      	cmp	r4, r3
 23fa11c:	bfa8      	it	ge
 23fa11e:	461c      	movge	r4, r3
      cy = tft.height() / 2 - 1;
 23fa120:	106d      	asrs	r5, r5, #1
 23fa122:	3f01      	subs	r7, #1
 23fa124:	3d01      	subs	r5, #1
 23fa126:	b23f      	sxth	r7, r7
  int16_t height(void) const { return _height; }
 23fa128:	b22d      	sxth	r5, r5
  for (i = min(tft.width(), tft.height()); i > 20; i -= 6)
 23fa12a:	2c14      	cmp	r4, #20
 23fa12c:	dd1c      	ble.n	23fa168 <_Z20testFilledRoundRectsv+0x7c>
  {
    i2 = i / 2;
    tft.fillRoundRect(cx - i2, cy - i2, i, i, i / 8, tft.color565(0, i, 0));
 23fa12e:	2300      	movs	r3, #0
 23fa130:	b2e2      	uxtb	r2, r4
 23fa132:	4619      	mov	r1, r3
 23fa134:	4630      	mov	r0, r6
 23fa136:	f000 fd55 	bl	23fabe4 <_ZN15Adafruit_SPITFT8color565Ehhh>
 23fa13a:	f3c4 084f 	ubfx	r8, r4, #1, #16
 23fa13e:	fa0f fa84 	sxth.w	sl, r4
 23fa142:	f344 03cf 	sbfx	r3, r4, #3, #16
 23fa146:	eba5 0208 	sub.w	r2, r5, r8
 23fa14a:	eba7 0108 	sub.w	r1, r7, r8
 23fa14e:	e9cd a300 	strd	sl, r3, [sp]
 23fa152:	9002      	str	r0, [sp, #8]
 23fa154:	4653      	mov	r3, sl
 23fa156:	4630      	mov	r0, r6
 23fa158:	b212      	sxth	r2, r2
 23fa15a:	b209      	sxth	r1, r1
 23fa15c:	f001 fd14 	bl	23fbb88 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  for (i = min(tft.width(), tft.height()); i > 20; i -= 6)
 23fa160:	3c06      	subs	r4, #6
 23fa162:	f002 fc53 	bl	23fca0c <os_thread_yield>
 23fa166:	e7e0      	b.n	23fa12a <_Z20testFilledRoundRectsv+0x3e>
 23fa168:	f002 fc0a 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
    yield();
  }

  return micros() - start;
}
 23fa16c:	eba0 0009 	sub.w	r0, r0, r9
 23fa170:	b004      	add	sp, #16
 23fa172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa176:	bf00      	nop
 23fa178:	1007adcc 	.word	0x1007adcc

023fa17c <_Z16updatePixelStatem>:

// NEOPIXEL FUNCTIONS
void updatePixelState(uint32_t color)
{
 23fa17c:	b507      	push	{r0, r1, r2, lr}
  if (currentTime - lastUpdateTime <= 3000)
 23fa17e:	4b1b      	ldr	r3, [pc, #108]	; (23fa1ec <_Z16updatePixelStatem+0x70>)
 23fa180:	491b      	ldr	r1, [pc, #108]	; (23fa1f0 <_Z16updatePixelStatem+0x74>)
 23fa182:	681b      	ldr	r3, [r3, #0]
 23fa184:	6809      	ldr	r1, [r1, #0]
{
 23fa186:	4602      	mov	r2, r0
  if (currentTime - lastUpdateTime <= 3000)
 23fa188:	1a5b      	subs	r3, r3, r1
 23fa18a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 23fa18e:	428b      	cmp	r3, r1
 23fa190:	d828      	bhi.n	23fa1e4 <_Z16updatePixelStatem+0x68>
  {
    pixel.setPixelColor(0, color);
 23fa192:	9001      	str	r0, [sp, #4]
 23fa194:	2100      	movs	r1, #0
 23fa196:	4817      	ldr	r0, [pc, #92]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa198:	f002 fa24 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(1, color);
 23fa19c:	9a01      	ldr	r2, [sp, #4]
 23fa19e:	2101      	movs	r1, #1
 23fa1a0:	4814      	ldr	r0, [pc, #80]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa1a2:	f002 fa1f 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(2, color);
 23fa1a6:	9a01      	ldr	r2, [sp, #4]
 23fa1a8:	2102      	movs	r1, #2
 23fa1aa:	4812      	ldr	r0, [pc, #72]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa1ac:	f002 fa1a 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(3, color);
 23fa1b0:	9a01      	ldr	r2, [sp, #4]
 23fa1b2:	2103      	movs	r1, #3
 23fa1b4:	480f      	ldr	r0, [pc, #60]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa1b6:	f002 fa15 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(4, color);
 23fa1ba:	9a01      	ldr	r2, [sp, #4]
 23fa1bc:	2104      	movs	r1, #4
 23fa1be:	480d      	ldr	r0, [pc, #52]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa1c0:	f002 fa10 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(5, color);
 23fa1c4:	9a01      	ldr	r2, [sp, #4]
 23fa1c6:	2105      	movs	r1, #5
 23fa1c8:	480a      	ldr	r0, [pc, #40]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa1ca:	f002 fa0b 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(6, color);
 23fa1ce:	2106      	movs	r1, #6
 23fa1d0:	9a01      	ldr	r2, [sp, #4]
 23fa1d2:	4808      	ldr	r0, [pc, #32]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
 23fa1d4:	f002 fa06 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.show();
 23fa1d8:	4806      	ldr	r0, [pc, #24]	; (23fa1f4 <_Z16updatePixelStatem+0x78>)
  }
}
 23fa1da:	b003      	add	sp, #12
 23fa1dc:	f85d eb04 	ldr.w	lr, [sp], #4
    pixel.show();
 23fa1e0:	f002 b8f6 	b.w	23fc3d0 <_ZN17Adafruit_NeoPixel4showEv>
}
 23fa1e4:	b003      	add	sp, #12
 23fa1e6:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa1ea:	bf00      	nop
 23fa1ec:	1007ad6c 	.word	0x1007ad6c
 23fa1f0:	1007ad44 	.word	0x1007ad44
 23fa1f4:	1007adb4 	.word	0x1007adb4

023fa1f8 <_Z16printRemindToPeev>:
//         }
// }

// REMINDERS FUNCTIONS
void printRemindToPee()
{
 23fa1f8:	b510      	push	{r4, lr}
  updatePixelState(yellow);

  tft.fillScreen(ILI9341_BLACK);
 23fa1fa:	4c0f      	ldr	r4, [pc, #60]	; (23fa238 <_Z16printRemindToPeev+0x40>)
  updatePixelState(yellow);
 23fa1fc:	480f      	ldr	r0, [pc, #60]	; (23fa23c <_Z16printRemindToPeev+0x44>)
 23fa1fe:	f7ff ffbd 	bl	23fa17c <_Z16updatePixelStatem>
  tft.fillScreen(ILI9341_BLACK);
 23fa202:	4620      	mov	r0, r4
 23fa204:	2100      	movs	r1, #0
 23fa206:	f001 f92a 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa20a:	2200      	movs	r2, #0
 23fa20c:	f06f 131f 	mvn.w	r3, #2031647	; 0x1f001f
  tft.setCursor(45, 20);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setCursor(0, 0);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setTextSize(3);
 23fa210:	4620      	mov	r0, r4
 23fa212:	2103      	movs	r1, #3
 23fa214:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fa218:	f002 f81b 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("Time to try to use \nthe restroom!");
 23fa21c:	4620      	mov	r0, r4
 23fa21e:	4908      	ldr	r1, [pc, #32]	; (23fa240 <_Z16printRemindToPeev+0x48>)
 23fa220:	f003 faf5 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(timeString);
 23fa224:	4620      	mov	r0, r4
 23fa226:	4907      	ldr	r1, [pc, #28]	; (23fa244 <_Z16printRemindToPeev+0x4c>)
 23fa228:	f003 faf1 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(buffer);
 23fa22c:	4620      	mov	r0, r4
}
 23fa22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tft.println(buffer);
 23fa232:	4905      	ldr	r1, [pc, #20]	; (23fa248 <_Z16printRemindToPeev+0x50>)
 23fa234:	f003 baeb 	b.w	23fd80e <_ZN5Print7printlnEPKc>
 23fa238:	1007adcc 	.word	0x1007adcc
 23fa23c:	00ffff00 	.word	0x00ffff00
 23fa240:	023ff1ef 	.word	0x023ff1ef
 23fa244:	1007ae18 	.word	0x1007ae18
 23fa248:	1007ad48 	.word	0x1007ad48

023fa24c <_Z17printRemindFeetUpv>:
void printRemindFeetUp()
{
 23fa24c:	b510      	push	{r4, lr}
  updatePixelState(green);

  tft.fillScreen(ILI9341_BLACK);
 23fa24e:	4c0f      	ldr	r4, [pc, #60]	; (23fa28c <_Z17printRemindFeetUpv+0x40>)
  updatePixelState(green);
 23fa250:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 23fa254:	f7ff ff92 	bl	23fa17c <_Z16updatePixelStatem>
  tft.fillScreen(ILI9341_BLACK);
 23fa258:	4620      	mov	r0, r4
 23fa25a:	2100      	movs	r1, #0
 23fa25c:	f001 f8ff 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23fa260:	2200      	movs	r2, #0
 23fa262:	4b0b      	ldr	r3, [pc, #44]	; (23fa290 <_Z17printRemindFeetUpv+0x44>)
  tft.setCursor(45, 20);
  tft.setTextColor(ILI9341_GREEN);
  tft.setCursor(0, 0);
  tft.setTextColor(ILI9341_GREEN);
  tft.setTextSize(3);
 23fa264:	4620      	mov	r0, r4
 23fa266:	2103      	movs	r1, #3
 23fa268:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fa26c:	f001 fff1 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("Are your feet up?");
 23fa270:	4620      	mov	r0, r4
 23fa272:	4908      	ldr	r1, [pc, #32]	; (23fa294 <_Z17printRemindFeetUpv+0x48>)
 23fa274:	f003 facb 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(timeString);
 23fa278:	4620      	mov	r0, r4
 23fa27a:	4907      	ldr	r1, [pc, #28]	; (23fa298 <_Z17printRemindFeetUpv+0x4c>)
 23fa27c:	f003 fac7 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(buffer);
 23fa280:	4620      	mov	r0, r4
}
 23fa282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tft.println(buffer);
 23fa286:	4905      	ldr	r1, [pc, #20]	; (23fa29c <_Z17printRemindFeetUpv+0x50>)
 23fa288:	f003 bac1 	b.w	23fd80e <_ZN5Print7printlnEPKc>
 23fa28c:	1007adcc 	.word	0x1007adcc
 23fa290:	07e007e0 	.word	0x07e007e0
 23fa294:	023ff211 	.word	0x023ff211
 23fa298:	1007ae18 	.word	0x1007ae18
 23fa29c:	1007ad48 	.word	0x1007ad48

023fa2a0 <_Z21printRemindMoveAroundv>:
void printRemindMoveAround()
{
 23fa2a0:	b510      	push	{r4, lr}
  updatePixelState(orange);

  tft.fillScreen(ILI9341_BLACK);
 23fa2a2:	4c0f      	ldr	r4, [pc, #60]	; (23fa2e0 <_Z21printRemindMoveAroundv+0x40>)
  updatePixelState(orange);
 23fa2a4:	480f      	ldr	r0, [pc, #60]	; (23fa2e4 <_Z21printRemindMoveAroundv+0x44>)
 23fa2a6:	f7ff ff69 	bl	23fa17c <_Z16updatePixelStatem>
  tft.fillScreen(ILI9341_BLACK);
 23fa2aa:	4620      	mov	r0, r4
 23fa2ac:	2100      	movs	r1, #0
 23fa2ae:	f001 f8d6 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23fa2b2:	2200      	movs	r2, #0
 23fa2b4:	4b0c      	ldr	r3, [pc, #48]	; (23fa2e8 <_Z21printRemindMoveAroundv+0x48>)
  tft.setCursor(45, 20);
  tft.setTextColor(ILI9341_ORANGE);
  tft.setCursor(0, 0);
  tft.setTextColor(ILI9341_ORANGE);
  tft.setTextSize(3);
 23fa2b6:	4620      	mov	r0, r4
 23fa2b8:	2103      	movs	r1, #3
 23fa2ba:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fa2be:	f001 ffc8 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println("Lets get up \nand move around!");
 23fa2c2:	4620      	mov	r0, r4
 23fa2c4:	4909      	ldr	r1, [pc, #36]	; (23fa2ec <_Z21printRemindMoveAroundv+0x4c>)
 23fa2c6:	f003 faa2 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(timeString);
 23fa2ca:	4620      	mov	r0, r4
 23fa2cc:	4908      	ldr	r1, [pc, #32]	; (23fa2f0 <_Z21printRemindMoveAroundv+0x50>)
 23fa2ce:	f003 fa9e 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(buffer);
 23fa2d2:	4620      	mov	r0, r4
}
 23fa2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tft.println(buffer);
 23fa2d8:	4906      	ldr	r1, [pc, #24]	; (23fa2f4 <_Z21printRemindMoveAroundv+0x54>)
 23fa2da:	f003 ba98 	b.w	23fd80e <_ZN5Print7printlnEPKc>
 23fa2de:	bf00      	nop
 23fa2e0:	1007adcc 	.word	0x1007adcc
 23fa2e4:	00ffa500 	.word	0x00ffa500
 23fa2e8:	fd20fd20 	.word	0xfd20fd20
 23fa2ec:	023ff223 	.word	0x023ff223
 23fa2f0:	1007ae18 	.word	0x1007ae18
 23fa2f4:	1007ad48 	.word	0x1007ad48

023fa2f8 <_Z17updateTimeAndDatev>:
{
 23fa2f8:	b530      	push	{r4, r5, lr}
 23fa2fa:	b085      	sub	sp, #20
  bool synced = Particle.syncTime();
 23fa2fc:	f7ff f9f2 	bl	23f96e4 <_ZN10CloudClass8syncTimeEv.isra.0>
  if (!synced)
 23fa300:	b950      	cbnz	r0, 23fa318 <_Z17updateTimeAndDatev+0x20>
    Serial.printf("Not synced with Particle Cloud. Attempting sync...\n");
 23fa302:	f003 fda3 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa306:	4925      	ldr	r1, [pc, #148]	; (23fa39c <_Z17updateTimeAndDatev+0xa4>)
 23fa308:	f7ff f9f6 	bl	23f96f8 <_ZN5Print6printfEPKcz>
    Particle.syncTime();
 23fa30c:	f7ff f9ea 	bl	23f96e4 <_ZN10CloudClass8syncTimeEv.isra.0>
    delay(5000); // Wait for sync to complete
 23fa310:	f241 3088 	movw	r0, #5000	; 0x1388
 23fa314:	f003 fbe6 	bl	23fdae4 <delay>
  tft.fillScreen(ILI9341_BLACK);
 23fa318:	4c21      	ldr	r4, [pc, #132]	; (23fa3a0 <_Z17updateTimeAndDatev+0xa8>)
 23fa31a:	2100      	movs	r1, #0
 23fa31c:	4620      	mov	r0, r4
 23fa31e:	f001 f89e 	bl	23fb45e <_ZN12Adafruit_GFX10fillScreenEt>
 23fa322:	2200      	movs	r2, #0
 23fa324:	f06f 131f 	mvn.w	r3, #2031647	; 0x1f001f
  tft.setTextSize(3);
 23fa328:	2103      	movs	r1, #3
 23fa32a:	4620      	mov	r0, r4
 23fa32c:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fa330:	f001 ff8f 	bl	23fc252 <_ZN12Adafruit_GFX11setTextSizeEh>
  snprintf(timeString, sizeof(timeString), "%02d:%02d", Time.hour(), Time.minute());
 23fa334:	f003 fb94 	bl	23fda60 <_ZN9TimeClass4hourEv>
 23fa338:	9003      	str	r0, [sp, #12]
 23fa33a:	f003 fb9d 	bl	23fda78 <_ZN9TimeClass6minuteEv>
 23fa33e:	9b03      	ldr	r3, [sp, #12]
 23fa340:	2109      	movs	r1, #9
 23fa342:	4a18      	ldr	r2, [pc, #96]	; (23fa3a4 <_Z17updateTimeAndDatev+0xac>)
 23fa344:	9000      	str	r0, [sp, #0]
 23fa346:	4818      	ldr	r0, [pc, #96]	; (23fa3a8 <_Z17updateTimeAndDatev+0xb0>)
 23fa348:	f002 ffdc 	bl	23fd304 <snprintf>
  snprintf(buffer, sizeof(buffer), " %02d-%02d-%04d", Time.month(), Time.day(), Time.year());
 23fa34c:	f003 fbac 	bl	23fdaa8 <_ZN9TimeClass5monthEv>
 23fa350:	9003      	str	r0, [sp, #12]
 23fa352:	f003 fb9d 	bl	23fda90 <_ZN9TimeClass3dayEv>
 23fa356:	4605      	mov	r5, r0
 23fa358:	f003 fbae 	bl	23fdab8 <_ZN9TimeClass4yearEv>
 23fa35c:	9b03      	ldr	r3, [sp, #12]
 23fa35e:	2120      	movs	r1, #32
 23fa360:	e9cd 5000 	strd	r5, r0, [sp]
 23fa364:	4a11      	ldr	r2, [pc, #68]	; (23fa3ac <_Z17updateTimeAndDatev+0xb4>)
 23fa366:	4812      	ldr	r0, [pc, #72]	; (23fa3b0 <_Z17updateTimeAndDatev+0xb8>)
 23fa368:	f002 ffcc 	bl	23fd304 <snprintf>
  Serial.printf("Current Time: %s\n", timeString);
 23fa36c:	f003 fd6e 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa370:	4a0d      	ldr	r2, [pc, #52]	; (23fa3a8 <_Z17updateTimeAndDatev+0xb0>)
 23fa372:	4910      	ldr	r1, [pc, #64]	; (23fa3b4 <_Z17updateTimeAndDatev+0xbc>)
 23fa374:	f7ff f9c0 	bl	23f96f8 <_ZN5Print6printfEPKcz>
  Serial.printf("Current Date: %s\n", buffer);
 23fa378:	f003 fd68 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa37c:	4a0c      	ldr	r2, [pc, #48]	; (23fa3b0 <_Z17updateTimeAndDatev+0xb8>)
 23fa37e:	490e      	ldr	r1, [pc, #56]	; (23fa3b8 <_Z17updateTimeAndDatev+0xc0>)
 23fa380:	f7ff f9ba 	bl	23f96f8 <_ZN5Print6printfEPKcz>
  tft.println(timeString);
 23fa384:	4620      	mov	r0, r4
 23fa386:	4908      	ldr	r1, [pc, #32]	; (23fa3a8 <_Z17updateTimeAndDatev+0xb0>)
 23fa388:	f003 fa41 	bl	23fd80e <_ZN5Print7printlnEPKc>
  tft.println(buffer);
 23fa38c:	4620      	mov	r0, r4
 23fa38e:	4908      	ldr	r1, [pc, #32]	; (23fa3b0 <_Z17updateTimeAndDatev+0xb8>)
}
 23fa390:	b005      	add	sp, #20
 23fa392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  tft.println(buffer);
 23fa396:	f003 ba3a 	b.w	23fd80e <_ZN5Print7printlnEPKc>
 23fa39a:	bf00      	nop
 23fa39c:	023ff241 	.word	0x023ff241
 23fa3a0:	1007adcc 	.word	0x1007adcc
 23fa3a4:	023ff275 	.word	0x023ff275
 23fa3a8:	1007ae18 	.word	0x1007ae18
 23fa3ac:	023ff27f 	.word	0x023ff27f
 23fa3b0:	1007ad48 	.word	0x1007ad48
 23fa3b4:	023ff28f 	.word	0x023ff28f
 23fa3b8:	023ff2a1 	.word	0x023ff2a1

023fa3bc <loop>:
{
 23fa3bc:	b510      	push	{r4, lr}
  updatePixelState(tomato);
 23fa3be:	482a      	ldr	r0, [pc, #168]	; (23fa468 <loop+0xac>)
 23fa3c0:	f7ff fedc 	bl	23fa17c <_Z16updatePixelStatem>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fa3c4:	f002 faea 	bl	23fc99c <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();
 23fa3c8:	4b28      	ldr	r3, [pc, #160]	; (23fa46c <loop+0xb0>)
  timeToPee.start();
 23fa3ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  currentTime = millis();
 23fa3ce:	6018      	str	r0, [r3, #0]
  timeToPee.start();
 23fa3d0:	4827      	ldr	r0, [pc, #156]	; (23fa470 <loop+0xb4>)
 23fa3d2:	f7ff f970 	bl	23f96b6 <_ZN5Timer5startEj.isra.0>
  feetUp.start();
 23fa3d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fa3da:	4826      	ldr	r0, [pc, #152]	; (23fa474 <loop+0xb8>)
 23fa3dc:	f7ff f96b 	bl	23f96b6 <_ZN5Timer5startEj.isra.0>
  moveIt.start();
 23fa3e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fa3e4:	4824      	ldr	r0, [pc, #144]	; (23fa478 <loop+0xbc>)
 23fa3e6:	f7ff f966 	bl	23f96b6 <_ZN5Timer5startEj.isra.0>
 23fa3ea:	f002 fad7 	bl	23fc99c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastUpdateTime >= 30000)
 23fa3ee:	4c23      	ldr	r4, [pc, #140]	; (23fa47c <loop+0xc0>)
 23fa3f0:	6823      	ldr	r3, [r4, #0]
 23fa3f2:	1ac0      	subs	r0, r0, r3
 23fa3f4:	f247 532f 	movw	r3, #29999	; 0x752f
 23fa3f8:	4298      	cmp	r0, r3
 23fa3fa:	d904      	bls.n	23fa406 <loop+0x4a>
    updateTimeAndDate();
 23fa3fc:	f7ff ff7c 	bl	23fa2f8 <_Z17updateTimeAndDatev>
 23fa400:	f002 facc 	bl	23fc99c <HAL_Timer_Get_Milli_Seconds>
    lastUpdateTime = millis();
 23fa404:	6020      	str	r0, [r4, #0]
    }

    bool isClicked() {
      bool _buttonState, _clicked;

      _buttonState = digitalRead(_buttonPin);
 23fa406:	4c1e      	ldr	r4, [pc, #120]	; (23fa480 <loop+0xc4>)
 23fa408:	8820      	ldrh	r0, [r4, #0]
 23fa40a:	f004 fa1f 	bl	23fe84c <digitalRead>
      if(_pullUp) {
 23fa40e:	7a23      	ldrb	r3, [r4, #8]
 23fa410:	bb13      	cbnz	r3, 23fa458 <loop+0x9c>
      _buttonState = digitalRead(_buttonPin);
 23fa412:	3800      	subs	r0, #0
 23fa414:	bf18      	it	ne
 23fa416:	2001      	movne	r0, #1
        _buttonState = !_buttonState;
      }
      if(_buttonState != _prevButtonState) {
 23fa418:	6863      	ldr	r3, [r4, #4]
 23fa41a:	4298      	cmp	r0, r3
 23fa41c:	4b19      	ldr	r3, [pc, #100]	; (23fa484 <loop+0xc8>)
 23fa41e:	d005      	beq.n	23fa42c <loop+0x70>
    buttonState = !buttonState;
 23fa420:	781a      	ldrb	r2, [r3, #0]
        _clicked = _buttonState;
      }
      else {
        _clicked = false;
      }
      _prevButtonState=_buttonState;
 23fa422:	6060      	str	r0, [r4, #4]
  if (encoderSwitch.isClicked())
 23fa424:	b110      	cbz	r0, 23fa42c <loop+0x70>
    buttonState = !buttonState;
 23fa426:	f082 0201 	eor.w	r2, r2, #1
 23fa42a:	701a      	strb	r2, [r3, #0]
  if (buttonState == TRUE)
 23fa42c:	781b      	ldrb	r3, [r3, #0]
    switchOFF(outlet);
 23fa42e:	2001      	movs	r0, #1
 23fa430:	b1b3      	cbz	r3, 23fa460 <loop+0xa4>
 23fa432:	f7ff fa3f 	bl	23f98b4 <_Z9switchOFFi>
  timeToPee.reset();
 23fa436:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fa43a:	480d      	ldr	r0, [pc, #52]	; (23fa470 <loop+0xb4>)
 23fa43c:	f7ff f92e 	bl	23f969c <_ZN5Timer5resetEj.isra.0>
  feetUp.reset();
 23fa440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fa444:	480b      	ldr	r0, [pc, #44]	; (23fa474 <loop+0xb8>)
 23fa446:	f7ff f929 	bl	23f969c <_ZN5Timer5resetEj.isra.0>
}
 23fa44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  moveIt.reset();
 23fa44e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fa452:	4809      	ldr	r0, [pc, #36]	; (23fa478 <loop+0xbc>)
 23fa454:	f7ff b922 	b.w	23f969c <_ZN5Timer5resetEj.isra.0>
        _buttonState = !_buttonState;
 23fa458:	fab0 f080 	clz	r0, r0
 23fa45c:	0940      	lsrs	r0, r0, #5
 23fa45e:	e7db      	b.n	23fa418 <loop+0x5c>
    switchON(outlet);
 23fa460:	f7ff f9c6 	bl	23f97f0 <_Z8switchONi>
}
 23fa464:	e7e7      	b.n	23fa436 <loop+0x7a>
 23fa466:	bf00      	nop
 23fa468:	00ff6347 	.word	0x00ff6347
 23fa46c:	1007ad6c 	.word	0x1007ad6c
 23fa470:	1007ae24 	.word	0x1007ae24
 23fa474:	1007ad7c 	.word	0x1007ad7c
 23fa478:	1007ad98 	.word	0x1007ad98
 23fa47c:	1007ad44 	.word	0x1007ad44
 23fa480:	1007ad70 	.word	0x1007ad70
 23fa484:	1007ad68 	.word	0x1007ad68

023fa488 <setup>:
{
 23fa488:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(115200);
 23fa48a:	f003 fcdf 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa48e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fa492:	f003 fccf 	bl	23fde34 <_ZN9USBSerial5beginEl>
  tft.begin();
 23fa496:	2100      	movs	r1, #0
 23fa498:	48da      	ldr	r0, [pc, #872]	; (23fa804 <setup+0x37c>)
 23fa49a:	f002 f957 	bl	23fc74c <_ZN16Adafruit_ILI93415beginEm>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 23fa49e:	2300      	movs	r3, #0
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23fa4a0:	4dd9      	ldr	r5, [pc, #868]	; (23fa808 <setup+0x380>)
 23fa4a2:	461a      	mov	r2, r3
 23fa4a4:	4619      	mov	r1, r3
 23fa4a6:	6868      	ldr	r0, [r5, #4]
 23fa4a8:	f002 fe30 	bl	23fd10c <network_on>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fa4ac:	2000      	movs	r0, #0
 23fa4ae:	f002 fa91 	bl	23fc9d4 <hal_timer_millis>
 23fa4b2:	4604      	mov	r4, r0
 23fa4b4:	2000      	movs	r0, #0
 23fa4b6:	f002 fa8d 	bl	23fc9d4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fa4ba:	1b00      	subs	r0, r0, r4
 23fa4bc:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fa4c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23fa4c4:	f171 0300 	sbcs.w	r3, r1, #0
 23fa4c8:	d208      	bcs.n	23fa4dc <setup+0x54>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fa4ca:	2200      	movs	r2, #0
 23fa4cc:	6868      	ldr	r0, [r5, #4]
 23fa4ce:	4611      	mov	r1, r2
 23fa4d0:	f002 fe0e 	bl	23fd0f0 <network_ready>
 23fa4d4:	b910      	cbnz	r0, 23fa4dc <setup+0x54>
            spark_process();
 23fa4d6:	f002 fea5 	bl	23fd224 <spark_process>
        while (_while() && !_condition()) {
 23fa4da:	e7eb      	b.n	23fa4b4 <setup+0x2c>
 23fa4dc:	2200      	movs	r2, #0
 23fa4de:	6868      	ldr	r0, [r5, #4]
 23fa4e0:	4611      	mov	r1, r2
 23fa4e2:	f002 fe05 	bl	23fd0f0 <network_ready>
  Particle.syncTime();
 23fa4e6:	f7ff f8fd 	bl	23f96e4 <_ZN10CloudClass8syncTimeEv.isra.0>
  Time.zone(-7);
 23fa4ea:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
 23fa4ee:	f003 fa69 	bl	23fd9c4 <_ZN9TimeClass4zoneEf>
  pixel.begin();
 23fa4f2:	48c6      	ldr	r0, [pc, #792]	; (23fa80c <setup+0x384>)
 23fa4f4:	f001 ff06 	bl	23fc304 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.setBrightness(15);
 23fa4f8:	210f      	movs	r1, #15
 23fa4fa:	48c4      	ldr	r0, [pc, #784]	; (23fa80c <setup+0x384>)
 23fa4fc:	f002 f8b5 	bl	23fc66a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.setPixelColor(0, violet);
 23fa500:	2100      	movs	r1, #0
 23fa502:	4ac3      	ldr	r2, [pc, #780]	; (23fa810 <setup+0x388>)
 23fa504:	48c1      	ldr	r0, [pc, #772]	; (23fa80c <setup+0x384>)
 23fa506:	f002 f86d 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(1, indigo);
 23fa50a:	2101      	movs	r1, #1
 23fa50c:	4ac1      	ldr	r2, [pc, #772]	; (23fa814 <setup+0x38c>)
 23fa50e:	48bf      	ldr	r0, [pc, #764]	; (23fa80c <setup+0x384>)
 23fa510:	f002 f868 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(2, blue);
 23fa514:	22ff      	movs	r2, #255	; 0xff
 23fa516:	2102      	movs	r1, #2
 23fa518:	48bc      	ldr	r0, [pc, #752]	; (23fa80c <setup+0x384>)
 23fa51a:	f002 f863 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(3, green);
 23fa51e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 23fa522:	2103      	movs	r1, #3
 23fa524:	48b9      	ldr	r0, [pc, #740]	; (23fa80c <setup+0x384>)
 23fa526:	f002 f85d 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(4, yellow);
 23fa52a:	2104      	movs	r1, #4
 23fa52c:	4aba      	ldr	r2, [pc, #744]	; (23fa818 <setup+0x390>)
 23fa52e:	48b7      	ldr	r0, [pc, #732]	; (23fa80c <setup+0x384>)
 23fa530:	f002 f858 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(5, orange);
 23fa534:	2105      	movs	r1, #5
 23fa536:	4ab9      	ldr	r2, [pc, #740]	; (23fa81c <setup+0x394>)
 23fa538:	48b4      	ldr	r0, [pc, #720]	; (23fa80c <setup+0x384>)
 23fa53a:	f002 f853 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(6, red);
 23fa53e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 23fa542:	2106      	movs	r1, #6
 23fa544:	48b1      	ldr	r0, [pc, #708]	; (23fa80c <setup+0x384>)
 23fa546:	f002 f84d 	bl	23fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.show();
 23fa54a:	48b0      	ldr	r0, [pc, #704]	; (23fa80c <setup+0x384>)
 23fa54c:	f001 ff40 	bl	23fc3d0 <_ZN17Adafruit_NeoPixel4showEv>
  delay(5000);
 23fa550:	f241 3088 	movw	r0, #5000	; 0x1388
 23fa554:	f003 fac6 	bl	23fdae4 <delay>
  pixel.clear();
 23fa558:	48ac      	ldr	r0, [pc, #688]	; (23fa80c <setup+0x384>)
 23fa55a:	f002 f8ad 	bl	23fc6b8 <_ZN17Adafruit_NeoPixel5clearEv>
  uint8_t x = tft.readcommand8(ILI9341_RDMODE);
 23fa55e:	2200      	movs	r2, #0
 23fa560:	210a      	movs	r1, #10
 23fa562:	48a8      	ldr	r0, [pc, #672]	; (23fa804 <setup+0x37c>)
 23fa564:	f002 f968 	bl	23fc838 <_ZN16Adafruit_ILI934112readcommand8Ehh>
 23fa568:	4604      	mov	r4, r0
  Serial.print("Display Power Mode: 0x");
 23fa56a:	f003 fc6f 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa56e:	49ac      	ldr	r1, [pc, #688]	; (23fa820 <setup+0x398>)
 23fa570:	f003 f936 	bl	23fd7e0 <_ZN5Print5printEPKc>
  Serial.println(x, HEX);
 23fa574:	f003 fc6a 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa578:	4621      	mov	r1, r4
 23fa57a:	2210      	movs	r2, #16
 23fa57c:	f7ff f86f 	bl	23f965e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
  x = tft.readcommand8(ILI9341_RDMADCTL);
 23fa580:	2200      	movs	r2, #0
 23fa582:	210b      	movs	r1, #11
 23fa584:	489f      	ldr	r0, [pc, #636]	; (23fa804 <setup+0x37c>)
 23fa586:	f002 f957 	bl	23fc838 <_ZN16Adafruit_ILI934112readcommand8Ehh>
 23fa58a:	4604      	mov	r4, r0
  Serial.print("MADCTL Mode: 0x");
 23fa58c:	f003 fc5e 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa590:	49a4      	ldr	r1, [pc, #656]	; (23fa824 <setup+0x39c>)
 23fa592:	f003 f925 	bl	23fd7e0 <_ZN5Print5printEPKc>
  Serial.println(x, HEX);
 23fa596:	f003 fc59 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa59a:	4621      	mov	r1, r4
 23fa59c:	2210      	movs	r2, #16
 23fa59e:	f7ff f85e 	bl	23f965e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
  x = tft.readcommand8(ILI9341_RDPIXFMT);
 23fa5a2:	2200      	movs	r2, #0
 23fa5a4:	210c      	movs	r1, #12
 23fa5a6:	4897      	ldr	r0, [pc, #604]	; (23fa804 <setup+0x37c>)
 23fa5a8:	f002 f946 	bl	23fc838 <_ZN16Adafruit_ILI934112readcommand8Ehh>
 23fa5ac:	4604      	mov	r4, r0
  Serial.print("Pixel Format: 0x");
 23fa5ae:	f003 fc4d 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa5b2:	499d      	ldr	r1, [pc, #628]	; (23fa828 <setup+0x3a0>)
 23fa5b4:	f003 f914 	bl	23fd7e0 <_ZN5Print5printEPKc>
  Serial.println(x, HEX);
 23fa5b8:	f003 fc48 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa5bc:	4621      	mov	r1, r4
 23fa5be:	2210      	movs	r2, #16
 23fa5c0:	f7ff f84d 	bl	23f965e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
  x = tft.readcommand8(ILI9341_RDIMGFMT);
 23fa5c4:	2200      	movs	r2, #0
 23fa5c6:	210d      	movs	r1, #13
 23fa5c8:	488e      	ldr	r0, [pc, #568]	; (23fa804 <setup+0x37c>)
 23fa5ca:	f002 f935 	bl	23fc838 <_ZN16Adafruit_ILI934112readcommand8Ehh>
 23fa5ce:	4604      	mov	r4, r0
  Serial.print("Image Format: 0x");
 23fa5d0:	f003 fc3c 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa5d4:	4995      	ldr	r1, [pc, #596]	; (23fa82c <setup+0x3a4>)
 23fa5d6:	f003 f903 	bl	23fd7e0 <_ZN5Print5printEPKc>
  Serial.println(x, HEX);
 23fa5da:	f003 fc37 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa5de:	4621      	mov	r1, r4
 23fa5e0:	2210      	movs	r2, #16
 23fa5e2:	f7ff f83c 	bl	23f965e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
  x = tft.readcommand8(ILI9341_RDSELFDIAG);
 23fa5e6:	2200      	movs	r2, #0
 23fa5e8:	210f      	movs	r1, #15
 23fa5ea:	4886      	ldr	r0, [pc, #536]	; (23fa804 <setup+0x37c>)
 23fa5ec:	f002 f924 	bl	23fc838 <_ZN16Adafruit_ILI934112readcommand8Ehh>
 23fa5f0:	4604      	mov	r4, r0
  Serial.print("Self Diagnostic: 0x");
 23fa5f2:	f003 fc2b 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa5f6:	498e      	ldr	r1, [pc, #568]	; (23fa830 <setup+0x3a8>)
 23fa5f8:	f003 f8f2 	bl	23fd7e0 <_ZN5Print5printEPKc>
  Serial.println(x, HEX);
 23fa5fc:	f003 fc26 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa600:	2210      	movs	r2, #16
 23fa602:	4621      	mov	r1, r4
 23fa604:	f7ff f82b 	bl	23f965e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
  Serial.println(F("Benchmark                Time (microseconds)"));
 23fa608:	f003 fc20 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa60c:	4989      	ldr	r1, [pc, #548]	; (23fa834 <setup+0x3ac>)
 23fa60e:	f003 f908 	bl	23fd822 <_ZN5Print7printlnEPK19__FlashStringHelper>
  delay(10);
 23fa612:	200a      	movs	r0, #10
 23fa614:	f003 fa66 	bl	23fdae4 <delay>
  Serial.print(F("Screen fill              "));
 23fa618:	f003 fc18 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa61c:	4986      	ldr	r1, [pc, #536]	; (23fa838 <setup+0x3b0>)
 23fa61e:	f003 f8e6 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testFillScreen());
 23fa622:	f003 fc13 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa626:	4604      	mov	r4, r0
 23fa628:	f7ff f9a6 	bl	23f9978 <_Z14testFillScreenv>
 23fa62c:	220a      	movs	r2, #10
 23fa62e:	4601      	mov	r1, r0
 23fa630:	4620      	mov	r0, r4
 23fa632:	f7ff f823 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa63a:	f003 fa53 	bl	23fdae4 <delay>
  Serial.print(F("Text                     "));
 23fa63e:	f003 fc05 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa642:	497e      	ldr	r1, [pc, #504]	; (23fa83c <setup+0x3b4>)
 23fa644:	f003 f8d3 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testText());
 23fa648:	f003 fc00 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa64c:	4604      	mov	r4, r0
 23fa64e:	f7ff f9bf 	bl	23f99d0 <_Z8testTextv>
 23fa652:	220a      	movs	r2, #10
 23fa654:	4601      	mov	r1, r0
 23fa656:	4620      	mov	r0, r4
 23fa658:	f7ff f810 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(3000);
 23fa65c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 23fa660:	f003 fa40 	bl	23fdae4 <delay>
  Serial.print(F("Lines                    "));
 23fa664:	f003 fbf2 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa668:	4975      	ldr	r1, [pc, #468]	; (23fa840 <setup+0x3b8>)
 23fa66a:	f003 f8c0 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testLines(ILI9341_CYAN));
 23fa66e:	f003 fbed 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa672:	4604      	mov	r4, r0
 23fa674:	f240 70ff 	movw	r0, #2047	; 0x7ff
 23fa678:	f7ff fa2e 	bl	23f9ad8 <_Z9testLinest>
 23fa67c:	220a      	movs	r2, #10
 23fa67e:	4601      	mov	r1, r0
 23fa680:	4620      	mov	r0, r4
 23fa682:	f7fe fffb 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa68a:	f003 fa2b 	bl	23fdae4 <delay>
  Serial.print(F("Horiz/Vert Lines         "));
 23fa68e:	f003 fbdd 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa692:	496c      	ldr	r1, [pc, #432]	; (23fa844 <setup+0x3bc>)
 23fa694:	f003 f8ab 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testFastLines(ILI9341_RED, ILI9341_BLUE));
 23fa698:	f003 fbd8 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa69c:	211f      	movs	r1, #31
 23fa69e:	4604      	mov	r4, r0
 23fa6a0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 23fa6a4:	f7ff fb04 	bl	23f9cb0 <_Z13testFastLinestt>
 23fa6a8:	220a      	movs	r2, #10
 23fa6aa:	4601      	mov	r1, r0
 23fa6ac:	4620      	mov	r0, r4
 23fa6ae:	f7fe ffe5 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa6b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa6b6:	f003 fa15 	bl	23fdae4 <delay>
  Serial.print(F("Rectangles (outline)     "));
 23fa6ba:	f003 fbc7 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa6be:	4962      	ldr	r1, [pc, #392]	; (23fa848 <setup+0x3c0>)
 23fa6c0:	f003 f895 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testRects(ILI9341_GREEN));
 23fa6c4:	f003 fbc2 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa6c8:	4604      	mov	r4, r0
 23fa6ca:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 23fa6ce:	f7ff fb21 	bl	23f9d14 <_Z9testRectst>
 23fa6d2:	220a      	movs	r2, #10
 23fa6d4:	4601      	mov	r1, r0
 23fa6d6:	4620      	mov	r0, r4
 23fa6d8:	f7fe ffd0 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa6dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa6e0:	f003 fa00 	bl	23fdae4 <delay>
  Serial.print(F("Rectangles (filled)      "));
 23fa6e4:	f003 fbb2 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa6e8:	4958      	ldr	r1, [pc, #352]	; (23fa84c <setup+0x3c4>)
 23fa6ea:	f003 f880 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testFilledRects(ILI9341_YELLOW, ILI9341_MAGENTA));
 23fa6ee:	f003 fbad 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa6f2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 23fa6f6:	4604      	mov	r4, r0
 23fa6f8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 23fa6fc:	f7ff fb40 	bl	23f9d80 <_Z15testFilledRectstt>
 23fa700:	220a      	movs	r2, #10
 23fa702:	4601      	mov	r1, r0
 23fa704:	4620      	mov	r0, r4
 23fa706:	f7fe ffb9 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa70a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa70e:	f003 f9e9 	bl	23fdae4 <delay>
  Serial.print(F("Circles (filled)         "));
 23fa712:	f003 fb9b 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa716:	494e      	ldr	r1, [pc, #312]	; (23fa850 <setup+0x3c8>)
 23fa718:	f003 f869 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testFilledCircles(10, ILI9341_MAGENTA));
 23fa71c:	f003 fb96 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa720:	f64f 011f 	movw	r1, #63519	; 0xf81f
 23fa724:	4604      	mov	r4, r0
 23fa726:	200a      	movs	r0, #10
 23fa728:	f7ff fb78 	bl	23f9e1c <_Z17testFilledCirclesht>
 23fa72c:	220a      	movs	r2, #10
 23fa72e:	4601      	mov	r1, r0
 23fa730:	4620      	mov	r0, r4
 23fa732:	f7fe ffa3 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  Serial.print(F("Circles (outline)        "));
 23fa736:	f003 fb89 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa73a:	4946      	ldr	r1, [pc, #280]	; (23fa854 <setup+0x3cc>)
 23fa73c:	f003 f857 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testCircles(10, ILI9341_WHITE));
 23fa740:	f003 fb84 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fa748:	4604      	mov	r4, r0
 23fa74a:	200a      	movs	r0, #10
 23fa74c:	f7ff fb98 	bl	23f9e80 <_Z11testCirclesht>
 23fa750:	220a      	movs	r2, #10
 23fa752:	4601      	mov	r1, r0
 23fa754:	4620      	mov	r0, r4
 23fa756:	f7fe ff91 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa75a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa75e:	f003 f9c1 	bl	23fdae4 <delay>
  Serial.print(F("Triangles (outline)      "));
 23fa762:	f003 fb73 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa766:	493c      	ldr	r1, [pc, #240]	; (23fa858 <setup+0x3d0>)
 23fa768:	f003 f841 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testTriangles());
 23fa76c:	f003 fb6e 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa770:	4604      	mov	r4, r0
 23fa772:	f7ff fbb5 	bl	23f9ee0 <_Z13testTrianglesv>
 23fa776:	220a      	movs	r2, #10
 23fa778:	4601      	mov	r1, r0
 23fa77a:	4620      	mov	r0, r4
 23fa77c:	f7fe ff7e 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa784:	f003 f9ae 	bl	23fdae4 <delay>
  Serial.print(F("Triangles (filled)       "));
 23fa788:	f003 fb60 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa78c:	4933      	ldr	r1, [pc, #204]	; (23fa85c <setup+0x3d4>)
 23fa78e:	f003 f82e 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testFilledTriangles());
 23fa792:	f003 fb5b 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa796:	4604      	mov	r4, r0
 23fa798:	f7ff fbf0 	bl	23f9f7c <_Z19testFilledTrianglesv>
 23fa79c:	220a      	movs	r2, #10
 23fa79e:	4601      	mov	r1, r0
 23fa7a0:	4620      	mov	r0, r4
 23fa7a2:	f7fe ff6b 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa7a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa7aa:	f003 f99b 	bl	23fdae4 <delay>
  Serial.print(F("Rounded rects (outline)  "));
 23fa7ae:	f003 fb4d 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa7b2:	492b      	ldr	r1, [pc, #172]	; (23fa860 <setup+0x3d8>)
 23fa7b4:	f003 f81b 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testRoundRects());
 23fa7b8:	f003 fb48 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa7bc:	4604      	mov	r4, r0
 23fa7be:	f7ff fc4d 	bl	23fa05c <_Z14testRoundRectsv>
 23fa7c2:	220a      	movs	r2, #10
 23fa7c4:	4601      	mov	r1, r0
 23fa7c6:	4620      	mov	r0, r4
 23fa7c8:	f7fe ff58 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa7cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa7d0:	f003 f988 	bl	23fdae4 <delay>
  Serial.print(F("Rounded rects (filled)   "));
 23fa7d4:	f003 fb3a 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa7d8:	4922      	ldr	r1, [pc, #136]	; (23fa864 <setup+0x3dc>)
 23fa7da:	f003 f808 	bl	23fd7ee <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(testFilledRoundRects());
 23fa7de:	f003 fb35 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fa7e2:	4604      	mov	r4, r0
 23fa7e4:	f7ff fc82 	bl	23fa0ec <_Z20testFilledRoundRectsv>
 23fa7e8:	220a      	movs	r2, #10
 23fa7ea:	4601      	mov	r1, r0
 23fa7ec:	4620      	mov	r0, r4
 23fa7ee:	f7fe ff45 	bl	23f967c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  delay(500);
 23fa7f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fa7f6:	f003 f975 	bl	23fdae4 <delay>
}
 23fa7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  updateTimeAndDate();
 23fa7fe:	f7ff bd7b 	b.w	23fa2f8 <_Z17updateTimeAndDatev>
 23fa802:	bf00      	nop
 23fa804:	1007adcc 	.word	0x1007adcc
 23fa808:	1007aef0 	.word	0x1007aef0
 23fa80c:	1007adb4 	.word	0x1007adb4
 23fa810:	009400d3 	.word	0x009400d3
 23fa814:	004b0082 	.word	0x004b0082
 23fa818:	00ffff00 	.word	0x00ffff00
 23fa81c:	00ffa500 	.word	0x00ffa500
 23fa820:	023ff2b3 	.word	0x023ff2b3
 23fa824:	023ff2ca 	.word	0x023ff2ca
 23fa828:	023ff2da 	.word	0x023ff2da
 23fa82c:	023ff2eb 	.word	0x023ff2eb
 23fa830:	023ff2fc 	.word	0x023ff2fc
 23fa834:	023ff310 	.word	0x023ff310
 23fa838:	023ff33d 	.word	0x023ff33d
 23fa83c:	023ff357 	.word	0x023ff357
 23fa840:	023ff371 	.word	0x023ff371
 23fa844:	023ff38b 	.word	0x023ff38b
 23fa848:	023ff3a5 	.word	0x023ff3a5
 23fa84c:	023ff3bf 	.word	0x023ff3bf
 23fa850:	023ff3d9 	.word	0x023ff3d9
 23fa854:	023ff3f3 	.word	0x023ff3f3
 23fa858:	023ff40d 	.word	0x023ff40d
 23fa85c:	023ff427 	.word	0x023ff427
 23fa860:	023ff441 	.word	0x023ff441
 23fa864:	023ff45b 	.word	0x023ff45b

023fa868 <_GLOBAL__sub_I_WemoClient>:
  tft.setTextColor(ILI9341_PURPLE);
  tft.setTextSize(3);
  tft.println("Time to WIND DOWN");
  tft.println(timeString);
  tft.println(buffer);
 23fa868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
TCPClient WemoClient;
 23fa86a:	4832      	ldr	r0, [pc, #200]	; (23fa934 <_GLOBAL__sub_I_WemoClient+0xcc>)
 23fa86c:	f003 fe66 	bl	23fe53c <_ZN9TCPClientC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 23fa870:	2200      	movs	r2, #0
 23fa872:	4b31      	ldr	r3, [pc, #196]	; (23fa938 <_GLOBAL__sub_I_WemoClient+0xd0>)
        set_system_mode(mode);
 23fa874:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fa876:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
 23fa87a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 23fa87e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fa880:	f002 fbc6 	bl	23fd010 <set_system_mode>
unsigned long currentTime = Particle.syncTime();
 23fa884:	f7fe ff2e 	bl	23f96e4 <_ZN10CloudClass8syncTimeEv.isra.0>
 23fa888:	4b2c      	ldr	r3, [pc, #176]	; (23fa93c <_GLOBAL__sub_I_WemoClient+0xd4>)
Adafruit_ILI9341 tft(TFT_CS, TFT_DC);
 23fa88a:	2205      	movs	r2, #5
unsigned long currentTime = Particle.syncTime();
 23fa88c:	6018      	str	r0, [r3, #0]
Adafruit_ILI9341 tft(TFT_CS, TFT_DC);
 23fa88e:	2104      	movs	r1, #4
 23fa890:	f04f 33ff 	mov.w	r3, #4294967295
 23fa894:	482a      	ldr	r0, [pc, #168]	; (23fa940 <_GLOBAL__sub_I_WemoClient+0xd8>)
 23fa896:	f001 ffbd 	bl	23fc814 <_ZN16Adafruit_ILI9341C1Eaaa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fa89a:	4c2a      	ldr	r4, [pc, #168]	; (23fa944 <_GLOBAL__sub_I_WemoClient+0xdc>)
 23fa89c:	e8d4 3f8f 	ldab	r3, [r4]
 23fa8a0:	07db      	lsls	r3, r3, #31
 23fa8a2:	d40a      	bmi.n	23fa8ba <_GLOBAL__sub_I_WemoClient+0x52>
 23fa8a4:	4620      	mov	r0, r4
 23fa8a6:	f7fe fea3 	bl	23f95f0 <__cxa_guard_acquire>
 23fa8aa:	b130      	cbz	r0, 23fa8ba <_GLOBAL__sub_I_WemoClient+0x52>
 23fa8ac:	2101      	movs	r1, #1
 23fa8ae:	4826      	ldr	r0, [pc, #152]	; (23fa948 <_GLOBAL__sub_I_WemoClient+0xe0>)
 23fa8b0:	f002 fdc0 	bl	23fd434 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fa8b4:	4620      	mov	r0, r4
 23fa8b6:	f7fe fea0 	bl	23f95fa <__cxa_guard_release>
Adafruit_NeoPixel pixel(PIXELCOUNT, SPI1, WS2812B);
 23fa8ba:	4a23      	ldr	r2, [pc, #140]	; (23fa948 <_GLOBAL__sub_I_WemoClient+0xe0>)
 23fa8bc:	2302      	movs	r3, #2
 23fa8be:	2107      	movs	r1, #7
 23fa8c0:	4822      	ldr	r0, [pc, #136]	; (23fa94c <_GLOBAL__sub_I_WemoClient+0xe4>)
 23fa8c2:	f001 fd10 	bl	23fc2e6 <_ZN17Adafruit_NeoPixelC1EtR8SPIClassh>
      _pullUp = pullUp;
 23fa8c6:	2400      	movs	r4, #0
      _buttonPin = buttonPin;
 23fa8c8:	200f      	movs	r0, #15
 23fa8ca:	4b21      	ldr	r3, [pc, #132]	; (23fa950 <_GLOBAL__sub_I_WemoClient+0xe8>)
        pinMode(_buttonPin,INPUT_PULLDOWN);       
 23fa8cc:	2103      	movs	r1, #3
      _buttonPin = buttonPin;
 23fa8ce:	6018      	str	r0, [r3, #0]
      _pullUp = pullUp;
 23fa8d0:	721c      	strb	r4, [r3, #8]
        pinMode(_buttonPin,INPUT_PULLDOWN);       
 23fa8d2:	f003 ff91 	bl	23fe7f8 <pinMode>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fa8d6:	4b1f      	ldr	r3, [pc, #124]	; (23fa954 <_GLOBAL__sub_I_WemoClient+0xec>)
Timer timeToPee(remindToPeeInterval, printRemindToPee);
 23fa8d8:	491f      	ldr	r1, [pc, #124]	; (23fa958 <_GLOBAL__sub_I_WemoClient+0xf0>)
	    _M_invoker = &_My_handler::_M_invoke;
 23fa8da:	4e20      	ldr	r6, [pc, #128]	; (23fa95c <_GLOBAL__sub_I_WemoClient+0xf4>)
	    _M_manager = &_My_handler::_M_manager;
 23fa8dc:	4d20      	ldr	r5, [pc, #128]	; (23fa960 <_GLOBAL__sub_I_WemoClient+0xf8>)
 23fa8de:	466a      	mov	r2, sp
 23fa8e0:	6809      	ldr	r1, [r1, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fa8e2:	9300      	str	r3, [sp, #0]
 23fa8e4:	481f      	ldr	r0, [pc, #124]	; (23fa964 <_GLOBAL__sub_I_WemoClient+0xfc>)
 23fa8e6:	4623      	mov	r3, r4
	    _M_invoker = &_My_handler::_M_invoke;
 23fa8e8:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fa8ea:	9502      	str	r5, [sp, #8]
 23fa8ec:	f7fe ff50 	bl	23f9790 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
 23fa8f0:	4668      	mov	r0, sp
 23fa8f2:	f7fe ff0f 	bl	23f9714 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fa8f6:	4b1c      	ldr	r3, [pc, #112]	; (23fa968 <_GLOBAL__sub_I_WemoClient+0x100>)
Timer feetUp(remindFeetUpInterval, printRemindFeetUp);
 23fa8f8:	491c      	ldr	r1, [pc, #112]	; (23fa96c <_GLOBAL__sub_I_WemoClient+0x104>)
 23fa8fa:	466a      	mov	r2, sp
 23fa8fc:	6809      	ldr	r1, [r1, #0]
 23fa8fe:	9300      	str	r3, [sp, #0]
 23fa900:	481b      	ldr	r0, [pc, #108]	; (23fa970 <_GLOBAL__sub_I_WemoClient+0x108>)
 23fa902:	4623      	mov	r3, r4
	    _M_manager = &_My_handler::_M_manager;
 23fa904:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23fa908:	f7fe ff42 	bl	23f9790 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
 23fa90c:	4668      	mov	r0, sp
 23fa90e:	f7fe ff01 	bl	23f9714 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fa912:	4b18      	ldr	r3, [pc, #96]	; (23fa974 <_GLOBAL__sub_I_WemoClient+0x10c>)
Timer moveIt(remindMoveAroundInterval, printRemindMoveAround);
 23fa914:	4918      	ldr	r1, [pc, #96]	; (23fa978 <_GLOBAL__sub_I_WemoClient+0x110>)
 23fa916:	466a      	mov	r2, sp
 23fa918:	6809      	ldr	r1, [r1, #0]
 23fa91a:	9300      	str	r3, [sp, #0]
 23fa91c:	4817      	ldr	r0, [pc, #92]	; (23fa97c <_GLOBAL__sub_I_WemoClient+0x114>)
 23fa91e:	4623      	mov	r3, r4
	    _M_manager = &_My_handler::_M_manager;
 23fa920:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23fa924:	f7fe ff34 	bl	23f9790 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
 23fa928:	4668      	mov	r0, sp
 23fa92a:	f7fe fef3 	bl	23f9714 <_ZNSt14_Function_baseD1Ev>
 23fa92e:	b004      	add	sp, #16
 23fa930:	bd70      	pop	{r4, r5, r6, pc}
 23fa932:	bf00      	nop
 23fa934:	1007ad28 	.word	0x1007ad28
 23fa938:	1007ad1c 	.word	0x1007ad1c
 23fa93c:	1007ad6c 	.word	0x1007ad6c
 23fa940:	1007adcc 	.word	0x1007adcc
 23fa944:	1007ad10 	.word	0x1007ad10
 23fa948:	1007ad14 	.word	0x1007ad14
 23fa94c:	1007adb4 	.word	0x1007adb4
 23fa950:	1007ad70 	.word	0x1007ad70
 23fa954:	023fa1f9 	.word	0x023fa1f9
 23fa958:	1007ac98 	.word	0x1007ac98
 23fa95c:	023f965b 	.word	0x023f965b
 23fa960:	023f9647 	.word	0x023f9647
 23fa964:	1007ae24 	.word	0x1007ae24
 23fa968:	023fa24d 	.word	0x023fa24d
 23fa96c:	1007ac90 	.word	0x1007ac90
 23fa970:	1007ad7c 	.word	0x1007ad7c
 23fa974:	023fa2a1 	.word	0x023fa2a1
 23fa978:	1007ac94 	.word	0x1007ac94
 23fa97c:	1007ad98 	.word	0x1007ad98

023fa980 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23fa980:	4770      	bx	lr

023fa982 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23fa982:	b510      	push	{r4, lr}
 23fa984:	4604      	mov	r4, r0
  }
 23fa986:	2110      	movs	r1, #16
 23fa988:	f7fe fe23 	bl	23f95d2 <_ZdlPvj>
 23fa98c:	4620      	mov	r0, r4
 23fa98e:	bd10      	pop	{r4, pc}

023fa990 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fa990:	2100      	movs	r1, #0
 23fa992:	b280      	uxth	r0, r0
 23fa994:	f003 bf41 	b.w	23fe81a <digitalWrite>

023fa998 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fa998:	2101      	movs	r1, #1
 23fa99a:	b280      	uxth	r0, r0
 23fa99c:	f003 bf3d 	b.w	23fe81a <digitalWrite>

023fa9a0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fa9a0:	2100      	movs	r1, #0
 23fa9a2:	b280      	uxth	r0, r0
 23fa9a4:	f003 bf39 	b.w	23fe81a <digitalWrite>

023fa9a8 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fa9a8:	2101      	movs	r1, #1
 23fa9aa:	b280      	uxth	r0, r0
 23fa9ac:	f003 bf35 	b.w	23fe81a <digitalWrite>

023fa9b0 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fa9b0:	2100      	movs	r1, #0
 23fa9b2:	b280      	uxth	r0, r0
 23fa9b4:	f003 bf31 	b.w	23fe81a <digitalWrite>

023fa9b8 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fa9b8:	2101      	movs	r1, #1
 23fa9ba:	b280      	uxth	r0, r0
 23fa9bc:	f003 bf2d 	b.w	23fe81a <digitalWrite>

023fa9c0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23fa9c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa9c2:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23fa9c4:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23fa9c6:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23fa9c8:	68a3      	ldr	r3, [r4, #8]
 23fa9ca:	b132      	cbz	r2, 23fa9da <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23fa9cc:	b9a3      	cbnz	r3, 23fa9f8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23fa9ce:	490b      	ldr	r1, [pc, #44]	; (23fa9fc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23fa9d0:	b002      	add	sp, #8
 23fa9d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23fa9d6:	f002 bf03 	b.w	23fd7e0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fa9da:	4a09      	ldr	r2, [pc, #36]	; (23faa00 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23fa9dc:	7b26      	ldrb	r6, [r4, #12]
 23fa9de:	4d09      	ldr	r5, [pc, #36]	; (23faa04 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23fa9e0:	4909      	ldr	r1, [pc, #36]	; (23faa08 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23fa9e2:	7b64      	ldrb	r4, [r4, #13]
 23fa9e4:	2e01      	cmp	r6, #1
 23fa9e6:	bf18      	it	ne
 23fa9e8:	4629      	movne	r1, r5
 23fa9ea:	e9cd 1400 	strd	r1, r4, [sp]
 23fa9ee:	4907      	ldr	r1, [pc, #28]	; (23faa0c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23fa9f0:	f7fe fe82 	bl	23f96f8 <_ZN5Print6printfEPKcz>
  }
 23fa9f4:	b002      	add	sp, #8
 23fa9f6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fa9f8:	4a05      	ldr	r2, [pc, #20]	; (23faa10 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23fa9fa:	e7ef      	b.n	23fa9dc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23fa9fc:	023ff4e8 	.word	0x023ff4e8
 23faa00:	023ff02f 	.word	0x023ff02f
 23faa04:	023ff4e4 	.word	0x023ff4e4
 23faa08:	023ff4e0 	.word	0x023ff4e0
 23faa0c:	023ff4fe 	.word	0x023ff4fe
 23faa10:	023ff4d7 	.word	0x023ff4d7

023faa14 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23faa14:	b538      	push	{r3, r4, r5, lr}
 23faa16:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23faa18:	b212      	sxth	r2, r2
 23faa1a:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23faa1c:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23faa1e:	f000 fdbd 	bl	23fb59c <_ZN12Adafruit_GFXC1Ess>
 23faa22:	2200      	movs	r2, #0
 23faa24:	4b0b      	ldr	r3, [pc, #44]	; (23faa54 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23faa26:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23faa28:	6023      	str	r3, [r4, #0]
 23faa2a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23faa2e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23faa32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23faa36:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23faa3a:	6422      	str	r2, [r4, #64]	; 0x40
 23faa3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23faa40:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23faa44:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23faa48:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23faa4c:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23faa4e:	6265      	str	r5, [r4, #36]	; 0x24
}
 23faa50:	bd38      	pop	{r3, r4, r5, pc}
 23faa52:	bf00      	nop
 23faa54:	023ff524 	.word	0x023ff524

023faa58 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23faa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23faa5c:	4604      	mov	r4, r0
 23faa5e:	460d      	mov	r5, r1
 23faa60:	4616      	mov	r6, r2
 23faa62:	461f      	mov	r7, r3
 23faa64:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23faab4 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23faa68:	b086      	sub	sp, #24
 23faa6a:	e8d8 0f8f 	ldab	r0, [r8]
 23faa6e:	f010 0101 	ands.w	r1, r0, #1
 23faa72:	d10b      	bne.n	23faa8c <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23faa74:	4640      	mov	r0, r8
 23faa76:	9105      	str	r1, [sp, #20]
 23faa78:	f7fe fdba 	bl	23f95f0 <__cxa_guard_acquire>
 23faa7c:	9905      	ldr	r1, [sp, #20]
 23faa7e:	b128      	cbz	r0, 23faa8c <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23faa80:	480b      	ldr	r0, [pc, #44]	; (23faab0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23faa82:	f002 fcd7 	bl	23fd434 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23faa86:	4640      	mov	r0, r8
 23faa88:	f7fe fdb7 	bl	23f95fa <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23faa8c:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23faa90:	4632      	mov	r2, r6
 23faa92:	9302      	str	r3, [sp, #8]
 23faa94:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23faa98:	4629      	mov	r1, r5
 23faa9a:	e9cd 7300 	strd	r7, r3, [sp]
 23faa9e:	4620      	mov	r0, r4
 23faaa0:	4b03      	ldr	r3, [pc, #12]	; (23faab0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23faaa2:	f7ff ffb7 	bl	23faa14 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23faaa6:	4620      	mov	r0, r4
 23faaa8:	b006      	add	sp, #24
 23faaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23faaae:	bf00      	nop
 23faab0:	1007ae44 	.word	0x1007ae44
 23faab4:	1007ae40 	.word	0x1007ae40

023faab8 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23faab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faaba:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23faabc:	4f48      	ldr	r7, [pc, #288]	; (23fabe0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23faabe:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23faac2:	2900      	cmp	r1, #0
 23faac4:	bf18      	it	ne
 23faac6:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23faac8:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23faaca:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23faacc:	db09      	blt.n	23faae2 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23faace:	2101      	movs	r1, #1
 23faad0:	b280      	uxth	r0, r0
 23faad2:	f003 fe91 	bl	23fe7f8 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23faad6:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23faada:	2101      	movs	r1, #1
 23faadc:	b280      	uxth	r0, r0
 23faade:	f003 fe9c 	bl	23fe81a <digitalWrite>
    pinMode(_dc, OUTPUT);
 23faae2:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23faae6:	2101      	movs	r1, #1
 23faae8:	b280      	uxth	r0, r0
 23faaea:	f003 fe85 	bl	23fe7f8 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23faaee:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23faaf2:	2101      	movs	r1, #1
 23faaf4:	b280      	uxth	r0, r0
 23faaf6:	f003 fe90 	bl	23fe81a <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23faafa:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23faafe:	bb85      	cbnz	r5, 23fab62 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
class SPISettings : public Printable {
 23fab00:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fab02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fab04:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fab08:	6327      	str	r7, [r4, #48]	; 0x30
 23fab0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fab0e:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fab12:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fab14:	f002 fc98 	bl	23fd448 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fab18:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fab1c:	2800      	cmp	r0, #0
 23fab1e:	db5e      	blt.n	23fabde <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fab20:	2101      	movs	r1, #1
 23fab22:	b280      	uxth	r0, r0
 23fab24:	f003 fe68 	bl	23fe7f8 <pinMode>
        digitalWrite(_rst, HIGH);
 23fab28:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fab2c:	2101      	movs	r1, #1
 23fab2e:	b280      	uxth	r0, r0
 23fab30:	f003 fe73 	bl	23fe81a <digitalWrite>
        delay(100);
 23fab34:	2064      	movs	r0, #100	; 0x64
 23fab36:	f002 ffd5 	bl	23fdae4 <delay>
        digitalWrite(_rst, LOW);
 23fab3a:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fab3e:	2100      	movs	r1, #0
 23fab40:	b280      	uxth	r0, r0
 23fab42:	f003 fe6a 	bl	23fe81a <digitalWrite>
        delay(100);
 23fab46:	2064      	movs	r0, #100	; 0x64
 23fab48:	f002 ffcc 	bl	23fdae4 <delay>
        digitalWrite(_rst, HIGH);
 23fab4c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fab50:	2101      	movs	r1, #1
 23fab52:	b280      	uxth	r0, r0
 23fab54:	f003 fe61 	bl	23fe81a <digitalWrite>
}
 23fab58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fab5c:	20c8      	movs	r0, #200	; 0xc8
 23fab5e:	f002 bfc1 	b.w	23fdae4 <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fab62:	2d01      	cmp	r5, #1
 23fab64:	d120      	bne.n	23faba8 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fab66:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fab6a:	4629      	mov	r1, r5
 23fab6c:	b280      	uxth	r0, r0
 23fab6e:	f003 fe43 	bl	23fe7f8 <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fab72:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fab76:	2100      	movs	r1, #0
 23fab78:	b280      	uxth	r0, r0
 23fab7a:	f003 fe4e 	bl	23fe81a <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fab7e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fab82:	4629      	mov	r1, r5
 23fab84:	b280      	uxth	r0, r0
 23fab86:	f003 fe37 	bl	23fe7f8 <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fab8a:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fab8e:	2100      	movs	r1, #0
 23fab90:	b280      	uxth	r0, r0
 23fab92:	f003 fe42 	bl	23fe81a <digitalWrite>
        if(swspi._miso >= 0) {
 23fab96:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fab9a:	2800      	cmp	r0, #0
 23fab9c:	dbbc      	blt.n	23fab18 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23fab9e:	2100      	movs	r1, #0
 23faba0:	b280      	uxth	r0, r0
 23faba2:	f003 fe29 	bl	23fe7f8 <pinMode>
 23faba6:	e7b7      	b.n	23fab18 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23faba8:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fabac:	2101      	movs	r1, #1
 23fabae:	b280      	uxth	r0, r0
 23fabb0:	f003 fe22 	bl	23fe7f8 <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23fabb4:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fabb8:	2101      	movs	r1, #1
 23fabba:	b280      	uxth	r0, r0
 23fabbc:	f003 fe2d 	bl	23fe81a <digitalWrite>
        if(tft8._rd >= 0) {
 23fabc0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fabc4:	2800      	cmp	r0, #0
 23fabc6:	dba7      	blt.n	23fab18 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23fabc8:	2101      	movs	r1, #1
 23fabca:	b280      	uxth	r0, r0
 23fabcc:	f003 fe14 	bl	23fe7f8 <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23fabd0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fabd4:	2101      	movs	r1, #1
 23fabd6:	b280      	uxth	r0, r0
 23fabd8:	f003 fe1f 	bl	23fe81a <digitalWrite>
 23fabdc:	e79c      	b.n	23fab18 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23fabde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fabe0:	00f42400 	.word	0x00f42400

023fabe4 <_ZN15Adafruit_SPITFT8color565Ehhh>:
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 23fabe4:	4804      	ldr	r0, [pc, #16]	; (23fabf8 <_ZN15Adafruit_SPITFT8color565Ehhh+0x14>)
 23fabe6:	00d2      	lsls	r2, r2, #3
 23fabe8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 23fabec:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 23fabf0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
}
 23fabf4:	4318      	orrs	r0, r3
 23fabf6:	4770      	bx	lr
 23fabf8:	fffff800 	.word	0xfffff800

023fabfc <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fabfc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fac00:	b923      	cbnz	r3, 23fac0c <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23fac02:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23fac06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fac08:	f002 bc4e 	b.w	23fd4a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23fac0c:	4770      	bx	lr

023fac0e <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23fac0e:	b510      	push	{r4, lr}
 23fac10:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23fac12:	f7ff fff3 	bl	23fabfc <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23fac16:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fac1a:	2800      	cmp	r0, #0
 23fac1c:	db05      	blt.n	23fac2a <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23fac1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23fac22:	2100      	movs	r1, #0
 23fac24:	b280      	uxth	r0, r0
 23fac26:	f003 bdf8 	b.w	23fe81a <digitalWrite>
 23fac2a:	bd10      	pop	{r4, pc}

023fac2c <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fac2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fac30:	b913      	cbnz	r3, 23fac38 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23fac32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fac34:	f002 bc1f 	b.w	23fd476 <_ZN8SPIClass14endTransactionEv>
}
 23fac38:	4770      	bx	lr

023fac3a <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23fac3a:	b510      	push	{r4, lr}
 23fac3c:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23fac3e:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23fac42:	2800      	cmp	r0, #0
 23fac44:	db03      	blt.n	23fac4e <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23fac46:	2101      	movs	r1, #1
 23fac48:	b280      	uxth	r0, r0
 23fac4a:	f003 fde6 	bl	23fe81a <digitalWrite>
    SPI_END_TRANSACTION();
 23fac4e:	4620      	mov	r0, r4
 23fac50:	f7ff ffec 	bl	23fac2c <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23fac54:	bd10      	pop	{r4, pc}

023fac56 <_ZN15Adafruit_SPITFT7spiReadEv>:
uint8_t Adafruit_SPITFT::spiRead(void) {
 23fac56:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fac58:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
uint8_t Adafruit_SPITFT::spiRead(void) {
 23fac5c:	4605      	mov	r5, r0
    if(connection == TFT_HARD_SPI) {
 23fac5e:	b921      	cbnz	r1, 23fac6a <_ZN15Adafruit_SPITFT7spiReadEv+0x14>
}
 23fac60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return hwspi._spi->transfer((uint8_t)0);
 23fac64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fac66:	f002 bcbf 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fac6a:	2901      	cmp	r1, #1
 23fac6c:	d11d      	bne.n	23facaa <_ZN15Adafruit_SPITFT7spiReadEv+0x54>
        if(swspi._miso >= 0) {
 23fac6e:	f990 3025 	ldrsb.w	r3, [r0, #37]	; 0x25
 23fac72:	2b00      	cmp	r3, #0
 23fac74:	db19      	blt.n	23facaa <_ZN15Adafruit_SPITFT7spiReadEv+0x54>
 23fac76:	2608      	movs	r6, #8
    uint8_t  b = 0;
 23fac78:	2400      	movs	r4, #0
                SPI_SCK_HIGH();
 23fac7a:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fac7e:	f7ff fe8b 	bl	23fa998 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
    return *swspi.misoPort;
 #else  // !KINETISK
    return *swspi.misoPort & swspi.misoPinMask;
 #endif // end !KINETISK
#else  // !USE_FAST_PINIO
    return digitalRead(swspi._miso);
 23fac82:	f995 0025 	ldrsb.w	r0, [r5, #37]	; 0x25
                b <<= 1;
 23fac86:	0064      	lsls	r4, r4, #1
    return digitalRead(swspi._miso);
 23fac88:	b280      	uxth	r0, r0
                b <<= 1;
 23fac8a:	b2e4      	uxtb	r4, r4
    return digitalRead(swspi._miso);
 23fac8c:	f003 fdde 	bl	23fe84c <digitalRead>
                if(SPI_MISO_READ()) b++;
 23fac90:	b108      	cbz	r0, 23fac96 <_ZN15Adafruit_SPITFT7spiReadEv+0x40>
 23fac92:	3401      	adds	r4, #1
 23fac94:	b2e4      	uxtb	r4, r4
                SPI_SCK_LOW();
 23fac96:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint8_t i=0; i<8; i++) {
 23fac9a:	3e01      	subs	r6, #1
                SPI_SCK_LOW();
 23fac9c:	f7ff fe78 	bl	23fa990 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            for(uint8_t i=0; i<8; i++) {
 23faca0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 23faca4:	d1e9      	bne.n	23fac7a <_ZN15Adafruit_SPITFT7spiReadEv+0x24>
}
 23faca6:	4620      	mov	r0, r4
 23faca8:	bd70      	pop	{r4, r5, r6, pc}
        return w;
 23facaa:	2400      	movs	r4, #0
 23facac:	e7fb      	b.n	23faca6 <_ZN15Adafruit_SPITFT7spiReadEv+0x50>

023facae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23facae:	b510      	push	{r4, lr}
 23facb0:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23facb2:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23facb6:	2100      	movs	r1, #0
 23facb8:	b280      	uxth	r0, r0
 23facba:	f003 fdae 	bl	23fe81a <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23facbe:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23facc2:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23facc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23facc8:	b280      	uxth	r0, r0
 23facca:	f003 bda6 	b.w	23fe81a <digitalWrite>

023facce <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23facce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23facd2:	4605      	mov	r5, r0
 23facd4:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23facd6:	4614      	mov	r4, r2
 23facd8:	b17a      	cbz	r2, 23facfa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23facda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23facde:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23face2:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23face4:	b95b      	cbnz	r3, 23facfe <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23face6:	4641      	mov	r1, r8
 23face8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23facea:	f002 fc7d 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23facee:	4639      	mov	r1, r7
 23facf0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23facf2:	f002 fc79 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        while(len--) {
 23facf6:	3c01      	subs	r4, #1
 23facf8:	d1f5      	bne.n	23face6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23facfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23facfe:	2b01      	cmp	r3, #1
 23fad00:	d11e      	bne.n	23fad40 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fad02:	46b0      	mov	r8, r6
 23fad04:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fad06:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fad0a:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fad0e:	d014      	beq.n	23fad3a <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fad10:	f7ff fe4a 	bl	23fa9a8 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fad14:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fad18:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fad1a:	f7ff fe3d 	bl	23fa998 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fad1e:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fad22:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fad26:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fad28:	f7ff fe32 	bl	23fa990 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fad2c:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fad30:	2f00      	cmp	r7, #0
 23fad32:	d1e8      	bne.n	23fad06 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fad34:	3c01      	subs	r4, #1
 23fad36:	d1e4      	bne.n	23fad02 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fad38:	e7df      	b.n	23facfa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fad3a:	f7ff fe31 	bl	23fa9a0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fad3e:	e7e9      	b.n	23fad14 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fad40:	45b8      	cmp	r8, r7
 23fad42:	d0da      	beq.n	23facfa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fad44:	4628      	mov	r0, r5
 23fad46:	f7ff ffb2 	bl	23facae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fad4a:	3c01      	subs	r4, #1
 23fad4c:	d1fa      	bne.n	23fad44 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fad4e:	e7d4      	b.n	23facfa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fad50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fad54:	461d      	mov	r5, r3
 23fad56:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fad58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fad5c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fad60:	9300      	str	r3, [sp, #0]
 23fad62:	6803      	ldr	r3, [r0, #0]
 23fad64:	b292      	uxth	r2, r2
 23fad66:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fad6a:	b289      	uxth	r1, r1
 23fad6c:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fad6e:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fad72:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fad74:	4631      	mov	r1, r6
 23fad76:	4620      	mov	r0, r4
 23fad78:	fb05 f207 	mul.w	r2, r5, r7
}
 23fad7c:	b002      	add	sp, #8
 23fad7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fad82:	f7ff bfa4 	b.w	23facce <_ZN15Adafruit_SPITFT10writeColorEtm>

023fad86 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fad86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fad8a:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fad8e:	2b00      	cmp	r3, #0
 23fad90:	d046      	beq.n	23fae20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fad92:	2c00      	cmp	r4, #0
 23fad94:	d044      	beq.n	23fae20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fad96:	2b00      	cmp	r3, #0
 23fad98:	da05      	bge.n	23fada6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fad9a:	3101      	adds	r1, #1
 23fad9c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23fada0:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23fada2:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23fada4:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23fada6:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fadaa:	428e      	cmp	r6, r1
 23fadac:	dd38      	ble.n	23fae20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fadae:	2c00      	cmp	r4, #0
 23fadb0:	da05      	bge.n	23fadbe <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fadb2:	3201      	adds	r2, #1
 23fadb4:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fadb8:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fadba:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fadbc:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fadbe:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fadc2:	4295      	cmp	r5, r2
 23fadc4:	dd2c      	ble.n	23fae20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fadc6:	eb01 0803 	add.w	r8, r1, r3
 23fadca:	fa1f f888 	uxth.w	r8, r8
 23fadce:	f108 3cff 	add.w	ip, r8, #4294967295
 23fadd2:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fadd6:	f1bc 0f00 	cmp.w	ip, #0
 23fadda:	db21      	blt.n	23fae20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23faddc:	eb02 0e04 	add.w	lr, r2, r4
 23fade0:	fa1f fe8e 	uxth.w	lr, lr
 23fade4:	f10e 37ff 	add.w	r7, lr, #4294967295
 23fade8:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fadea:	2f00      	cmp	r7, #0
 23fadec:	db18      	blt.n	23fae20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fadee:	2900      	cmp	r1, #0
 23fadf0:	bfbc      	itt	lt
 23fadf2:	2100      	movlt	r1, #0
 23fadf4:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fadf8:	2a00      	cmp	r2, #0
 23fadfa:	bfbc      	itt	lt
 23fadfc:	2200      	movlt	r2, #0
 23fadfe:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fae02:	4566      	cmp	r6, ip
 23fae04:	bfdc      	itt	le
 23fae06:	1a73      	suble	r3, r6, r1
 23fae08:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fae0a:	42bd      	cmp	r5, r7
 23fae0c:	bfd8      	it	le
 23fae0e:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fae10:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fae14:	bfd8      	it	le
 23fae16:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fae18:	e9cd 4500 	strd	r4, r5, [sp]
 23fae1c:	f7ff ff98 	bl	23fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fae20:	b002      	add	sp, #8
 23fae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fae26 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fae26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fae2a:	4680      	mov	r8, r0
 23fae2c:	460c      	mov	r4, r1
 23fae2e:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fae30:	461e      	mov	r6, r3
  uint16_t color) {
 23fae32:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fae36:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fae3a:	2b00      	cmp	r3, #0
 23fae3c:	d052      	beq.n	23faee4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fae3e:	2f00      	cmp	r7, #0
 23fae40:	d050      	beq.n	23faee4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fae42:	2b00      	cmp	r3, #0
 23fae44:	da05      	bge.n	23fae52 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fae46:	3401      	adds	r4, #1
 23fae48:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fae4c:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fae4e:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fae50:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fae52:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fae56:	42a3      	cmp	r3, r4
 23fae58:	dd44      	ble.n	23faee4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fae5a:	2f00      	cmp	r7, #0
 23fae5c:	da05      	bge.n	23fae6a <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fae5e:	3501      	adds	r5, #1
 23fae60:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fae64:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fae66:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fae68:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fae6a:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fae6e:	42aa      	cmp	r2, r5
 23fae70:	dd38      	ble.n	23faee4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fae72:	eb04 0e06 	add.w	lr, r4, r6
 23fae76:	fa1f fe8e 	uxth.w	lr, lr
 23fae7a:	f10e 30ff 	add.w	r0, lr, #4294967295
 23fae7e:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fae80:	2800      	cmp	r0, #0
 23fae82:	db2f      	blt.n	23faee4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fae84:	eb05 0c07 	add.w	ip, r5, r7
 23fae88:	fa1f fc8c 	uxth.w	ip, ip
 23fae8c:	f10c 31ff 	add.w	r1, ip, #4294967295
 23fae90:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fae92:	2900      	cmp	r1, #0
 23fae94:	db26      	blt.n	23faee4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fae96:	2c00      	cmp	r4, #0
 23fae98:	bfbc      	itt	lt
 23fae9a:	2400      	movlt	r4, #0
 23fae9c:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23faea0:	2d00      	cmp	r5, #0
 23faea2:	bfbc      	itt	lt
 23faea4:	2500      	movlt	r5, #0
 23faea6:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23faeaa:	4283      	cmp	r3, r0
 23faeac:	bfdc      	itt	le
 23faeae:	1b1b      	suble	r3, r3, r4
 23faeb0:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23faeb2:	428a      	cmp	r2, r1
                        startWrite();
 23faeb4:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23faeb8:	bfdc      	itt	le
 23faeba:	1b52      	suble	r2, r2, r5
 23faebc:	b217      	sxthle	r7, r2
                        startWrite();
 23faebe:	4640      	mov	r0, r8
 23faec0:	695b      	ldr	r3, [r3, #20]
 23faec2:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23faec4:	4633      	mov	r3, r6
 23faec6:	4640      	mov	r0, r8
 23faec8:	462a      	mov	r2, r5
 23faeca:	4621      	mov	r1, r4
 23faecc:	e9cd 7900 	strd	r7, r9, [sp]
 23faed0:	f7ff ff3e 	bl	23fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23faed4:	4640      	mov	r0, r8
 23faed6:	f8d8 3000 	ldr.w	r3, [r8]
 23faeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faedc:	b003      	add	sp, #12
 23faede:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23faee2:	4718      	bx	r3
}
 23faee4:	b003      	add	sp, #12
 23faee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023faeea <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23faeea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23faeee:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23faef0:	4606      	mov	r6, r0
 23faef2:	460c      	mov	r4, r1
 23faef4:	461d      	mov	r5, r3
 23faef6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23faefa:	db33      	blt.n	23faf64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23faefc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23faf00:	42bb      	cmp	r3, r7
 23faf02:	dd2f      	ble.n	23faf64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23faf04:	2d00      	cmp	r5, #0
 23faf06:	d02d      	beq.n	23faf64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23faf08:	da05      	bge.n	23faf16 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23faf0a:	3401      	adds	r4, #1
 23faf0c:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23faf10:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23faf12:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23faf14:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23faf16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23faf1a:	42a3      	cmp	r3, r4
 23faf1c:	dd22      	ble.n	23faf64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23faf1e:	1961      	adds	r1, r4, r5
 23faf20:	b289      	uxth	r1, r1
 23faf22:	1e4a      	subs	r2, r1, #1
 23faf24:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23faf26:	2a00      	cmp	r2, #0
 23faf28:	db1c      	blt.n	23faf64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23faf2a:	2c00      	cmp	r4, #0
 23faf2c:	bfbc      	itt	lt
 23faf2e:	2400      	movlt	r4, #0
 23faf30:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23faf32:	4293      	cmp	r3, r2
 23faf34:	bfdc      	itt	le
 23faf36:	1b1b      	suble	r3, r3, r4
 23faf38:	b21d      	sxthle	r5, r3
                startWrite();
 23faf3a:	6833      	ldr	r3, [r6, #0]
 23faf3c:	4630      	mov	r0, r6
 23faf3e:	695b      	ldr	r3, [r3, #20]
 23faf40:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23faf42:	2301      	movs	r3, #1
 23faf44:	4630      	mov	r0, r6
 23faf46:	9300      	str	r3, [sp, #0]
 23faf48:	463a      	mov	r2, r7
 23faf4a:	462b      	mov	r3, r5
 23faf4c:	4621      	mov	r1, r4
 23faf4e:	f8cd 8004 	str.w	r8, [sp, #4]
 23faf52:	f7ff fefd 	bl	23fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23faf56:	4630      	mov	r0, r6
 23faf58:	6833      	ldr	r3, [r6, #0]
 23faf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faf5c:	b002      	add	sp, #8
 23faf5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23faf62:	4718      	bx	r3
}
 23faf64:	b002      	add	sp, #8
 23faf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023faf6a <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23faf6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23faf6e:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23faf70:	4606      	mov	r6, r0
 23faf72:	4614      	mov	r4, r2
 23faf74:	461d      	mov	r5, r3
 23faf76:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23faf7a:	db31      	blt.n	23fafe0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23faf7c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23faf80:	42bb      	cmp	r3, r7
 23faf82:	dd2d      	ble.n	23fafe0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23faf84:	2d00      	cmp	r5, #0
 23faf86:	d02b      	beq.n	23fafe0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23faf88:	da05      	bge.n	23faf96 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23faf8a:	3401      	adds	r4, #1
 23faf8c:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23faf90:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23faf92:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23faf94:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23faf96:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23faf9a:	42a3      	cmp	r3, r4
 23faf9c:	dd20      	ble.n	23fafe0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23faf9e:	1961      	adds	r1, r4, r5
 23fafa0:	b289      	uxth	r1, r1
 23fafa2:	1e4a      	subs	r2, r1, #1
 23fafa4:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fafa6:	2a00      	cmp	r2, #0
 23fafa8:	db1a      	blt.n	23fafe0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fafaa:	2c00      	cmp	r4, #0
 23fafac:	bfbc      	itt	lt
 23fafae:	2400      	movlt	r4, #0
 23fafb0:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fafb2:	4293      	cmp	r3, r2
 23fafb4:	bfdc      	itt	le
 23fafb6:	1b1b      	suble	r3, r3, r4
 23fafb8:	b21d      	sxthle	r5, r3
                startWrite();
 23fafba:	6833      	ldr	r3, [r6, #0]
 23fafbc:	4630      	mov	r0, r6
 23fafbe:	695b      	ldr	r3, [r3, #20]
 23fafc0:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fafc2:	4630      	mov	r0, r6
 23fafc4:	2301      	movs	r3, #1
 23fafc6:	4622      	mov	r2, r4
 23fafc8:	4639      	mov	r1, r7
 23fafca:	e9cd 5800 	strd	r5, r8, [sp]
 23fafce:	f7ff febf 	bl	23fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fafd2:	4630      	mov	r0, r6
 23fafd4:	6833      	ldr	r3, [r6, #0]
 23fafd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fafd8:	b002      	add	sp, #8
 23fafda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fafde:	4718      	bx	r3
}
 23fafe0:	b002      	add	sp, #8
 23fafe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fafe6 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fafe6:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fafe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fafea:	db26      	blt.n	23fb03a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fafec:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23faff0:	4294      	cmp	r4, r2
 23faff2:	dd22      	ble.n	23fb03a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23faff4:	2b00      	cmp	r3, #0
 23faff6:	d020      	beq.n	23fb03a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23faff8:	da05      	bge.n	23fb006 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23faffa:	3101      	adds	r1, #1
 23faffc:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fb000:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fb002:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fb004:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fb006:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb00a:	428c      	cmp	r4, r1
 23fb00c:	dd15      	ble.n	23fb03a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fb00e:	18ce      	adds	r6, r1, r3
 23fb010:	b2b6      	uxth	r6, r6
 23fb012:	1e75      	subs	r5, r6, #1
 23fb014:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fb016:	2d00      	cmp	r5, #0
 23fb018:	db0f      	blt.n	23fb03a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb01a:	2900      	cmp	r1, #0
 23fb01c:	bfbc      	itt	lt
 23fb01e:	2100      	movlt	r1, #0
 23fb020:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb022:	42ac      	cmp	r4, r5
 23fb024:	bfd8      	it	le
 23fb026:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb028:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb02c:	bfd8      	it	le
 23fb02e:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb030:	9401      	str	r4, [sp, #4]
 23fb032:	2401      	movs	r4, #1
 23fb034:	9400      	str	r4, [sp, #0]
 23fb036:	f7ff fe8b 	bl	23fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb03a:	b002      	add	sp, #8
 23fb03c:	bd70      	pop	{r4, r5, r6, pc}

023fb03e <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fb03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb040:	2900      	cmp	r1, #0
 23fb042:	db26      	blt.n	23fb092 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fb044:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb048:	428c      	cmp	r4, r1
 23fb04a:	dd22      	ble.n	23fb092 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fb04c:	2b00      	cmp	r3, #0
 23fb04e:	d020      	beq.n	23fb092 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fb050:	da05      	bge.n	23fb05e <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fb052:	3201      	adds	r2, #1
 23fb054:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fb058:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fb05a:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fb05c:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fb05e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb062:	4294      	cmp	r4, r2
 23fb064:	dd15      	ble.n	23fb092 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fb066:	18d6      	adds	r6, r2, r3
 23fb068:	b2b6      	uxth	r6, r6
 23fb06a:	1e75      	subs	r5, r6, #1
 23fb06c:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fb06e:	2d00      	cmp	r5, #0
 23fb070:	db0f      	blt.n	23fb092 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb072:	2a00      	cmp	r2, #0
 23fb074:	bfbc      	itt	lt
 23fb076:	2200      	movlt	r2, #0
 23fb078:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb07a:	42ac      	cmp	r4, r5
 23fb07c:	bfd8      	it	le
 23fb07e:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb080:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb084:	bfd8      	it	le
 23fb086:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb088:	e9cd 3400 	strd	r3, r4, [sp]
 23fb08c:	2301      	movs	r3, #1
 23fb08e:	f7ff fe5f 	bl	23fad50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb092:	b002      	add	sp, #8
 23fb094:	bd70      	pop	{r4, r5, r6, pc}

023fb096 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fb096:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fb098:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fb09c:	4604      	mov	r4, r0
 23fb09e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fb0a0:	b923      	cbnz	r3, 23fb0ac <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23fb0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23fb0a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb0a8:	f002 ba9e 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fb0ac:	2b01      	cmp	r3, #1
 23fb0ae:	d118      	bne.n	23fb0e2 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23fb0b0:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23fb0b2:	062b      	lsls	r3, r5, #24
 23fb0b4:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb0b8:	d510      	bpl.n	23fb0dc <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23fb0ba:	f7ff fc75 	bl	23fa9a8 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fb0be:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb0c2:	f7ff fc69 	bl	23fa998 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23fb0c6:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fb0c8:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb0cc:	f7ff fc60 	bl	23fa990 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23fb0d0:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23fb0d2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23fb0d6:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23fb0d8:	d1eb      	bne.n	23fb0b2 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23fb0da:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23fb0dc:	f7ff fc60 	bl	23fa9a0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fb0e0:	e7ed      	b.n	23fb0be <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23fb0e2:	f7ff fde4 	bl	23facae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fb0e6:	e7f8      	b.n	23fb0da <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fb0e8:	b513      	push	{r0, r1, r4, lr}
 23fb0ea:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23fb0ec:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fb0f0:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23fb0f2:	f7ff fc5d 	bl	23fa9b0 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23fb0f6:	4620      	mov	r0, r4
 23fb0f8:	9901      	ldr	r1, [sp, #4]
 23fb0fa:	f7ff ffcc 	bl	23fb096 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23fb0fe:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23fb102:	b002      	add	sp, #8
 23fb104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23fb108:	f7ff bc56 	b.w	23fa9b8 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023fb10c <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fb10c:	b570      	push	{r4, r5, r6, lr}
 23fb10e:	460d      	mov	r5, r1
    startWrite();
 23fb110:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fb112:	4604      	mov	r4, r0
    startWrite();
 23fb114:	695b      	ldr	r3, [r3, #20]
 23fb116:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fb118:	b155      	cbz	r5, 23fb130 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23fb11a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23fb11e:	4620      	mov	r0, r4
 23fb120:	f7ff ffe2 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fb124:	6823      	ldr	r3, [r4, #0]
 23fb126:	4620      	mov	r0, r4
}
 23fb128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fb12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb12e:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fb130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23fb134:	e7f3      	b.n	23fb11e <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023fb136 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fb136:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fb138:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fb13c:	4605      	mov	r5, r0
 23fb13e:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23fb140:	b94b      	cbnz	r3, 23fb156 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23fb142:	0a09      	lsrs	r1, r1, #8
 23fb144:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb146:	f002 fa4f 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23fb14a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fb14c:	b2e1      	uxtb	r1, r4
}
 23fb14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23fb152:	f002 ba49 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fb156:	2b01      	cmp	r3, #1
 23fb158:	d118      	bne.n	23fb18c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23fb15a:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23fb15c:	0423      	lsls	r3, r4, #16
 23fb15e:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fb162:	d510      	bpl.n	23fb186 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23fb164:	f7ff fc20 	bl	23fa9a8 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fb168:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fb16c:	f7ff fc14 	bl	23fa998 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23fb170:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fb172:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fb176:	f7ff fc0b 	bl	23fa990 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23fb17a:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23fb17c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23fb180:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23fb182:	d1eb      	bne.n	23fb15c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23fb184:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23fb186:	f7ff fc0b 	bl	23fa9a0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fb18a:	e7ed      	b.n	23fb168 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23fb18c:	f7ff fd8f 	bl	23facae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fb190:	e7f8      	b.n	23fb184 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023fb192 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fb192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fb194:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fb196:	4604      	mov	r4, r0
 23fb198:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fb19a:	db17      	blt.n	23fb1cc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fb19c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb1a0:	428b      	cmp	r3, r1
 23fb1a2:	dd13      	ble.n	23fb1cc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fb1a4:	2a00      	cmp	r2, #0
 23fb1a6:	db11      	blt.n	23fb1cc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fb1a8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fb1ac:	4293      	cmp	r3, r2
 23fb1ae:	dd0d      	ble.n	23fb1cc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fb1b0:	2301      	movs	r3, #1
 23fb1b2:	6805      	ldr	r5, [r0, #0]
 23fb1b4:	9300      	str	r3, [sp, #0]
 23fb1b6:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fb1b8:	b292      	uxth	r2, r2
 23fb1ba:	b289      	uxth	r1, r1
 23fb1bc:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fb1be:	4631      	mov	r1, r6
 23fb1c0:	4620      	mov	r0, r4
}
 23fb1c2:	b003      	add	sp, #12
 23fb1c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fb1c8:	f7ff bfb5 	b.w	23fb136 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fb1cc:	b003      	add	sp, #12
 23fb1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fb1d0 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fb1d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fb1d4:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fb1d6:	4604      	mov	r4, r0
 23fb1d8:	4616      	mov	r6, r2
 23fb1da:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fb1dc:	db20      	blt.n	23fb220 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fb1de:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb1e2:	42ab      	cmp	r3, r5
 23fb1e4:	dd1c      	ble.n	23fb220 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fb1e6:	2a00      	cmp	r2, #0
 23fb1e8:	db1a      	blt.n	23fb220 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fb1ea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fb1ee:	4293      	cmp	r3, r2
 23fb1f0:	dd16      	ble.n	23fb220 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23fb1f2:	6803      	ldr	r3, [r0, #0]
 23fb1f4:	695b      	ldr	r3, [r3, #20]
 23fb1f6:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23fb1f8:	2301      	movs	r3, #1
 23fb1fa:	6822      	ldr	r2, [r4, #0]
 23fb1fc:	9300      	str	r3, [sp, #0]
 23fb1fe:	4620      	mov	r0, r4
 23fb200:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fb204:	b2a9      	uxth	r1, r5
 23fb206:	b2b2      	uxth	r2, r6
 23fb208:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fb20a:	4620      	mov	r0, r4
 23fb20c:	4639      	mov	r1, r7
 23fb20e:	f7ff ff92 	bl	23fb136 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fb212:	4620      	mov	r0, r4
 23fb214:	6823      	ldr	r3, [r4, #0]
 23fb216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb218:	b002      	add	sp, #8
 23fb21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fb21e:	4718      	bx	r3
}
 23fb220:	b002      	add	sp, #8
 23fb222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb226 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fb226:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fb228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fb22c:	4604      	mov	r4, r0
 23fb22e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fb230:	b99b      	cbnz	r3, 23fb25a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fb232:	0e09      	lsrs	r1, r1, #24
 23fb234:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb236:	f002 f9d7 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fb23a:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fb23e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb240:	f002 f9d2 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fb244:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fb248:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb24a:	f002 f9cd 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fb24e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb250:	b2e9      	uxtb	r1, r5
}
 23fb252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fb256:	f002 b9c7 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fb25a:	2b01      	cmp	r3, #1
 23fb25c:	d118      	bne.n	23fb290 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fb25e:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fb260:	2d00      	cmp	r5, #0
 23fb262:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb266:	da10      	bge.n	23fb28a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fb268:	f7ff fb9e 	bl	23fa9a8 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fb26c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb270:	f7ff fb92 	bl	23fa998 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fb274:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fb276:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb27a:	f7ff fb89 	bl	23fa990 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fb27e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fb282:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fb286:	d1eb      	bne.n	23fb260 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fb288:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fb28a:	f7ff fb89 	bl	23fa9a0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fb28e:	e7ed      	b.n	23fb26c <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fb290:	f7ff fd0d 	bl	23facae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fb294:	e7f8      	b.n	23fb288 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fb296 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fb296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb29a:	461f      	mov	r7, r3
 23fb29c:	b085      	sub	sp, #20
 23fb29e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fb2a2:	eba7 0a01 	sub.w	sl, r7, r1
 23fb2a6:	eba8 0902 	sub.w	r9, r8, r2
 23fb2aa:	f1b9 0f00 	cmp.w	r9, #0
 23fb2ae:	bfb8      	it	lt
 23fb2b0:	f1c9 0900 	rsblt	r9, r9, #0
 23fb2b4:	f1ba 0f00 	cmp.w	sl, #0
 23fb2b8:	bfb8      	it	lt
 23fb2ba:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23fb2be:	45d1      	cmp	r9, sl
        uint16_t color) {
 23fb2c0:	4683      	mov	fp, r0
 23fb2c2:	460c      	mov	r4, r1
 23fb2c4:	4615      	mov	r5, r2
 23fb2c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23fb2ca:	dd04      	ble.n	23fb2d6 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fb2cc:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23fb2ce:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23fb2d0:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23fb2d2:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23fb2d4:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23fb2d6:	42bc      	cmp	r4, r7
 23fb2d8:	dd05      	ble.n	23fb2e6 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fb2da:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23fb2dc:	4645      	mov	r5, r8
 23fb2de:	4690      	mov	r8, r2
    if (x0 > x1) {
 23fb2e0:	4622      	mov	r2, r4
 23fb2e2:	463c      	mov	r4, r7
 23fb2e4:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23fb2e6:	1b3e      	subs	r6, r7, r4
 23fb2e8:	b2b2      	uxth	r2, r6
 23fb2ea:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23fb2ec:	eba8 0205 	sub.w	r2, r8, r5
 23fb2f0:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fb2f4:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23fb2f8:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fb2fc:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23fb300:	4545      	cmp	r5, r8
 23fb302:	bfb4      	ite	lt
 23fb304:	2201      	movlt	r2, #1
 23fb306:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
 23fb30a:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23fb30c:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23fb30e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23fb310:	42bc      	cmp	r4, r7
 23fb312:	dc1c      	bgt.n	23fb34e <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23fb314:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23fb318:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23fb31a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fb31e:	bfc7      	ittee	gt
 23fb320:	4629      	movgt	r1, r5
 23fb322:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23fb324:	462a      	movle	r2, r5
 23fb326:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23fb328:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23fb32a:	4658      	mov	r0, fp
 23fb32c:	47c0      	blx	r8
        }
        err -= dy;
 23fb32e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23fb330:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23fb332:	1ab6      	subs	r6, r6, r2
 23fb334:	b2b1      	uxth	r1, r6
 23fb336:	b236      	sxth	r6, r6
        if (err < 0) {
 23fb338:	2e00      	cmp	r6, #0
 23fb33a:	da05      	bge.n	23fb348 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fb33c:	9a02      	ldr	r2, [sp, #8]
 23fb33e:	4415      	add	r5, r2
            err += dx;
 23fb340:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fb342:	b22d      	sxth	r5, r5
            err += dx;
 23fb344:	1856      	adds	r6, r2, r1
 23fb346:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fb348:	3401      	adds	r4, #1
 23fb34a:	b224      	sxth	r4, r4
 23fb34c:	e7e0      	b.n	23fb310 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fb34e:	b005      	add	sp, #20
 23fb350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb354 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fb354:	4770      	bx	lr

023fb356 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fb356:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fb358:	6804      	ldr	r4, [r0, #0]
 23fb35a:	6924      	ldr	r4, [r4, #16]
 23fb35c:	46a4      	mov	ip, r4
}
 23fb35e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fb362:	4760      	bx	ip

023fb364 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fb364:	b430      	push	{r4, r5}
 23fb366:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fb36a:	6804      	ldr	r4, [r0, #0]
 23fb36c:	9502      	str	r5, [sp, #8]
 23fb36e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fb370:	46a4      	mov	ip, r4
}
 23fb372:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fb374:	4760      	bx	ip

023fb376 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fb376:	b430      	push	{r4, r5}
 23fb378:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fb37c:	6804      	ldr	r4, [r0, #0]
 23fb37e:	9502      	str	r5, [sp, #8]
 23fb380:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fb382:	46a4      	mov	ip, r4
}
 23fb384:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fb386:	4760      	bx	ip

023fb388 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fb388:	b470      	push	{r4, r5, r6}
 23fb38a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fb38e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fb392:	6804      	ldr	r4, [r0, #0]
 23fb394:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fb398:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fb39a:	46a4      	mov	ip, r4
}
 23fb39c:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fb39e:	4760      	bx	ip

023fb3a0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fb3a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb3a4:	461c      	mov	r4, r3
 23fb3a6:	4616      	mov	r6, r2
 23fb3a8:	4605      	mov	r5, r0
 23fb3aa:	460f      	mov	r7, r1
    startWrite();
 23fb3ac:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fb3ae:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fb3b0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fb3b4:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fb3b6:	4434      	add	r4, r6
    startWrite();
 23fb3b8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fb3ba:	b224      	sxth	r4, r4
 23fb3bc:	682b      	ldr	r3, [r5, #0]
 23fb3be:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb3c2:	9400      	str	r4, [sp, #0]
 23fb3c4:	4628      	mov	r0, r5
 23fb3c6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fb3c8:	4632      	mov	r2, r6
 23fb3ca:	463b      	mov	r3, r7
 23fb3cc:	4639      	mov	r1, r7
 23fb3ce:	47a0      	blx	r4
    endWrite();
 23fb3d0:	4628      	mov	r0, r5
 23fb3d2:	682b      	ldr	r3, [r5, #0]
 23fb3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb3d6:	b002      	add	sp, #8
 23fb3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fb3dc:	4718      	bx	r3

023fb3de <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fb3de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb3e2:	4617      	mov	r7, r2
 23fb3e4:	4604      	mov	r4, r0
 23fb3e6:	461d      	mov	r5, r3
 23fb3e8:	460e      	mov	r6, r1
    startWrite();
 23fb3ea:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fb3ec:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fb3f0:	695b      	ldr	r3, [r3, #20]
 23fb3f2:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fb3f4:	e9cd 7800 	strd	r7, r8, [sp]
 23fb3f8:	6822      	ldr	r2, [r4, #0]
 23fb3fa:	1e6b      	subs	r3, r5, #1
 23fb3fc:	4433      	add	r3, r6
 23fb3fe:	4620      	mov	r0, r4
 23fb400:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fb402:	4631      	mov	r1, r6
 23fb404:	463a      	mov	r2, r7
 23fb406:	b21b      	sxth	r3, r3
 23fb408:	47a8      	blx	r5
    endWrite();
 23fb40a:	4620      	mov	r0, r4
 23fb40c:	6823      	ldr	r3, [r4, #0]
 23fb40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb410:	b002      	add	sp, #8
 23fb412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fb416:	4718      	bx	r3

023fb418 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fb418:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fb41c:	461e      	mov	r6, r3
    startWrite();
 23fb41e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fb420:	460c      	mov	r4, r1
    startWrite();
 23fb422:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fb424:	4605      	mov	r5, r0
 23fb426:	4617      	mov	r7, r2
 23fb428:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fb42c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fb430:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fb432:	4426      	add	r6, r4
 23fb434:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fb436:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fb438:	da0b      	bge.n	23fb452 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fb43a:	f8cd 8000 	str.w	r8, [sp]
 23fb43e:	4621      	mov	r1, r4
 23fb440:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fb444:	463a      	mov	r2, r7
 23fb446:	464b      	mov	r3, r9
 23fb448:	4628      	mov	r0, r5
 23fb44a:	3401      	adds	r4, #1
 23fb44c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fb44e:	b224      	sxth	r4, r4
 23fb450:	e7f0      	b.n	23fb434 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fb452:	4628      	mov	r0, r5
 23fb454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb456:	b002      	add	sp, #8
 23fb458:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fb45c:	4718      	bx	r3

023fb45e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fb45e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fb460:	9101      	str	r1, [sp, #4]
 23fb462:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fb466:	6802      	ldr	r2, [r0, #0]
 23fb468:	9100      	str	r1, [sp, #0]
 23fb46a:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fb46c:	2200      	movs	r2, #0
 23fb46e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb472:	4611      	mov	r1, r2
 23fb474:	47a0      	blx	r4
}
 23fb476:	b002      	add	sp, #8
 23fb478:	bd10      	pop	{r4, pc}

023fb47a <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fb47a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fb47e:	4299      	cmp	r1, r3
        uint16_t color) {
 23fb480:	4616      	mov	r6, r2
 23fb482:	4680      	mov	r8, r0
 23fb484:	460d      	mov	r5, r1
 23fb486:	461c      	mov	r4, r3
 23fb488:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fb48c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fb490:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fb492:	d112      	bne.n	23fb4ba <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fb494:	42be      	cmp	r6, r7
 23fb496:	bfc2      	ittt	gt
 23fb498:	4633      	movgt	r3, r6
 23fb49a:	463e      	movgt	r6, r7
 23fb49c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fb49e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fb4a2:	1c7b      	adds	r3, r7, #1
 23fb4a4:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fb4a6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fb4a8:	4632      	mov	r2, r6
 23fb4aa:	4629      	mov	r1, r5
 23fb4ac:	4640      	mov	r0, r8
 23fb4ae:	46a4      	mov	ip, r4
 23fb4b0:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23fb4b2:	b003      	add	sp, #12
 23fb4b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fb4b8:	4760      	bx	ip
    } else if(y0 == y1){
 23fb4ba:	42be      	cmp	r6, r7
 23fb4bc:	d10a      	bne.n	23fb4d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23fb4be:	4299      	cmp	r1, r3
 23fb4c0:	bfc2      	ittt	gt
 23fb4c2:	460b      	movgt	r3, r1
 23fb4c4:	4625      	movgt	r5, r4
 23fb4c6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fb4c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fb4cc:	1c63      	adds	r3, r4, #1
 23fb4ce:	1b5b      	subs	r3, r3, r5
 23fb4d0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fb4d2:	e7e9      	b.n	23fb4a8 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23fb4d4:	6953      	ldr	r3, [r2, #20]
 23fb4d6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23fb4d8:	e9cd 7900 	strd	r7, r9, [sp]
 23fb4dc:	f8d8 3000 	ldr.w	r3, [r8]
 23fb4e0:	4640      	mov	r0, r8
 23fb4e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fb4e4:	4632      	mov	r2, r6
 23fb4e6:	4623      	mov	r3, r4
 23fb4e8:	4629      	mov	r1, r5
 23fb4ea:	47b8      	blx	r7
        endWrite();
 23fb4ec:	4640      	mov	r0, r8
 23fb4ee:	f8d8 3000 	ldr.w	r3, [r8]
 23fb4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb4f4:	b003      	add	sp, #12
 23fb4f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23fb4fa:	4718      	bx	r3

023fb4fc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fb4fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fb500:	4604      	mov	r4, r0
 23fb502:	460f      	mov	r7, r1
 23fb504:	4616      	mov	r6, r2
 23fb506:	461d      	mov	r5, r3
    startWrite();
 23fb508:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fb50a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fb50e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fb510:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23fb514:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23fb516:	6823      	ldr	r3, [r4, #0]
 23fb518:	f8cd 8000 	str.w	r8, [sp]
 23fb51c:	4632      	mov	r2, r6
 23fb51e:	4639      	mov	r1, r7
 23fb520:	4620      	mov	r0, r4
 23fb522:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fb526:	462b      	mov	r3, r5
 23fb528:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23fb52a:	6823      	ldr	r3, [r4, #0]
 23fb52c:	f109 32ff 	add.w	r2, r9, #4294967295
 23fb530:	f8cd 8000 	str.w	r8, [sp]
 23fb534:	4432      	add	r2, r6
 23fb536:	4639      	mov	r1, r7
 23fb538:	4620      	mov	r0, r4
 23fb53a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fb53e:	b212      	sxth	r2, r2
 23fb540:	462b      	mov	r3, r5
 23fb542:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23fb544:	6823      	ldr	r3, [r4, #0]
 23fb546:	f8cd 8000 	str.w	r8, [sp]
 23fb54a:	4632      	mov	r2, r6
 23fb54c:	4639      	mov	r1, r7
 23fb54e:	4620      	mov	r0, r4
 23fb550:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fb554:	464b      	mov	r3, r9
 23fb556:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23fb558:	1e6b      	subs	r3, r5, #1
 23fb55a:	19d9      	adds	r1, r3, r7
 23fb55c:	6823      	ldr	r3, [r4, #0]
 23fb55e:	f8cd 8000 	str.w	r8, [sp]
 23fb562:	4620      	mov	r0, r4
 23fb564:	6a1d      	ldr	r5, [r3, #32]
 23fb566:	4632      	mov	r2, r6
 23fb568:	464b      	mov	r3, r9
 23fb56a:	b209      	sxth	r1, r1
 23fb56c:	47a8      	blx	r5
    endWrite();
 23fb56e:	4620      	mov	r0, r4
 23fb570:	6823      	ldr	r3, [r4, #0]
 23fb572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb574:	b002      	add	sp, #8
 23fb576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fb57a:	4718      	bx	r3

023fb57c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23fb57c:	4770      	bx	lr

023fb57e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23fb57e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23fb582:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23fb586:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23fb588:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23fb58c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23fb58e:	bf59      	ittee	pl
 23fb590:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23fb592:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23fb594:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23fb596:	81c3      	strhmi	r3, [r0, #14]
}
 23fb598:	4770      	bx	lr
	...

023fb59c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fb59c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23fb59e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23fb5a0:	2400      	movs	r4, #0
    _width    = WIDTH;
 23fb5a2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23fb5a4:	f04f 31ff 	mov.w	r1, #4294967295
WIDTH(w), HEIGHT(h)
 23fb5a8:	4d05      	ldr	r5, [pc, #20]	; (23fb5c0 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fb5aa:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23fb5ac:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23fb5ae:	4a05      	ldr	r2, [pc, #20]	; (23fb5c4 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fb5b0:	6044      	str	r4, [r0, #4]
 23fb5b2:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23fb5b6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23fb5b8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23fb5ba:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23fb5bc:	6204      	str	r4, [r0, #32]
}
 23fb5be:	bd30      	pop	{r4, r5, pc}
 23fb5c0:	023ffa84 	.word	0x023ffa84
 23fb5c4:	01000101 	.word	0x01000101

023fb5c8 <_ZN12Adafruit_GFX10drawCircleEssst>:
        uint16_t color) {
 23fb5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb5cc:	4604      	mov	r4, r0
 23fb5ce:	4616      	mov	r6, r2
 23fb5d0:	4689      	mov	r9, r1
    int16_t f = 1 - r;
 23fb5d2:	b29d      	uxth	r5, r3
 23fb5d4:	f1c5 0201 	rsb	r2, r5, #1
        uint16_t color) {
 23fb5d8:	461f      	mov	r7, r3
    int16_t f = 1 - r;
 23fb5da:	b213      	sxth	r3, r2
    int16_t ddF_y = -2 * r;
 23fb5dc:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
        uint16_t color) {
 23fb5e0:	b087      	sub	sp, #28
    int16_t ddF_y = -2 * r;
 23fb5e2:	0052      	lsls	r2, r2, #1
    int16_t f = 1 - r;
 23fb5e4:	9301      	str	r3, [sp, #4]
    int16_t ddF_y = -2 * r;
 23fb5e6:	b213      	sxth	r3, r2
    startWrite();
 23fb5e8:	6802      	ldr	r2, [r0, #0]
    int16_t ddF_y = -2 * r;
 23fb5ea:	9304      	str	r3, [sp, #16]
    startWrite();
 23fb5ec:	6952      	ldr	r2, [r2, #20]
        uint16_t color) {
 23fb5ee:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
    startWrite();
 23fb5f2:	4790      	blx	r2
    writePixel(x0  , y0+r, color);
 23fb5f4:	6821      	ldr	r1, [r4, #0]
 23fb5f6:	b2b3      	uxth	r3, r6
 23fb5f8:	fa15 f286 	uxtah	r2, r5, r6
 23fb5fc:	f8d1 8018 	ldr.w	r8, [r1, #24]
 23fb600:	4620      	mov	r0, r4
 23fb602:	4649      	mov	r1, r9
 23fb604:	9300      	str	r3, [sp, #0]
 23fb606:	b212      	sxth	r2, r2
 23fb608:	465b      	mov	r3, fp
 23fb60a:	47c0      	blx	r8
    writePixel(x0  , y0-r, color);
 23fb60c:	9b00      	ldr	r3, [sp, #0]
 23fb60e:	6821      	ldr	r1, [r4, #0]
 23fb610:	1b5a      	subs	r2, r3, r5
 23fb612:	f8d1 8018 	ldr.w	r8, [r1, #24]
 23fb616:	465b      	mov	r3, fp
 23fb618:	4649      	mov	r1, r9
 23fb61a:	4620      	mov	r0, r4
 23fb61c:	b212      	sxth	r2, r2
 23fb61e:	47c0      	blx	r8
    writePixel(x0+r, y0  , color);
 23fb620:	6822      	ldr	r2, [r4, #0]
 23fb622:	fa15 f189 	uxtah	r1, r5, r9
 23fb626:	465b      	mov	r3, fp
 23fb628:	4620      	mov	r0, r4
 23fb62a:	fa1f f889 	uxth.w	r8, r9
 23fb62e:	b209      	sxth	r1, r1
 23fb630:	f8d2 9018 	ldr.w	r9, [r2, #24]
 23fb634:	4632      	mov	r2, r6
 23fb636:	47c8      	blx	r9
    writePixel(x0-r, y0  , color);
 23fb638:	6822      	ldr	r2, [r4, #0]
 23fb63a:	eba8 0105 	sub.w	r1, r8, r5
 23fb63e:	465b      	mov	r3, fp
 23fb640:	6995      	ldr	r5, [r2, #24]
 23fb642:	4620      	mov	r0, r4
 23fb644:	4632      	mov	r2, r6
 23fb646:	b209      	sxth	r1, r1
 23fb648:	47a8      	blx	r5
    int16_t x = 0;
 23fb64a:	2300      	movs	r3, #0
 23fb64c:	9303      	str	r3, [sp, #12]
    while (x<y) {
 23fb64e:	9b03      	ldr	r3, [sp, #12]
 23fb650:	42bb      	cmp	r3, r7
 23fb652:	da76      	bge.n	23fb742 <_ZN12Adafruit_GFX10drawCircleEssst+0x17a>
        if (f >= 0) {
 23fb654:	9b01      	ldr	r3, [sp, #4]
 23fb656:	2b00      	cmp	r3, #0
 23fb658:	db0a      	blt.n	23fb670 <_ZN12Adafruit_GFX10drawCircleEssst+0xa8>
            ddF_y += 2;
 23fb65a:	9a04      	ldr	r2, [sp, #16]
            y--;
 23fb65c:	3f01      	subs	r7, #1
            ddF_y += 2;
 23fb65e:	3202      	adds	r2, #2
 23fb660:	b213      	sxth	r3, r2
 23fb662:	9304      	str	r3, [sp, #16]
            f += ddF_y;
 23fb664:	9b01      	ldr	r3, [sp, #4]
            y--;
 23fb666:	b23f      	sxth	r7, r7
            f += ddF_y;
 23fb668:	fa13 f282 	uxtah	r2, r3, r2
 23fb66c:	b213      	sxth	r3, r2
 23fb66e:	9301      	str	r3, [sp, #4]
        x++;
 23fb670:	9a03      	ldr	r2, [sp, #12]
        writePixel(x0 + x, y0 + y, color);
 23fb672:	6821      	ldr	r1, [r4, #0]
 23fb674:	3201      	adds	r2, #1
 23fb676:	b213      	sxth	r3, r2
 23fb678:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
 23fb67a:	9b01      	ldr	r3, [sp, #4]
 23fb67c:	b296      	uxth	r6, r2
 23fb67e:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        f += ddF_x;
 23fb682:	3201      	adds	r2, #1
 23fb684:	b213      	sxth	r3, r2
 23fb686:	9301      	str	r3, [sp, #4]
        writePixel(x0 + x, y0 + y, color);
 23fb688:	9b00      	ldr	r3, [sp, #0]
 23fb68a:	eb08 0a06 	add.w	sl, r8, r6
 23fb68e:	fa13 f287 	uxtah	r2, r3, r7
 23fb692:	fa0f fa8a 	sxth.w	sl, sl
 23fb696:	b212      	sxth	r2, r2
 23fb698:	465b      	mov	r3, fp
 23fb69a:	4620      	mov	r0, r4
 23fb69c:	698d      	ldr	r5, [r1, #24]
 23fb69e:	9202      	str	r2, [sp, #8]
 23fb6a0:	4651      	mov	r1, sl
 23fb6a2:	47a8      	blx	r5
        writePixel(x0 - x, y0 + y, color);
 23fb6a4:	eba8 0906 	sub.w	r9, r8, r6
 23fb6a8:	6821      	ldr	r1, [r4, #0]
 23fb6aa:	fa0f f989 	sxth.w	r9, r9
 23fb6ae:	465b      	mov	r3, fp
 23fb6b0:	4620      	mov	r0, r4
 23fb6b2:	698d      	ldr	r5, [r1, #24]
 23fb6b4:	9a02      	ldr	r2, [sp, #8]
 23fb6b6:	4649      	mov	r1, r9
 23fb6b8:	47a8      	blx	r5
        writePixel(x0 + x, y0 - y, color);
 23fb6ba:	b2bb      	uxth	r3, r7
 23fb6bc:	9302      	str	r3, [sp, #8]
 23fb6be:	6821      	ldr	r1, [r4, #0]
 23fb6c0:	9b00      	ldr	r3, [sp, #0]
 23fb6c2:	9a02      	ldr	r2, [sp, #8]
 23fb6c4:	4620      	mov	r0, r4
 23fb6c6:	1a9a      	subs	r2, r3, r2
 23fb6c8:	698b      	ldr	r3, [r1, #24]
 23fb6ca:	b212      	sxth	r2, r2
 23fb6cc:	461d      	mov	r5, r3
 23fb6ce:	4651      	mov	r1, sl
 23fb6d0:	465b      	mov	r3, fp
 23fb6d2:	9205      	str	r2, [sp, #20]
 23fb6d4:	47a8      	blx	r5
        writePixel(x0 - x, y0 - y, color);
 23fb6d6:	6821      	ldr	r1, [r4, #0]
 23fb6d8:	465b      	mov	r3, fp
 23fb6da:	4620      	mov	r0, r4
 23fb6dc:	f8d1 a018 	ldr.w	sl, [r1, #24]
 23fb6e0:	9a05      	ldr	r2, [sp, #20]
 23fb6e2:	4649      	mov	r1, r9
 23fb6e4:	47d0      	blx	sl
        writePixel(x0 + y, y0 + x, color);
 23fb6e6:	9b02      	ldr	r3, [sp, #8]
 23fb6e8:	6821      	ldr	r1, [r4, #0]
 23fb6ea:	eb08 0903 	add.w	r9, r8, r3
 23fb6ee:	9b00      	ldr	r3, [sp, #0]
 23fb6f0:	fa0f f989 	sxth.w	r9, r9
 23fb6f4:	199a      	adds	r2, r3, r6
 23fb6f6:	b212      	sxth	r2, r2
 23fb6f8:	465b      	mov	r3, fp
 23fb6fa:	4620      	mov	r0, r4
 23fb6fc:	f8d1 a018 	ldr.w	sl, [r1, #24]
 23fb700:	9205      	str	r2, [sp, #20]
 23fb702:	4649      	mov	r1, r9
 23fb704:	47d0      	blx	sl
        writePixel(x0 - y, y0 + x, color);
 23fb706:	9b02      	ldr	r3, [sp, #8]
 23fb708:	6821      	ldr	r1, [r4, #0]
 23fb70a:	eba8 0503 	sub.w	r5, r8, r3
 23fb70e:	b22d      	sxth	r5, r5
 23fb710:	465b      	mov	r3, fp
 23fb712:	4620      	mov	r0, r4
 23fb714:	f8d1 a018 	ldr.w	sl, [r1, #24]
 23fb718:	9a05      	ldr	r2, [sp, #20]
 23fb71a:	4629      	mov	r1, r5
 23fb71c:	47d0      	blx	sl
        writePixel(x0 + y, y0 - x, color);
 23fb71e:	9b00      	ldr	r3, [sp, #0]
 23fb720:	6821      	ldr	r1, [r4, #0]
 23fb722:	1b9a      	subs	r2, r3, r6
 23fb724:	b212      	sxth	r2, r2
 23fb726:	465b      	mov	r3, fp
 23fb728:	4620      	mov	r0, r4
 23fb72a:	698e      	ldr	r6, [r1, #24]
 23fb72c:	9202      	str	r2, [sp, #8]
 23fb72e:	4649      	mov	r1, r9
 23fb730:	47b0      	blx	r6
        writePixel(x0 - y, y0 - x, color);
 23fb732:	6821      	ldr	r1, [r4, #0]
 23fb734:	465b      	mov	r3, fp
 23fb736:	698e      	ldr	r6, [r1, #24]
 23fb738:	4620      	mov	r0, r4
 23fb73a:	4629      	mov	r1, r5
 23fb73c:	9a02      	ldr	r2, [sp, #8]
 23fb73e:	47b0      	blx	r6
    while (x<y) {
 23fb740:	e785      	b.n	23fb64e <_ZN12Adafruit_GFX10drawCircleEssst+0x86>
    endWrite();
 23fb742:	4620      	mov	r0, r4
 23fb744:	6823      	ldr	r3, [r4, #0]
 23fb746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb748:	b007      	add	sp, #28
 23fb74a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fb74e:	4718      	bx	r3

023fb750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>:
        int16_t r, uint8_t cornername, uint16_t color) {
 23fb750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb754:	461c      	mov	r4, r3
 23fb756:	b087      	sub	sp, #28
 23fb758:	9200      	str	r2, [sp, #0]
    int16_t f     = 1 - r;
 23fb75a:	b2a2      	uxth	r2, r4
 23fb75c:	f1c2 0601 	rsb	r6, r2, #1
    int16_t ddF_y = -2 * r;
 23fb760:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 23fb764:	0052      	lsls	r2, r2, #1
 23fb766:	b212      	sxth	r2, r2
 23fb768:	9203      	str	r2, [sp, #12]
    int16_t x     = 0;
 23fb76a:	2200      	movs	r2, #0
        int16_t r, uint8_t cornername, uint16_t color) {
 23fb76c:	4680      	mov	r8, r0
 23fb76e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    int16_t x     = 0;
 23fb772:	9202      	str	r2, [sp, #8]
        int16_t r, uint8_t cornername, uint16_t color) {
 23fb774:	9301      	str	r3, [sp, #4]
        if (cornername & 0x4) {
 23fb776:	9a01      	ldr	r2, [sp, #4]
        int16_t r, uint8_t cornername, uint16_t color) {
 23fb778:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
        if (cornername & 0x4) {
 23fb77c:	f002 0204 	and.w	r2, r2, #4
    int16_t f     = 1 - r;
 23fb780:	b236      	sxth	r6, r6
        if (cornername & 0x4) {
 23fb782:	9204      	str	r2, [sp, #16]
            writePixel(x0 + x, y0 + y, color);
 23fb784:	b28f      	uxth	r7, r1
    while (x<y) {
 23fb786:	9a02      	ldr	r2, [sp, #8]
 23fb788:	42a2      	cmp	r2, r4
 23fb78a:	f280 8099 	bge.w	23fb8c0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x170>
        if (f >= 0) {
 23fb78e:	2e00      	cmp	r6, #0
 23fb790:	db08      	blt.n	23fb7a4 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x54>
            ddF_y += 2;
 23fb792:	9a03      	ldr	r2, [sp, #12]
            y--;
 23fb794:	3c01      	subs	r4, #1
            ddF_y += 2;
 23fb796:	3202      	adds	r2, #2
 23fb798:	b211      	sxth	r1, r2
            f     += ddF_y;
 23fb79a:	fa16 f682 	uxtah	r6, r6, r2
            y--;
 23fb79e:	b224      	sxth	r4, r4
            ddF_y += 2;
 23fb7a0:	9103      	str	r1, [sp, #12]
            f     += ddF_y;
 23fb7a2:	b236      	sxth	r6, r6
        x++;
 23fb7a4:	9a02      	ldr	r2, [sp, #8]
 23fb7a6:	3201      	adds	r2, #1
 23fb7a8:	b295      	uxth	r5, r2
 23fb7aa:	b212      	sxth	r2, r2
 23fb7ac:	9202      	str	r2, [sp, #8]
        ddF_x += 2;
 23fb7ae:	eb06 0645 	add.w	r6, r6, r5, lsl #1
        if (cornername & 0x4) {
 23fb7b2:	9a04      	ldr	r2, [sp, #16]
        f     += ddF_x;
 23fb7b4:	3601      	adds	r6, #1
 23fb7b6:	b236      	sxth	r6, r6
        if (cornername & 0x4) {
 23fb7b8:	b1f2      	cbz	r2, 23fb7f8 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xa8>
            writePixel(x0 + x, y0 + y, color);
 23fb7ba:	9a00      	ldr	r2, [sp, #0]
 23fb7bc:	f8d8 0000 	ldr.w	r0, [r8]
 23fb7c0:	fa1f fa84 	uxth.w	sl, r4
 23fb7c4:	fa1a f282 	uxtah	r2, sl, r2
 23fb7c8:	1979      	adds	r1, r7, r5
 23fb7ca:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fb7ce:	f8bd 9000 	ldrh.w	r9, [sp]
 23fb7d2:	4640      	mov	r0, r8
 23fb7d4:	9305      	str	r3, [sp, #20]
 23fb7d6:	b212      	sxth	r2, r2
 23fb7d8:	b209      	sxth	r1, r1
 23fb7da:	47d8      	blx	fp
            writePixel(x0 + y, y0 + x, color);
 23fb7dc:	f8d8 3000 	ldr.w	r3, [r8]
 23fb7e0:	eb09 0205 	add.w	r2, r9, r5
 23fb7e4:	eb07 010a 	add.w	r1, r7, sl
 23fb7e8:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fb7ec:	4640      	mov	r0, r8
 23fb7ee:	9b05      	ldr	r3, [sp, #20]
 23fb7f0:	b212      	sxth	r2, r2
 23fb7f2:	b209      	sxth	r1, r1
 23fb7f4:	47d8      	blx	fp
 23fb7f6:	9b05      	ldr	r3, [sp, #20]
        if (cornername & 0x2) {
 23fb7f8:	9a01      	ldr	r2, [sp, #4]
 23fb7fa:	0790      	lsls	r0, r2, #30
 23fb7fc:	d51d      	bpl.n	23fb83a <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xea>
            writePixel(x0 + x, y0 - y, color);
 23fb7fe:	f8bd 9000 	ldrh.w	r9, [sp]
 23fb802:	f8d8 0000 	ldr.w	r0, [r8]
 23fb806:	fa1f fa84 	uxth.w	sl, r4
 23fb80a:	eba9 020a 	sub.w	r2, r9, sl
 23fb80e:	1979      	adds	r1, r7, r5
 23fb810:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fb814:	9305      	str	r3, [sp, #20]
 23fb816:	4640      	mov	r0, r8
 23fb818:	b212      	sxth	r2, r2
 23fb81a:	b209      	sxth	r1, r1
 23fb81c:	47d8      	blx	fp
            writePixel(x0 + y, y0 - x, color);
 23fb81e:	f8d8 3000 	ldr.w	r3, [r8]
 23fb822:	eba9 0205 	sub.w	r2, r9, r5
 23fb826:	eb07 010a 	add.w	r1, r7, sl
 23fb82a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fb82e:	4640      	mov	r0, r8
 23fb830:	9b05      	ldr	r3, [sp, #20]
 23fb832:	b212      	sxth	r2, r2
 23fb834:	b209      	sxth	r1, r1
 23fb836:	47d8      	blx	fp
 23fb838:	9b05      	ldr	r3, [sp, #20]
        if (cornername & 0x8) {
 23fb83a:	9a01      	ldr	r2, [sp, #4]
 23fb83c:	0711      	lsls	r1, r2, #28
 23fb83e:	d51e      	bpl.n	23fb87e <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x12e>
            writePixel(x0 - y, y0 + x, color);
 23fb840:	9a00      	ldr	r2, [sp, #0]
 23fb842:	f8d8 0000 	ldr.w	r0, [r8]
 23fb846:	fa1f f984 	uxth.w	r9, r4
 23fb84a:	fa15 f282 	uxtah	r2, r5, r2
 23fb84e:	eba7 0109 	sub.w	r1, r7, r9
 23fb852:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fb856:	f8bd a000 	ldrh.w	sl, [sp]
 23fb85a:	4640      	mov	r0, r8
 23fb85c:	9305      	str	r3, [sp, #20]
 23fb85e:	b212      	sxth	r2, r2
 23fb860:	b209      	sxth	r1, r1
 23fb862:	47d8      	blx	fp
            writePixel(x0 - x, y0 + y, color);
 23fb864:	f8d8 3000 	ldr.w	r3, [r8]
 23fb868:	eb09 020a 	add.w	r2, r9, sl
 23fb86c:	1b79      	subs	r1, r7, r5
 23fb86e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fb872:	4640      	mov	r0, r8
 23fb874:	9b05      	ldr	r3, [sp, #20]
 23fb876:	b212      	sxth	r2, r2
 23fb878:	b209      	sxth	r1, r1
 23fb87a:	47d8      	blx	fp
 23fb87c:	9b05      	ldr	r3, [sp, #20]
        if (cornername & 0x1) {
 23fb87e:	9a01      	ldr	r2, [sp, #4]
 23fb880:	07d2      	lsls	r2, r2, #31
 23fb882:	d580      	bpl.n	23fb786 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x36>
            writePixel(x0 - y, y0 - x, color);
 23fb884:	f8bd 9000 	ldrh.w	r9, [sp]
 23fb888:	f8d8 0000 	ldr.w	r0, [r8]
 23fb88c:	fa1f fa84 	uxth.w	sl, r4
 23fb890:	eba9 0205 	sub.w	r2, r9, r5
 23fb894:	eba7 010a 	sub.w	r1, r7, sl
 23fb898:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fb89c:	9305      	str	r3, [sp, #20]
 23fb89e:	4640      	mov	r0, r8
 23fb8a0:	b212      	sxth	r2, r2
 23fb8a2:	b209      	sxth	r1, r1
 23fb8a4:	47d8      	blx	fp
            writePixel(x0 - x, y0 - y, color);
 23fb8a6:	1b79      	subs	r1, r7, r5
 23fb8a8:	f8d8 5000 	ldr.w	r5, [r8]
 23fb8ac:	eba9 020a 	sub.w	r2, r9, sl
 23fb8b0:	9b05      	ldr	r3, [sp, #20]
 23fb8b2:	4640      	mov	r0, r8
 23fb8b4:	69ad      	ldr	r5, [r5, #24]
 23fb8b6:	b212      	sxth	r2, r2
 23fb8b8:	b209      	sxth	r1, r1
 23fb8ba:	47a8      	blx	r5
 23fb8bc:	9b05      	ldr	r3, [sp, #20]
 23fb8be:	e762      	b.n	23fb786 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x36>
}
 23fb8c0:	b007      	add	sp, #28
 23fb8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
 23fb8c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb8ca:	461c      	mov	r4, r3
 23fb8cc:	b08b      	sub	sp, #44	; 0x2c
 23fb8ce:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 23fb8d2:	4683      	mov	fp, r0
 23fb8d4:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
 23fb8d6:	b2a3      	uxth	r3, r4
 23fb8d8:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
 23fb8dc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 23fb8e0:	005b      	lsls	r3, r3, #1
 23fb8e2:	b21b      	sxth	r3, r3
 23fb8e4:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
 23fb8e6:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  uint8_t corners, int16_t delta, uint16_t color) {
 23fb8ea:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
 23fb8ec:	3301      	adds	r3, #1
 23fb8ee:	b29b      	uxth	r3, r3
 23fb8f0:	9305      	str	r3, [sp, #20]
 23fb8f2:	b293      	uxth	r3, r2
 23fb8f4:	9306      	str	r3, [sp, #24]
 23fb8f6:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
 23fb8f8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
 23fb8fc:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
 23fb8fe:	2300      	movs	r3, #0
 23fb900:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
 23fb902:	f001 0301 	and.w	r3, r1, #1
 23fb906:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
 23fb908:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
 23fb90c:	f001 0302 	and.w	r3, r1, #2
    int16_t f     = 1 - r;
 23fb910:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
 23fb912:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
 23fb914:	9b02      	ldr	r3, [sp, #8]
 23fb916:	42a3      	cmp	r3, r4
 23fb918:	da6f      	bge.n	23fb9fa <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
 23fb91a:	2d00      	cmp	r5, #0
 23fb91c:	db6b      	blt.n	23fb9f6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
 23fb91e:	9b07      	ldr	r3, [sp, #28]
            y--;
 23fb920:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
 23fb922:	3302      	adds	r3, #2
 23fb924:	b21a      	sxth	r2, r3
            f     += ddF_y;
 23fb926:	fa15 f583 	uxtah	r5, r5, r3
            y--;
 23fb92a:	b236      	sxth	r6, r6
            ddF_y += 2;
 23fb92c:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
 23fb92e:	b22d      	sxth	r5, r5
        x++;
 23fb930:	9f02      	ldr	r7, [sp, #8]
 23fb932:	3701      	adds	r7, #1
 23fb934:	fa1f f987 	uxth.w	r9, r7
 23fb938:	b23b      	sxth	r3, r7
        ddF_x += 2;
 23fb93a:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
 23fb93e:	3501      	adds	r5, #1
        if(x < (y + 1)) {
 23fb940:	429e      	cmp	r6, r3
 23fb942:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
 23fb944:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
 23fb946:	db29      	blt.n	23fb99c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
 23fb948:	9b08      	ldr	r3, [sp, #32]
 23fb94a:	b193      	cbz	r3, 23fb972 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
 23fb94c:	9804      	ldr	r0, [sp, #16]
 23fb94e:	9906      	ldr	r1, [sp, #24]
 23fb950:	9000      	str	r0, [sp, #0]
 23fb952:	f8db 0000 	ldr.w	r0, [fp]
 23fb956:	9b05      	ldr	r3, [sp, #20]
 23fb958:	6a00      	ldr	r0, [r0, #32]
 23fb95a:	b2b2      	uxth	r2, r6
 23fb95c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 23fb960:	1a8a      	subs	r2, r1, r2
 23fb962:	eb09 0108 	add.w	r1, r9, r8
 23fb966:	4607      	mov	r7, r0
 23fb968:	b21b      	sxth	r3, r3
 23fb96a:	4658      	mov	r0, fp
 23fb96c:	b212      	sxth	r2, r2
 23fb96e:	b209      	sxth	r1, r1
 23fb970:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
 23fb972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb974:	b193      	cbz	r3, 23fb99c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
 23fb976:	9804      	ldr	r0, [sp, #16]
 23fb978:	9906      	ldr	r1, [sp, #24]
 23fb97a:	9b05      	ldr	r3, [sp, #20]
 23fb97c:	b2b2      	uxth	r2, r6
 23fb97e:	9000      	str	r0, [sp, #0]
 23fb980:	f8db 0000 	ldr.w	r0, [fp]
 23fb984:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 23fb988:	1a8a      	subs	r2, r1, r2
 23fb98a:	eba8 0109 	sub.w	r1, r8, r9
 23fb98e:	b21b      	sxth	r3, r3
 23fb990:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fb994:	b212      	sxth	r2, r2
 23fb996:	4658      	mov	r0, fp
 23fb998:	b209      	sxth	r1, r1
 23fb99a:	47c8      	blx	r9
        if(y != py) {
 23fb99c:	42b4      	cmp	r4, r6
 23fb99e:	d020      	beq.n	23fb9e2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
 23fb9a0:	9b08      	ldr	r3, [sp, #32]
 23fb9a2:	b173      	cbz	r3, 23fb9c2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
 23fb9a4:	9a04      	ldr	r2, [sp, #16]
 23fb9a6:	f8db 3000 	ldr.w	r3, [fp]
 23fb9aa:	9200      	str	r2, [sp, #0]
 23fb9ac:	eb08 0104 	add.w	r1, r8, r4
 23fb9b0:	f8d3 9020 	ldr.w	r9, [r3, #32]
 23fb9b4:	4658      	mov	r0, fp
 23fb9b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 23fb9ba:	fa0f f28a 	sxth.w	r2, sl
 23fb9be:	b209      	sxth	r1, r1
 23fb9c0:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
 23fb9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb9c4:	b16b      	cbz	r3, 23fb9e2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
 23fb9c6:	9a04      	ldr	r2, [sp, #16]
 23fb9c8:	f8db 3000 	ldr.w	r3, [fp]
 23fb9cc:	eba8 0104 	sub.w	r1, r8, r4
 23fb9d0:	9200      	str	r2, [sp, #0]
 23fb9d2:	6a1c      	ldr	r4, [r3, #32]
 23fb9d4:	4658      	mov	r0, fp
 23fb9d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 23fb9da:	fa0f f28a 	sxth.w	r2, sl
 23fb9de:	b209      	sxth	r1, r1
 23fb9e0:	47a0      	blx	r4
 23fb9e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 23fb9e6:	fa1f fa83 	uxth.w	sl, r3
 23fb9ea:	9b03      	ldr	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
 23fb9ec:	4634      	mov	r4, r6
 23fb9ee:	3302      	adds	r3, #2
 23fb9f0:	b29b      	uxth	r3, r3
 23fb9f2:	9303      	str	r3, [sp, #12]
 23fb9f4:	e78e      	b.n	23fb914 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
 23fb9f6:	4626      	mov	r6, r4
 23fb9f8:	e79a      	b.n	23fb930 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
 23fb9fa:	b00b      	add	sp, #44	; 0x2c
 23fb9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fba00 <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
 23fba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fba04:	461e      	mov	r6, r3
 23fba06:	4604      	mov	r4, r0
 23fba08:	4615      	mov	r5, r2
    startWrite();
 23fba0a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fba0c:	b086      	sub	sp, #24
 23fba0e:	9105      	str	r1, [sp, #20]
    startWrite();
 23fba10:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fba12:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
    startWrite();
 23fba16:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
 23fba18:	b2b2      	uxth	r2, r6
 23fba1a:	6820      	ldr	r0, [r4, #0]
 23fba1c:	0053      	lsls	r3, r2, #1
 23fba1e:	9700      	str	r7, [sp, #0]
 23fba20:	1aaa      	subs	r2, r5, r2
 23fba22:	3301      	adds	r3, #1
 23fba24:	f8d0 8020 	ldr.w	r8, [r0, #32]
 23fba28:	9905      	ldr	r1, [sp, #20]
 23fba2a:	4620      	mov	r0, r4
 23fba2c:	b21b      	sxth	r3, r3
 23fba2e:	b212      	sxth	r2, r2
 23fba30:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
 23fba32:	2303      	movs	r3, #3
 23fba34:	2200      	movs	r2, #0
 23fba36:	4620      	mov	r0, r4
 23fba38:	e9cd 3200 	strd	r3, r2, [sp]
 23fba3c:	9905      	ldr	r1, [sp, #20]
 23fba3e:	4633      	mov	r3, r6
 23fba40:	462a      	mov	r2, r5
 23fba42:	9702      	str	r7, [sp, #8]
 23fba44:	f7ff ff3f 	bl	23fb8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
 23fba48:	4620      	mov	r0, r4
 23fba4a:	6823      	ldr	r3, [r4, #0]
 23fba4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fba4e:	b006      	add	sp, #24
 23fba50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fba54:	4718      	bx	r3

023fba56 <_ZN12Adafruit_GFX13drawRoundRectEssssst>:
  int16_t h, int16_t r, uint16_t color) {
 23fba56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fba5a:	b089      	sub	sp, #36	; 0x24
 23fba5c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 23fba60:	468b      	mov	fp, r1
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fba62:	4599      	cmp	r9, r3
 23fba64:	464d      	mov	r5, r9
 23fba66:	bfa8      	it	ge
 23fba68:	461d      	movge	r5, r3
  int16_t h, int16_t r, uint16_t color) {
 23fba6a:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fba6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23fba72:	106e      	asrs	r6, r5, #1
 23fba74:	428e      	cmp	r6, r1
 23fba76:	bfa8      	it	ge
 23fba78:	460e      	movge	r6, r1
  int16_t h, int16_t r, uint16_t color) {
 23fba7a:	4604      	mov	r4, r0
    startWrite();
 23fba7c:	6801      	ldr	r1, [r0, #0]
  int16_t h, int16_t r, uint16_t color) {
 23fba7e:	9205      	str	r2, [sp, #20]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fba80:	9302      	str	r3, [sp, #8]
    startWrite();
 23fba82:	6949      	ldr	r1, [r1, #20]
  int16_t h, int16_t r, uint16_t color) {
 23fba84:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
    startWrite();
 23fba88:	4788      	blx	r1
    writeFastHLine(x+r  , y    , w-2*r, color); // Top
 23fba8a:	fa1f f38b 	uxth.w	r3, fp
 23fba8e:	9304      	str	r3, [sp, #16]
 23fba90:	9b02      	ldr	r3, [sp, #8]
 23fba92:	fa1f fa86 	uxth.w	sl, r6
 23fba96:	b29b      	uxth	r3, r3
 23fba98:	9302      	str	r3, [sp, #8]
 23fba9a:	ea4f 034a 	mov.w	r3, sl, lsl #1
 23fba9e:	b29b      	uxth	r3, r3
 23fbaa0:	9303      	str	r3, [sp, #12]
 23fbaa2:	6821      	ldr	r1, [r4, #0]
 23fbaa4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 23fbaa8:	fa1a f88b 	uxtah	r8, sl, fp
 23fbaac:	1a9b      	subs	r3, r3, r2
 23fbaae:	fa0f f888 	sxth.w	r8, r8
 23fbab2:	b21b      	sxth	r3, r3
 23fbab4:	9700      	str	r7, [sp, #0]
 23fbab6:	4620      	mov	r0, r4
 23fbab8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 23fbaba:	9a05      	ldr	r2, [sp, #20]
 23fbabc:	4641      	mov	r1, r8
 23fbabe:	9307      	str	r3, [sp, #28]
 23fbac0:	47a8      	blx	r5
    writeFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 23fbac2:	9a05      	ldr	r2, [sp, #20]
 23fbac4:	6821      	ldr	r1, [r4, #0]
 23fbac6:	b295      	uxth	r5, r2
 23fbac8:	1e6a      	subs	r2, r5, #1
 23fbaca:	fa1f f389 	uxth.w	r3, r9
 23fbace:	fa12 f289 	uxtah	r2, r2, r9
 23fbad2:	9305      	str	r3, [sp, #20]
 23fbad4:	9700      	str	r7, [sp, #0]
 23fbad6:	b293      	uxth	r3, r2
 23fbad8:	4620      	mov	r0, r4
 23fbada:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 23fbade:	9306      	str	r3, [sp, #24]
 23fbae0:	4641      	mov	r1, r8
 23fbae2:	9b07      	ldr	r3, [sp, #28]
 23fbae4:	b212      	sxth	r2, r2
 23fbae6:	47c8      	blx	r9
    writeFastVLine(x    , y+r  , h-2*r, color); // Left
 23fbae8:	9903      	ldr	r1, [sp, #12]
 23fbaea:	9b05      	ldr	r3, [sp, #20]
 23fbaec:	eb0a 0205 	add.w	r2, sl, r5
 23fbaf0:	1a5b      	subs	r3, r3, r1
 23fbaf2:	6821      	ldr	r1, [r4, #0]
 23fbaf4:	b212      	sxth	r2, r2
 23fbaf6:	b21b      	sxth	r3, r3
 23fbaf8:	9700      	str	r7, [sp, #0]
 23fbafa:	4620      	mov	r0, r4
 23fbafc:	6a0d      	ldr	r5, [r1, #32]
 23fbafe:	9305      	str	r3, [sp, #20]
 23fbb00:	4659      	mov	r1, fp
 23fbb02:	9203      	str	r2, [sp, #12]
 23fbb04:	47a8      	blx	r5
    writeFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 23fbb06:	9b04      	ldr	r3, [sp, #16]
 23fbb08:	6820      	ldr	r0, [r4, #0]
 23fbb0a:	1e59      	subs	r1, r3, #1
 23fbb0c:	9b02      	ldr	r3, [sp, #8]
 23fbb0e:	9a03      	ldr	r2, [sp, #12]
 23fbb10:	4419      	add	r1, r3
 23fbb12:	9700      	str	r7, [sp, #0]
 23fbb14:	6a05      	ldr	r5, [r0, #32]
 23fbb16:	9b05      	ldr	r3, [sp, #20]
 23fbb18:	4620      	mov	r0, r4
 23fbb1a:	fa1f f981 	uxth.w	r9, r1
 23fbb1e:	9202      	str	r2, [sp, #8]
 23fbb20:	b209      	sxth	r1, r1
 23fbb22:	47a8      	blx	r5
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 23fbb24:	2301      	movs	r3, #1
 23fbb26:	4641      	mov	r1, r8
 23fbb28:	4620      	mov	r0, r4
 23fbb2a:	9a02      	ldr	r2, [sp, #8]
 23fbb2c:	9300      	str	r3, [sp, #0]
 23fbb2e:	9701      	str	r7, [sp, #4]
 23fbb30:	4633      	mov	r3, r6
 23fbb32:	f7ff fe0d 	bl	23fb750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 23fbb36:	2302      	movs	r3, #2
 23fbb38:	eba9 010a 	sub.w	r1, r9, sl
 23fbb3c:	4620      	mov	r0, r4
 23fbb3e:	9a02      	ldr	r2, [sp, #8]
 23fbb40:	b209      	sxth	r1, r1
 23fbb42:	9300      	str	r3, [sp, #0]
 23fbb44:	9701      	str	r7, [sp, #4]
 23fbb46:	4633      	mov	r3, r6
 23fbb48:	9103      	str	r1, [sp, #12]
 23fbb4a:	f7ff fe01 	bl	23fb750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 23fbb4e:	9b06      	ldr	r3, [sp, #24]
 23fbb50:	4620      	mov	r0, r4
 23fbb52:	eba3 020a 	sub.w	r2, r3, sl
 23fbb56:	2304      	movs	r3, #4
 23fbb58:	9903      	ldr	r1, [sp, #12]
 23fbb5a:	b212      	sxth	r2, r2
 23fbb5c:	9300      	str	r3, [sp, #0]
 23fbb5e:	9701      	str	r7, [sp, #4]
 23fbb60:	4633      	mov	r3, r6
 23fbb62:	9202      	str	r2, [sp, #8]
 23fbb64:	f7ff fdf4 	bl	23fb750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 23fbb68:	2308      	movs	r3, #8
 23fbb6a:	4620      	mov	r0, r4
 23fbb6c:	9300      	str	r3, [sp, #0]
 23fbb6e:	4641      	mov	r1, r8
 23fbb70:	4633      	mov	r3, r6
 23fbb72:	9a02      	ldr	r2, [sp, #8]
 23fbb74:	9701      	str	r7, [sp, #4]
 23fbb76:	f7ff fdeb 	bl	23fb750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
    endWrite();
 23fbb7a:	4620      	mov	r0, r4
 23fbb7c:	6823      	ldr	r3, [r4, #0]
 23fbb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbb80:	b009      	add	sp, #36	; 0x24
 23fbb82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fbb86:	4718      	bx	r3

023fbb88 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
  int16_t h, int16_t r, uint16_t color) {
 23fbb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbb8c:	ed2d 8b02 	vpush	{d8}
 23fbb90:	4699      	mov	r9, r3
 23fbb92:	b087      	sub	sp, #28
 23fbb94:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	; 0x48
 23fbb98:	460f      	mov	r7, r1
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fbb9a:	454d      	cmp	r5, r9
 23fbb9c:	462b      	mov	r3, r5
 23fbb9e:	bfa8      	it	ge
 23fbba0:	464b      	movge	r3, r9
  int16_t h, int16_t r, uint16_t color) {
 23fbba2:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fbba6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fbbaa:	105c      	asrs	r4, r3, #1
 23fbbac:	428c      	cmp	r4, r1
 23fbbae:	bfa8      	it	ge
 23fbbb0:	460c      	movge	r4, r1
    startWrite();
 23fbbb2:	6803      	ldr	r3, [r0, #0]
  int16_t h, int16_t r, uint16_t color) {
 23fbbb4:	4606      	mov	r6, r0
    writeFillRect(x+r, y, w-2*r, h, color);
 23fbbb6:	fa1f f884 	uxth.w	r8, r4
    startWrite();
 23fbbba:	695b      	ldr	r3, [r3, #20]
  int16_t h, int16_t r, uint16_t color) {
 23fbbbc:	4693      	mov	fp, r2
 23fbbbe:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    startWrite();
 23fbbc2:	4798      	blx	r3
    writeFillRect(x+r, y, w-2*r, h, color);
 23fbbc4:	b2bb      	uxth	r3, r7
 23fbbc6:	fa18 f787 	uxtah	r7, r8, r7
 23fbbca:	9305      	str	r3, [sp, #20]
 23fbbcc:	b23b      	sxth	r3, r7
 23fbbce:	ee08 3a10 	vmov	s16, r3
 23fbbd2:	e9cd 5a00 	strd	r5, sl, [sp]
 23fbbd6:	6831      	ldr	r1, [r6, #0]
 23fbbd8:	fa1f f389 	uxth.w	r3, r9
 23fbbdc:	ea4f 0948 	mov.w	r9, r8, lsl #1
 23fbbe0:	69ca      	ldr	r2, [r1, #28]
 23fbbe2:	fa1f f989 	uxth.w	r9, r9
 23fbbe6:	9304      	str	r3, [sp, #16]
 23fbbe8:	eba3 0309 	sub.w	r3, r3, r9
 23fbbec:	4617      	mov	r7, r2
 23fbbee:	ee18 1a10 	vmov	r1, s16
 23fbbf2:	465a      	mov	r2, fp
 23fbbf4:	4630      	mov	r0, r6
 23fbbf6:	b21b      	sxth	r3, r3
 23fbbf8:	47b8      	blx	r7
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 23fbbfa:	9b05      	ldr	r3, [sp, #20]
 23fbbfc:	3d01      	subs	r5, #1
 23fbbfe:	1e59      	subs	r1, r3, #1
 23fbc00:	9b04      	ldr	r3, [sp, #16]
 23fbc02:	eba5 0509 	sub.w	r5, r5, r9
 23fbc06:	4419      	add	r1, r3
 23fbc08:	2301      	movs	r3, #1
 23fbc0a:	b22d      	sxth	r5, r5
 23fbc0c:	eb08 020b 	add.w	r2, r8, fp
 23fbc10:	eba1 0108 	sub.w	r1, r1, r8
 23fbc14:	4630      	mov	r0, r6
 23fbc16:	b212      	sxth	r2, r2
 23fbc18:	9300      	str	r3, [sp, #0]
 23fbc1a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 23fbc1e:	4623      	mov	r3, r4
 23fbc20:	b209      	sxth	r1, r1
 23fbc22:	9204      	str	r2, [sp, #16]
 23fbc24:	f7ff fe4f 	bl	23fb8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 23fbc28:	2302      	movs	r3, #2
 23fbc2a:	4630      	mov	r0, r6
 23fbc2c:	9300      	str	r3, [sp, #0]
 23fbc2e:	ee18 1a10 	vmov	r1, s16
 23fbc32:	4623      	mov	r3, r4
 23fbc34:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 23fbc38:	9a04      	ldr	r2, [sp, #16]
 23fbc3a:	f7ff fe44 	bl	23fb8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
 23fbc3e:	4630      	mov	r0, r6
 23fbc40:	6833      	ldr	r3, [r6, #0]
 23fbc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbc44:	b007      	add	sp, #28
 23fbc46:	ecbd 8b02 	vpop	{d8}
 23fbc4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fbc4e:	4718      	bx	r3

023fbc50 <_ZN12Adafruit_GFX12drawTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 23fbc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbc54:	4604      	mov	r4, r0
 23fbc56:	4698      	mov	r8, r3
 23fbc58:	460d      	mov	r5, r1
 23fbc5a:	b085      	sub	sp, #20
 23fbc5c:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
 23fbc60:	f9bd b038 	ldrsh.w	fp, [sp, #56]	; 0x38
    drawLine(x0, y0, x1, y1, color);
 23fbc64:	6807      	ldr	r7, [r0, #0]
 23fbc66:	e9cd b600 	strd	fp, r6, [sp]
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 23fbc6a:	f9bd a040 	ldrsh.w	sl, [sp, #64]	; 0x40
 23fbc6e:	9203      	str	r2, [sp, #12]
    drawLine(x0, y0, x1, y1, color);
 23fbc70:	6cbf      	ldr	r7, [r7, #72]	; 0x48
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 23fbc72:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
    drawLine(x0, y0, x1, y1, color);
 23fbc76:	47b8      	blx	r7
    drawLine(x1, y1, x2, y2, color);
 23fbc78:	e9cd a600 	strd	sl, r6, [sp]
 23fbc7c:	6823      	ldr	r3, [r4, #0]
 23fbc7e:	465a      	mov	r2, fp
 23fbc80:	4641      	mov	r1, r8
 23fbc82:	4620      	mov	r0, r4
 23fbc84:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 23fbc86:	464b      	mov	r3, r9
 23fbc88:	47b8      	blx	r7
    drawLine(x2, y2, x0, y0, color);
 23fbc8a:	9a03      	ldr	r2, [sp, #12]
 23fbc8c:	6823      	ldr	r3, [r4, #0]
 23fbc8e:	920e      	str	r2, [sp, #56]	; 0x38
 23fbc90:	960f      	str	r6, [sp, #60]	; 0x3c
 23fbc92:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 23fbc94:	4652      	mov	r2, sl
 23fbc96:	462b      	mov	r3, r5
 23fbc98:	4649      	mov	r1, r9
 23fbc9a:	4620      	mov	r0, r4
 23fbc9c:	46b4      	mov	ip, r6
}
 23fbc9e:	b005      	add	sp, #20
 23fbca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    drawLine(x2, y2, x0, y0, color);
 23fbca4:	4760      	bx	ip

023fbca6 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 23fbca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbcaa:	b08d      	sub	sp, #52	; 0x34
 23fbcac:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
 23fbcb0:	461d      	mov	r5, r3
 23fbcb2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    if (y0 > y1) {
 23fbcb6:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 23fbcb8:	4683      	mov	fp, r0
 23fbcba:	4689      	mov	r9, r1
 23fbcbc:	4614      	mov	r4, r2
 23fbcbe:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 23fbcc2:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 23fbcc6:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
 23fbcc8:	f340 80ca 	ble.w	23fbe60 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1ba>
    if (y1 > y2) {
 23fbccc:	42ba      	cmp	r2, r7
 23fbcce:	dd17      	ble.n	23fbd00 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
 23fbcd0:	42b7      	cmp	r7, r6
 23fbcd2:	da0f      	bge.n	23fbcf4 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
 23fbcd4:	4633      	mov	r3, r6
 23fbcd6:	463e      	mov	r6, r7
 23fbcd8:	4627      	mov	r7, r4
 23fbcda:	461c      	mov	r4, r3
 23fbcdc:	462b      	mov	r3, r5
 23fbcde:	4645      	mov	r5, r8
 23fbce0:	46c8      	mov	r8, r9
    if (y1 > y2) {
 23fbce2:	4699      	mov	r9, r3
 23fbce4:	e00c      	b.n	23fbd00 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
 23fbce6:	4623      	mov	r3, r4
 23fbce8:	4634      	mov	r4, r6
 23fbcea:	461e      	mov	r6, r3
 23fbcec:	464b      	mov	r3, r9
 23fbcee:	46a9      	mov	r9, r5
 23fbcf0:	461d      	mov	r5, r3
 23fbcf2:	e7ed      	b.n	23fbcd0 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
 23fbcf4:	4623      	mov	r3, r4
 23fbcf6:	463c      	mov	r4, r7
 23fbcf8:	461f      	mov	r7, r3
 23fbcfa:	464b      	mov	r3, r9
 23fbcfc:	46c1      	mov	r9, r8
 23fbcfe:	4698      	mov	r8, r3
    startWrite();
 23fbd00:	f8db 3000 	ldr.w	r3, [fp]
 23fbd04:	4658      	mov	r0, fp
 23fbd06:	695b      	ldr	r3, [r3, #20]
 23fbd08:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 23fbd0a:	42be      	cmp	r6, r7
 23fbd0c:	d122      	bne.n	23fbd54 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
 23fbd0e:	454d      	cmp	r5, r9
 23fbd10:	bfc2      	ittt	gt
 23fbd12:	462b      	movgt	r3, r5
 23fbd14:	464d      	movgt	r5, r9
 23fbd16:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
 23fbd18:	4545      	cmp	r5, r8
 23fbd1a:	dc05      	bgt.n	23fbd28 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
 23fbd1c:	45c1      	cmp	r9, r8
 23fbd1e:	bfb8      	it	lt
 23fbd20:	46c1      	movlt	r9, r8
 23fbd22:	46a8      	mov	r8, r5
 23fbd24:	fa0f f989 	sxth.w	r9, r9
        writeFastHLine(a, y0, b-a+1, color);
 23fbd28:	9904      	ldr	r1, [sp, #16]
 23fbd2a:	f8db 2000 	ldr.w	r2, [fp]
 23fbd2e:	f109 0301 	add.w	r3, r9, #1
 23fbd32:	9100      	str	r1, [sp, #0]
 23fbd34:	eba3 0308 	sub.w	r3, r3, r8
 23fbd38:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23fbd3a:	4641      	mov	r1, r8
 23fbd3c:	4632      	mov	r2, r6
 23fbd3e:	4658      	mov	r0, fp
 23fbd40:	b21b      	sxth	r3, r3
 23fbd42:	47a0      	blx	r4
    endWrite();
 23fbd44:	4658      	mov	r0, fp
 23fbd46:	f8db 3000 	ldr.w	r3, [fp]
 23fbd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbd4c:	b00d      	add	sp, #52	; 0x34
 23fbd4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fbd52:	4718      	bx	r3
    dx01 = x1 - x0,
 23fbd54:	fa1f f389 	uxth.w	r3, r9
    sb   = 0;
 23fbd58:	f04f 0900 	mov.w	r9, #0
    dx01 = x1 - x0,
 23fbd5c:	9303      	str	r3, [sp, #12]
 23fbd5e:	b2ab      	uxth	r3, r5
 23fbd60:	9302      	str	r3, [sp, #8]
 23fbd62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23fbd66:	1a9b      	subs	r3, r3, r2
 23fbd68:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
 23fbd6a:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
 23fbd6e:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
 23fbd70:	b2a3      	uxth	r3, r4
 23fbd72:	eba3 020c 	sub.w	r2, r3, ip
 23fbd76:	b212      	sxth	r2, r2
 23fbd78:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
 23fbd7a:	9a02      	ldr	r2, [sp, #8]
 23fbd7c:	fa1f f188 	uxth.w	r1, r8
 23fbd80:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
 23fbd84:	b2ba      	uxth	r2, r7
 23fbd86:	eba2 0c0c 	sub.w	ip, r2, ip
    dy12 = y2 - y1;
 23fbd8a:	1ad2      	subs	r2, r2, r3
 23fbd8c:	b212      	sxth	r2, r2
 23fbd8e:	920a      	str	r2, [sp, #40]	; 0x28
    sa   = 0,
 23fbd90:	46ca      	mov	sl, r9
 23fbd92:	4632      	mov	r2, r6
    dy02 = y2 - y0,
 23fbd94:	fa0f f08c 	sxth.w	r0, ip
 23fbd98:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
 23fbd9a:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
 23fbd9c:	42bc      	cmp	r4, r7
    else         last = y1-1; // Skip it
 23fbd9e:	bf18      	it	ne
 23fbda0:	f103 33ff 	addne.w	r3, r3, #4294967295
    dx12 = x2 - x1,
 23fbda4:	eba1 0100 	sub.w	r1, r1, r0
 23fbda8:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
 23fbdaa:	bf18      	it	ne
 23fbdac:	b21b      	sxthne	r3, r3
    dx02 = x2 - x0,
 23fbdae:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
 23fbdb2:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
 23fbdb4:	bf14      	ite	ne
 23fbdb6:	9305      	strne	r3, [sp, #20]
 23fbdb8:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
 23fbdba:	9b05      	ldr	r3, [sp, #20]
 23fbdbc:	429a      	cmp	r2, r3
 23fbdbe:	dc23      	bgt.n	23fbe08 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x162>
        a   = x0 + sa / dy01;
 23fbdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
 23fbdc2:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
 23fbdc4:	fb9a f1f3 	sdiv	r1, sl, r3
 23fbdc8:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
 23fbdca:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
 23fbdcc:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
 23fbdce:	9b06      	ldr	r3, [sp, #24]
        a   = x0 + sa / dy01;
 23fbdd0:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
 23fbdd2:	fb99 f3f3 	sdiv	r3, r9, r3
 23fbdd6:	4403      	add	r3, r0
 23fbdd8:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
 23fbdda:	4299      	cmp	r1, r3
 23fbddc:	bfc2      	ittt	gt
 23fbdde:	468c      	movgt	ip, r1
 23fbde0:	4619      	movgt	r1, r3
 23fbde2:	4663      	movgt	r3, ip
        sa += dx01;
 23fbde4:	9808      	ldr	r0, [sp, #32]
        writeFastHLine(a, y, b-a+1, color);
 23fbde6:	3301      	adds	r3, #1
        sa += dx01;
 23fbde8:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
 23fbdea:	9804      	ldr	r0, [sp, #16]
 23fbdec:	1a5b      	subs	r3, r3, r1
 23fbdee:	9000      	str	r0, [sp, #0]
 23fbdf0:	f8db 0000 	ldr.w	r0, [fp]
 23fbdf4:	b21b      	sxth	r3, r3
 23fbdf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
        sb += dx02;
 23fbdf8:	44c1      	add	r9, r8
        writeFastHLine(a, y, b-a+1, color);
 23fbdfa:	4605      	mov	r5, r0
 23fbdfc:	4658      	mov	r0, fp
 23fbdfe:	47a8      	blx	r5
    for(y=y0; y<=last; y++) {
 23fbe00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fbe02:	3201      	adds	r2, #1
 23fbe04:	b212      	sxth	r2, r2
 23fbe06:	e7d8      	b.n	23fbdba <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x114>
    sa = (int32_t)dx12 * (y - y1);
 23fbe08:	9b07      	ldr	r3, [sp, #28]
 23fbe0a:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
 23fbe0c:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
 23fbe0e:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
 23fbe10:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
 23fbe14:	42ba      	cmp	r2, r7
 23fbe16:	dc95      	bgt.n	23fbd44 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
 23fbe18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
 23fbe1a:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
 23fbe1c:	fb94 f1f3 	sdiv	r1, r4, r3
 23fbe20:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
 23fbe22:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
 23fbe24:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
 23fbe26:	9b06      	ldr	r3, [sp, #24]
        a   = x1 + sa / dy12;
 23fbe28:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
 23fbe2a:	fb96 f3f3 	sdiv	r3, r6, r3
 23fbe2e:	4403      	add	r3, r0
 23fbe30:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
 23fbe32:	4299      	cmp	r1, r3
 23fbe34:	bfc2      	ittt	gt
 23fbe36:	468c      	movgt	ip, r1
 23fbe38:	4619      	movgt	r1, r3
 23fbe3a:	4663      	movgt	r3, ip
        sa += dx12;
 23fbe3c:	9807      	ldr	r0, [sp, #28]
        writeFastHLine(a, y, b-a+1, color);
 23fbe3e:	3301      	adds	r3, #1
        sa += dx12;
 23fbe40:	4404      	add	r4, r0
        writeFastHLine(a, y, b-a+1, color);
 23fbe42:	9804      	ldr	r0, [sp, #16]
 23fbe44:	1a5b      	subs	r3, r3, r1
 23fbe46:	9000      	str	r0, [sp, #0]
 23fbe48:	f8db 0000 	ldr.w	r0, [fp]
 23fbe4c:	b21b      	sxth	r3, r3
 23fbe4e:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 23fbe52:	4658      	mov	r0, fp
 23fbe54:	47c8      	blx	r9
 23fbe56:	9a05      	ldr	r2, [sp, #20]
        sb += dx02;
 23fbe58:	4446      	add	r6, r8
    for(; y<=y2; y++) {
 23fbe5a:	3201      	adds	r2, #1
 23fbe5c:	b212      	sxth	r2, r2
 23fbe5e:	e7d9      	b.n	23fbe14 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x16e>
    if (y1 > y2) {
 23fbe60:	42be      	cmp	r6, r7
 23fbe62:	f73f af40 	bgt.w	23fbce6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
 23fbe66:	4633      	mov	r3, r6
 23fbe68:	4616      	mov	r6, r2
 23fbe6a:	461c      	mov	r4, r3
 23fbe6c:	462b      	mov	r3, r5
 23fbe6e:	460d      	mov	r5, r1
 23fbe70:	e737      	b.n	23fbce2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>
	...

023fbe74 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fbe74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbe78:	ed2d 8b02 	vpush	{d8}
 23fbe7c:	b091      	sub	sp, #68	; 0x44
 23fbe7e:	4616      	mov	r6, r2
 23fbe80:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23fbe82:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fbe84:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fbe88:	4683      	mov	fp, r0
 23fbe8a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fbe8e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fbe92:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fbe96:	9103      	str	r1, [sp, #12]
 23fbe98:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fbe9a:	2a00      	cmp	r2, #0
 23fbe9c:	f040 80c5 	bne.w	23fc02a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23fbea0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbea4:	428b      	cmp	r3, r1
 23fbea6:	f340 814c 	ble.w	23fc142 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fbeaa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbeae:	42b3      	cmp	r3, r6
 23fbeb0:	f340 8147 	ble.w	23fc142 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fbeb4:	2306      	movs	r3, #6
 23fbeb6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fbeba:	2b00      	cmp	r3, #0
 23fbebc:	f340 8141 	ble.w	23fc142 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fbec0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fbec4:	2b00      	cmp	r3, #0
 23fbec6:	f340 813c 	ble.w	23fc142 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fbeca:	7f03      	ldrb	r3, [r0, #28]
 23fbecc:	b91b      	cbnz	r3, 23fbed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fbece:	2faf      	cmp	r7, #175	; 0xaf
 23fbed0:	bf84      	itt	hi
 23fbed2:	3701      	addhi	r7, #1
 23fbed4:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23fbed6:	f8db 3000 	ldr.w	r3, [fp]
 23fbeda:	4658      	mov	r0, fp
 23fbedc:	695b      	ldr	r3, [r3, #20]
 23fbede:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbee0:	2205      	movs	r2, #5
 23fbee2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fbee4:	2200      	movs	r2, #0
 23fbee6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbee8:	4a98      	ldr	r2, [pc, #608]	; (23fc14c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fbeea:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fbeee:	18d3      	adds	r3, r2, r3
 23fbef0:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fbef2:	b2b3      	uxth	r3, r6
 23fbef4:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbef6:	9a05      	ldr	r2, [sp, #20]
 23fbef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbefa:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbefe:	5c9b      	ldrb	r3, [r3, r2]
 23fbf00:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbf02:	b2ab      	uxth	r3, r5
 23fbf04:	930b      	str	r3, [sp, #44]	; 0x2c
 23fbf06:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fbf0a:	9308      	str	r3, [sp, #32]
 23fbf0c:	9b03      	ldr	r3, [sp, #12]
 23fbf0e:	fa19 f983 	uxtah	r9, r9, r3
 23fbf12:	fa0f f389 	sxth.w	r3, r9
 23fbf16:	ee08 3a10 	vmov	s16, r3
 23fbf1a:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fbf1c:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbf20:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fbf22:	9b03      	ldr	r3, [sp, #12]
 23fbf24:	eb02 0a03 	add.w	sl, r2, r3
 23fbf28:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fbf2c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fbf2e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fbf32:	07d2      	lsls	r2, r2, #31
 23fbf34:	d552      	bpl.n	23fbfdc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fbf36:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fbf38:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fbf3c:	d13e      	bne.n	23fbfbc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fbf3e:	2c01      	cmp	r4, #1
 23fbf40:	d13c      	bne.n	23fbfbc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fbf42:	699b      	ldr	r3, [r3, #24]
 23fbf44:	9906      	ldr	r1, [sp, #24]
 23fbf46:	461f      	mov	r7, r3
 23fbf48:	9b04      	ldr	r3, [sp, #16]
 23fbf4a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fbf4c:	4651      	mov	r1, sl
 23fbf4e:	4658      	mov	r0, fp
 23fbf50:	b212      	sxth	r2, r2
 23fbf52:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fbf54:	f109 0301 	add.w	r3, r9, #1
 23fbf58:	fa4f f983 	sxtb.w	r9, r3
 23fbf5c:	9b07      	ldr	r3, [sp, #28]
 23fbf5e:	085b      	lsrs	r3, r3, #1
 23fbf60:	9307      	str	r3, [sp, #28]
 23fbf62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fbf64:	3b01      	subs	r3, #1
 23fbf66:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fbf6a:	930a      	str	r3, [sp, #40]	; 0x28
 23fbf6c:	d1de      	bne.n	23fbf2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fbf6e:	9f05      	ldr	r7, [sp, #20]
 23fbf70:	3701      	adds	r7, #1
 23fbf72:	b27b      	sxtb	r3, r7
 23fbf74:	9305      	str	r3, [sp, #20]
 23fbf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fbf78:	3b01      	subs	r3, #1
 23fbf7a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fbf7e:	9309      	str	r3, [sp, #36]	; 0x24
 23fbf80:	d1b9      	bne.n	23fbef6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fbf82:	9b04      	ldr	r3, [sp, #16]
 23fbf84:	4543      	cmp	r3, r8
 23fbf86:	d00f      	beq.n	23fbfa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fbf88:	2d01      	cmp	r5, #1
 23fbf8a:	f8db 3000 	ldr.w	r3, [fp]
 23fbf8e:	d13b      	bne.n	23fc008 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fbf90:	2c01      	cmp	r4, #1
 23fbf92:	d139      	bne.n	23fc008 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fbf94:	9908      	ldr	r1, [sp, #32]
 23fbf96:	f8cd 8000 	str.w	r8, [sp]
 23fbf9a:	3105      	adds	r1, #5
 23fbf9c:	6a1c      	ldr	r4, [r3, #32]
 23fbf9e:	4632      	mov	r2, r6
 23fbfa0:	2308      	movs	r3, #8
 23fbfa2:	4658      	mov	r0, fp
 23fbfa4:	b209      	sxth	r1, r1
 23fbfa6:	47a0      	blx	r4
        endWrite();
 23fbfa8:	4658      	mov	r0, fp
 23fbfaa:	f8db 3000 	ldr.w	r3, [fp]
 23fbfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbfb0:	b011      	add	sp, #68	; 0x44
 23fbfb2:	ecbd 8b02 	vpop	{d8}
 23fbfb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fbfba:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fbfbc:	fb14 f202 	smulbb	r2, r4, r2
 23fbfc0:	9906      	ldr	r1, [sp, #24]
 23fbfc2:	440a      	add	r2, r1
 23fbfc4:	9904      	ldr	r1, [sp, #16]
 23fbfc6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbfc8:	9400      	str	r4, [sp, #0]
 23fbfca:	69db      	ldr	r3, [r3, #28]
 23fbfcc:	ee18 1a10 	vmov	r1, s16
 23fbfd0:	461f      	mov	r7, r3
 23fbfd2:	4658      	mov	r0, fp
 23fbfd4:	462b      	mov	r3, r5
 23fbfd6:	b212      	sxth	r2, r2
 23fbfd8:	47b8      	blx	r7
 23fbfda:	e7bb      	b.n	23fbf54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fbfdc:	9a04      	ldr	r2, [sp, #16]
 23fbfde:	4542      	cmp	r2, r8
 23fbfe0:	d0b8      	beq.n	23fbf54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fbfe2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fbfe4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fbfe8:	d107      	bne.n	23fbffa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fbfea:	2c01      	cmp	r4, #1
 23fbfec:	d105      	bne.n	23fbffa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fbfee:	699b      	ldr	r3, [r3, #24]
 23fbff0:	9906      	ldr	r1, [sp, #24]
 23fbff2:	461f      	mov	r7, r3
 23fbff4:	440a      	add	r2, r1
 23fbff6:	4643      	mov	r3, r8
 23fbff8:	e7a8      	b.n	23fbf4c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbffa:	fb14 f202 	smulbb	r2, r4, r2
 23fbffe:	9906      	ldr	r1, [sp, #24]
 23fc000:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc004:	440a      	add	r2, r1
 23fc006:	e7df      	b.n	23fbfc8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fc008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc00a:	00e4      	lsls	r4, r4, #3
 23fc00c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fc010:	9a08      	ldr	r2, [sp, #32]
 23fc012:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc016:	440a      	add	r2, r1
 23fc018:	4611      	mov	r1, r2
 23fc01a:	9400      	str	r4, [sp, #0]
 23fc01c:	69dc      	ldr	r4, [r3, #28]
 23fc01e:	4632      	mov	r2, r6
 23fc020:	462b      	mov	r3, r5
 23fc022:	4658      	mov	r0, fp
 23fc024:	b209      	sxth	r1, r1
 23fc026:	47a0      	blx	r4
        endWrite();
 23fc028:	e7be      	b.n	23fbfa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fc02a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fc02c:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fc02e:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fc030:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fc032:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fc034:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fc036:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fc03a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fc03e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fc040:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fc042:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fc044:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fc046:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fc048:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fc04c:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fc04e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fc052:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fc054:	d801      	bhi.n	23fc05a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fc056:	2c01      	cmp	r4, #1
 23fc058:	d957      	bls.n	23fc10a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fc05a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fc05e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fc060:	fa0f f38a 	sxth.w	r3, sl
 23fc064:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fc066:	f04f 0800 	mov.w	r8, #0
 23fc06a:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fc06c:	4647      	mov	r7, r8
        startWrite();
 23fc06e:	f8db 3000 	ldr.w	r3, [fp]
 23fc072:	4658      	mov	r0, fp
 23fc074:	695b      	ldr	r3, [r3, #20]
 23fc076:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc078:	b2b3      	uxth	r3, r6
 23fc07a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc07c:	fa1a f386 	uxtah	r3, sl, r6
 23fc080:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fc082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fc084:	429f      	cmp	r7, r3
 23fc086:	d28f      	bcs.n	23fbfa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc088:	9b07      	ldr	r3, [sp, #28]
 23fc08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fc08c:	443b      	add	r3, r7
 23fc08e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fc092:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc094:	b21b      	sxth	r3, r3
 23fc096:	ee08 3a10 	vmov	s16, r3
 23fc09a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fc09c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc09e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fc0a0:	eb02 0a07 	add.w	sl, r2, r7
 23fc0a4:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fc0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc0aa:	9905      	ldr	r1, [sp, #20]
 23fc0ac:	4291      	cmp	r1, r2
 23fc0ae:	d241      	bcs.n	23fc134 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fc0b0:	1c5a      	adds	r2, r3, #1
 23fc0b2:	b2d2      	uxtb	r2, r2
 23fc0b4:	075b      	lsls	r3, r3, #29
 23fc0b6:	920d      	str	r2, [sp, #52]	; 0x34
 23fc0b8:	d107      	bne.n	23fc0ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fc0ba:	9b06      	ldr	r3, [sp, #24]
 23fc0bc:	9906      	ldr	r1, [sp, #24]
 23fc0be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc0c0:	3301      	adds	r3, #1
 23fc0c2:	b29b      	uxth	r3, r3
 23fc0c4:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fc0c8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fc0ca:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fc0ce:	d012      	beq.n	23fc0f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fc0d0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc0d2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc0d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fc0da:	d11a      	bne.n	23fc112 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fc0dc:	2c01      	cmp	r4, #1
 23fc0de:	d118      	bne.n	23fc112 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc0e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fc0e2:	699b      	ldr	r3, [r3, #24]
 23fc0e4:	4411      	add	r1, r2
 23fc0e6:	9a05      	ldr	r2, [sp, #20]
 23fc0e8:	461e      	mov	r6, r3
 23fc0ea:	4411      	add	r1, r2
 23fc0ec:	4658      	mov	r0, fp
 23fc0ee:	4652      	mov	r2, sl
 23fc0f0:	9b04      	ldr	r3, [sp, #16]
 23fc0f2:	b209      	sxth	r1, r1
 23fc0f4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fc0f6:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fc0f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fc0fc:	3601      	adds	r6, #1
 23fc0fe:	b2f3      	uxtb	r3, r6
 23fc100:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fc102:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fc106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fc108:	e7ce      	b.n	23fc0a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fc10a:	2300      	movs	r3, #0
 23fc10c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fc110:	e7a9      	b.n	23fc066 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc112:	9805      	ldr	r0, [sp, #20]
 23fc114:	9a08      	ldr	r2, [sp, #32]
 23fc116:	4402      	add	r2, r0
 23fc118:	fb02 1105 	mla	r1, r2, r5, r1
 23fc11c:	9a04      	ldr	r2, [sp, #16]
 23fc11e:	4658      	mov	r0, fp
 23fc120:	e9cd 4200 	strd	r4, r2, [sp]
 23fc124:	69db      	ldr	r3, [r3, #28]
 23fc126:	ee18 2a10 	vmov	r2, s16
 23fc12a:	461e      	mov	r6, r3
 23fc12c:	b209      	sxth	r1, r1
 23fc12e:	462b      	mov	r3, r5
 23fc130:	47b0      	blx	r6
 23fc132:	e7e0      	b.n	23fc0f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fc134:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fc136:	3701      	adds	r7, #1
 23fc138:	4498      	add	r8, r3
 23fc13a:	fa5f f888 	uxtb.w	r8, r8
 23fc13e:	b2ff      	uxtb	r7, r7
 23fc140:	e79f      	b.n	23fc082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fc142:	b011      	add	sp, #68	; 0x44
 23fc144:	ecbd 8b02 	vpop	{d8}
 23fc148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc14c:	023ff57c 	.word	0x023ff57c

023fc150 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fc150:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fc152:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fc154:	4604      	mov	r4, r0
 23fc156:	460b      	mov	r3, r1
 23fc158:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fc15a:	2a00      	cmp	r2, #0
 23fc15c:	d134      	bne.n	23fc1c8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fc15e:	290a      	cmp	r1, #10
 23fc160:	d108      	bne.n	23fc174 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fc162:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fc164:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc166:	7e42      	ldrb	r2, [r0, #25]
 23fc168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fc16c:	8263      	strh	r3, [r4, #18]
}
 23fc16e:	2001      	movs	r0, #1
 23fc170:	b005      	add	sp, #20
 23fc172:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fc174:	290d      	cmp	r1, #13
 23fc176:	d0fa      	beq.n	23fc16e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc178:	7ee1      	ldrb	r1, [r4, #27]
 23fc17a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc17c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc17e:	b171      	cbz	r1, 23fc19e <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fc180:	2106      	movs	r1, #6
 23fc182:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fc186:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fc18a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fc18e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fc190:	bfc1      	itttt	gt
 23fc192:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fc196:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fc198:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fc19c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc19e:	8ae2      	ldrh	r2, [r4, #22]
 23fc1a0:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fc1a4:	9201      	str	r2, [sp, #4]
 23fc1a6:	8aa2      	ldrh	r2, [r4, #20]
 23fc1a8:	4620      	mov	r0, r4
 23fc1aa:	9200      	str	r2, [sp, #0]
 23fc1ac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc1b0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc1b4:	f7ff fe5e 	bl	23fbe74 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fc1b8:	7e23      	ldrb	r3, [r4, #24]
 23fc1ba:	8a22      	ldrh	r2, [r4, #16]
 23fc1bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc1c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc1c4:	8223      	strh	r3, [r4, #16]
 23fc1c6:	e7d2      	b.n	23fc16e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fc1c8:	290a      	cmp	r1, #10
 23fc1ca:	d107      	bne.n	23fc1dc <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fc1cc:	2300      	movs	r3, #0
 23fc1ce:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fc1d0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc1d2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fc1d4:	8a43      	ldrh	r3, [r0, #18]
 23fc1d6:	fb01 3302 	mla	r3, r1, r2, r3
 23fc1da:	e7c7      	b.n	23fc16c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fc1dc:	290d      	cmp	r1, #13
 23fc1de:	d0c6      	beq.n	23fc16e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fc1e0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fc1e2:	42a9      	cmp	r1, r5
 23fc1e4:	d3c3      	bcc.n	23fc16e <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fc1e6:	7a51      	ldrb	r1, [r2, #9]
 23fc1e8:	4299      	cmp	r1, r3
 23fc1ea:	d3c0      	bcc.n	23fc16e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fc1ec:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fc1ee:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fc1f0:	b2ed      	uxtb	r5, r5
 23fc1f2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fc1f6:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fc1f8:	b328      	cbz	r0, 23fc246 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fc1fa:	78e9      	ldrb	r1, [r5, #3]
 23fc1fc:	b319      	cbz	r1, 23fc246 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc1fe:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc200:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc202:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc204:	b191      	cbz	r1, 23fc22c <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fc206:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fc20a:	4408      	add	r0, r1
 23fc20c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc210:	fb06 1100 	mla	r1, r6, r0, r1
 23fc214:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fc218:	4281      	cmp	r1, r0
 23fc21a:	dd07      	ble.n	23fc22c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fc21c:	2000      	movs	r0, #0
 23fc21e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc220:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc224:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fc226:	fb02 1207 	mla	r2, r2, r7, r1
 23fc22a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc22c:	8ae2      	ldrh	r2, [r4, #22]
 23fc22e:	4620      	mov	r0, r4
 23fc230:	9201      	str	r2, [sp, #4]
 23fc232:	8aa2      	ldrh	r2, [r4, #20]
 23fc234:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fc238:	9200      	str	r2, [sp, #0]
 23fc23a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc23e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc242:	f7ff fe17 	bl	23fbe74 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc246:	7929      	ldrb	r1, [r5, #4]
 23fc248:	7e22      	ldrb	r2, [r4, #24]
 23fc24a:	8a23      	ldrh	r3, [r4, #16]
 23fc24c:	fb01 3302 	mla	r3, r1, r2, r3
 23fc250:	e7b8      	b.n	23fc1c4 <_ZN12Adafruit_GFX5writeEh+0x74>

023fc252 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fc252:	2901      	cmp	r1, #1
 23fc254:	bf38      	it	cc
 23fc256:	2101      	movcc	r1, #1
 23fc258:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fc25a:	7641      	strb	r1, [r0, #25]
}
 23fc25c:	4770      	bx	lr
	...

023fc260 <_GLOBAL__sub_I__ZN17Adafruit_STMPE610C2Ehhhh>:
  {
 23fc260:	4b04      	ldr	r3, [pc, #16]	; (23fc274 <_GLOBAL__sub_I__ZN17Adafruit_STMPE610C2Ehhhh+0x14>)
 23fc262:	4a05      	ldr	r2, [pc, #20]	; (23fc278 <_GLOBAL__sub_I__ZN17Adafruit_STMPE610C2Ehhhh+0x18>)
 23fc264:	601a      	str	r2, [r3, #0]
 23fc266:	2201      	movs	r2, #1
 23fc268:	711a      	strb	r2, [r3, #4]
 23fc26a:	2200      	movs	r2, #0
 23fc26c:	609a      	str	r2, [r3, #8]
 23fc26e:	819a      	strh	r2, [r3, #12]
  return  ((p1.x == x) && (p1.y == y) && (p1.z == z));
}

bool TS_Point::operator!=(TS_Point p1) {
  return  ((p1.x != x) || (p1.y != y) || (p1.z != z));
}
 23fc270:	4770      	bx	lr
 23fc272:	bf00      	nop
 23fc274:	1007ae4c 	.word	0x1007ae4c
 23fc278:	023ffadc 	.word	0x023ffadc

023fc27c <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
 23fc27c:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fc27e:	f04f 0c20 	mov.w	ip, #32
 23fc282:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23fc284:	b500      	push	{lr}
 23fc286:	b08c      	sub	sp, #48	; 0x30
 23fc288:	aa0d      	add	r2, sp, #52	; 0x34
 23fc28a:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fc28e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc292:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fc296:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc298:	6801      	ldr	r1, [r0, #0]
 23fc29a:	aa04      	add	r2, sp, #16
 23fc29c:	2032      	movs	r0, #50	; 0x32
 23fc29e:	f000 fe9b 	bl	23fcfd8 <log_message_v>
}
 23fc2a2:	b00c      	add	sp, #48	; 0x30
 23fc2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc2a8:	b003      	add	sp, #12
 23fc2aa:	4770      	bx	lr

023fc2ac <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 23fc2ac:	b538      	push	{r3, r4, r5, lr}
 23fc2ae:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 23fc2b0:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 23fc2b2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 23fc2b4:	b108      	cbz	r0, 23fc2ba <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 23fc2b6:	f001 f809 	bl	23fd2cc <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 23fc2ba:	79a3      	ldrb	r3, [r4, #6]
 23fc2bc:	2b06      	cmp	r3, #6
 23fc2be:	bf0c      	ite	eq
 23fc2c0:	2004      	moveq	r0, #4
 23fc2c2:	2003      	movne	r0, #3
 23fc2c4:	fb10 f005 	smulbb	r0, r0, r5
 23fc2c8:	b280      	uxth	r0, r0
 23fc2ca:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 23fc2cc:	f000 fff0 	bl	23fd2b0 <malloc>
 23fc2d0:	60e0      	str	r0, [r4, #12]
 23fc2d2:	b128      	cbz	r0, 23fc2e0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
 23fc2d4:	2100      	movs	r1, #0
 23fc2d6:	88a2      	ldrh	r2, [r4, #4]
 23fc2d8:	f002 fcf1 	bl	23fecbe <memset>
    numLEDs = n;
 23fc2dc:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 23fc2de:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 23fc2e0:	80a0      	strh	r0, [r4, #4]
 23fc2e2:	8060      	strh	r0, [r4, #2]
}
 23fc2e4:	e7fb      	b.n	23fc2de <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

023fc2e6 <_ZN17Adafruit_NeoPixelC1EtR8SPIClassh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, SPIClass& spi, uint8_t t) :
 23fc2e6:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 23fc2e8:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, SPIClass& spi, uint8_t t) :
 23fc2ea:	4604      	mov	r4, r0
 23fc2ec:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 23fc2ee:	e9c0 5503 	strd	r5, r5, [r0, #12]
 23fc2f2:	7005      	strb	r5, [r0, #0]
 23fc2f4:	7183      	strb	r3, [r0, #6]
 23fc2f6:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 23fc2f8:	f7ff ffd8 	bl	23fc2ac <_ZN17Adafruit_NeoPixel12updateLengthEt>
}
 23fc2fc:	4620      	mov	r0, r4
  spi_ = &spi;
 23fc2fe:	6166      	str	r6, [r4, #20]
}
 23fc300:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc304 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 23fc304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (PLATFORM_ID == 32)
  if (getType() == WS2812B) {
 23fc308:	7983      	ldrb	r3, [r0, #6]
void Adafruit_NeoPixel::begin(void) {
 23fc30a:	4604      	mov	r4, r0
  if (getType() == WS2812B) {
 23fc30c:	2b02      	cmp	r3, #2
 23fc30e:	d14e      	bne.n	23fc3ae <_ZN17Adafruit_NeoPixel5beginEv+0xaa>
  // Prevent copying
  SPIClass(const SPIClass&) = delete;
  SPIClass& operator=(const SPIClass&) = delete;

  hal_spi_interface_t interface() const {
    return _spi;
 23fc310:	6943      	ldr	r3, [r0, #20]
 23fc312:	781b      	ldrb	r3, [r3, #0]
    if (spi_->interface() >= HAL_PLATFORM_SPI_NUM) {
 23fc314:	2b01      	cmp	r3, #1
 23fc316:	d906      	bls.n	23fc326 <_ZN17Adafruit_NeoPixel5beginEv+0x22>
      Log.error("SPI/SPI1 interface not defined!");
 23fc318:	4929      	ldr	r1, [pc, #164]	; (23fc3c0 <_ZN17Adafruit_NeoPixel5beginEv+0xbc>)
 23fc31a:	482a      	ldr	r0, [pc, #168]	; (23fc3c4 <_ZN17Adafruit_NeoPixel5beginEv+0xc0>)
 23fc31c:	f7ff ffae 	bl	23fc27c <_ZNK5spark6Logger5errorEPKcz>
#else
  pinMode(pin, OUTPUT);
  digitalWrite(pin, LOW);
#endif // #if (PLATFORM_ID == 32)
  begun = true;
}
 23fc320:	b003      	add	sp, #12
 23fc322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      misoPin = MISO1;
 23fc326:	2b00      	cmp	r3, #0
 23fc328:	bf0c      	ite	eq
 23fc32a:	f04f 0911 	moveq.w	r9, #17
 23fc32e:	f04f 0904 	movne.w	r9, #4
    PinMode sckPinMode = getPinMode(sckPin);
 23fc332:	4648      	mov	r0, r9
      misoPin = MISO1;
 23fc334:	bf0c      	ite	eq
 23fc336:	2710      	moveq	r7, #16
 23fc338:	2703      	movne	r7, #3
    PinMode sckPinMode = getPinMode(sckPin);
 23fc33a:	f002 fa1d 	bl	23fe778 <getPinMode>
 23fc33e:	4606      	mov	r6, r0
    PinMode misoPinMode = getPinMode(misoPin);
 23fc340:	4638      	mov	r0, r7
 23fc342:	f002 fa19 	bl	23fe778 <getPinMode>
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fc346:	2e01      	cmp	r6, #1
    PinMode misoPinMode = getPinMode(misoPin);
 23fc348:	4605      	mov	r5, r0
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fc34a:	d133      	bne.n	23fc3b4 <_ZN17Adafruit_NeoPixel5beginEv+0xb0>
 23fc34c:	4648      	mov	r0, r9
 23fc34e:	f002 fa7d 	bl	23fe84c <digitalRead>
 23fc352:	4682      	mov	sl, r0
    int misoValue = (misoPinMode == OUTPUT) ? digitalRead(misoPin) : 0;
 23fc354:	2d01      	cmp	r5, #1
 23fc356:	d130      	bne.n	23fc3ba <_ZN17Adafruit_NeoPixel5beginEv+0xb6>
 23fc358:	4638      	mov	r0, r7
 23fc35a:	f002 fa77 	bl	23fe84c <digitalRead>
 23fc35e:	4680      	mov	r8, r0
    spi_config.flags = (uint32_t)HAL_SPI_CONFIG_FLAG_MOSI_ONLY;
 23fc360:	f04f 0b01 	mov.w	fp, #1
 23fc364:	4b18      	ldr	r3, [pc, #96]	; (23fc3c8 <_ZN17Adafruit_NeoPixel5beginEv+0xc4>)
 23fc366:	6960      	ldr	r0, [r4, #20]
 23fc368:	e9cd 3b00 	strd	r3, fp, [sp]
    hal_spi_begin_ext(spi_->interface(), SPI_MODE_MASTER, PIN_INVALID, &spi_config);
 23fc36c:	22ff      	movs	r2, #255	; 0xff
 23fc36e:	466b      	mov	r3, sp
 23fc370:	2100      	movs	r1, #0
 23fc372:	7800      	ldrb	r0, [r0, #0]
 23fc374:	f000 fd6c 	bl	23fce50 <hal_spi_begin_ext>
    spi_->setClockSpeed(3125000); // DVOS 5.7.0 requires setClockSpeed() to be set after begin()
 23fc378:	465a      	mov	r2, fp
 23fc37a:	4914      	ldr	r1, [pc, #80]	; (23fc3cc <_ZN17Adafruit_NeoPixel5beginEv+0xc8>)
 23fc37c:	6960      	ldr	r0, [r4, #20]
 23fc37e:	f001 f901 	bl	23fd584 <_ZN8SPIClass13setClockSpeedEjj>
    pinMode(sckPin, sckPinMode);
 23fc382:	4631      	mov	r1, r6
 23fc384:	4648      	mov	r0, r9
 23fc386:	f002 fa37 	bl	23fe7f8 <pinMode>
    pinMode(misoPin, misoPinMode);
 23fc38a:	4629      	mov	r1, r5
 23fc38c:	4638      	mov	r0, r7
 23fc38e:	f002 fa33 	bl	23fe7f8 <pinMode>
    if (sckPinMode == OUTPUT) {
 23fc392:	455e      	cmp	r6, fp
 23fc394:	d104      	bne.n	23fc3a0 <_ZN17Adafruit_NeoPixel5beginEv+0x9c>
      digitalWrite(sckPin, sckValue);
 23fc396:	4648      	mov	r0, r9
 23fc398:	fa5f f18a 	uxtb.w	r1, sl
 23fc39c:	f002 fa3d 	bl	23fe81a <digitalWrite>
    if (misoPinMode == OUTPUT) {
 23fc3a0:	2d01      	cmp	r5, #1
 23fc3a2:	d104      	bne.n	23fc3ae <_ZN17Adafruit_NeoPixel5beginEv+0xaa>
      digitalWrite(misoPin, misoValue);
 23fc3a4:	4638      	mov	r0, r7
 23fc3a6:	fa5f f188 	uxtb.w	r1, r8
 23fc3aa:	f002 fa36 	bl	23fe81a <digitalWrite>
  begun = true;
 23fc3ae:	2301      	movs	r3, #1
 23fc3b0:	7023      	strb	r3, [r4, #0]
 23fc3b2:	e7b5      	b.n	23fc320 <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fc3b4:	f04f 0a00 	mov.w	sl, #0
 23fc3b8:	e7cc      	b.n	23fc354 <_ZN17Adafruit_NeoPixel5beginEv+0x50>
    int misoValue = (misoPinMode == OUTPUT) ? digitalRead(misoPin) : 0;
 23fc3ba:	f04f 0800 	mov.w	r8, #0
 23fc3be:	e7cf      	b.n	23fc360 <_ZN17Adafruit_NeoPixel5beginEv+0x5c>
 23fc3c0:	023ffae8 	.word	0x023ffae8
 23fc3c4:	1007ae78 	.word	0x1007ae78
 23fc3c8:	000a0008 	.word	0x000a0008
 23fc3cc:	002faf08 	.word	0x002faf08

023fc3d0 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 23fc3d0:	68c3      	ldr	r3, [r0, #12]
 23fc3d2:	2b00      	cmp	r3, #0
 23fc3d4:	f000 80fc 	beq.w	23fc5d0 <_ZN17Adafruit_NeoPixel4showEv+0x200>
void Adafruit_NeoPixel::show(void) {
 23fc3d8:	b570      	push	{r4, r5, r6, lr}
    return type;
 23fc3da:	7983      	ldrb	r3, [r0, #6]
 23fc3dc:	4604      	mov	r4, r0
  }

  __enable_irq();

#elif (PLATFORM_ID == 32)
  if (getType() != WS2812B) { // WS2812 WS2812B and WS2813 supported for P2
 23fc3de:	2b02      	cmp	r3, #2
void Adafruit_NeoPixel::show(void) {
 23fc3e0:	b082      	sub	sp, #8
  if (getType() != WS2812B) { // WS2812 WS2812B and WS2813 supported for P2
 23fc3e2:	f040 80ef 	bne.w	23fc5c4 <_ZN17Adafruit_NeoPixel4showEv+0x1f4>
        resetOff = 20;
      } break;
  }

  constexpr uint8_t numBitsPerBit = 3; // How many SPI bits represent one neopixel bit
  uint32_t spiArraySize = (numBytes * numBitsPerBit) + resetOff + resetOff;
 23fc3e6:	8886      	ldrh	r6, [r0, #4]
 23fc3e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 23fc3ec:	36f0      	adds	r6, #240	; 0xf0
  uint8_t* spiArray = NULL;
  spiArray = (uint8_t*) malloc(spiArraySize);
 23fc3ee:	4630      	mov	r0, r6
 23fc3f0:	f000 ff5e 	bl	23fd2b0 <malloc>

  if (spiArray == NULL) {
 23fc3f4:	4605      	mov	r5, r0
 23fc3f6:	2800      	cmp	r0, #0
 23fc3f8:	f000 80eb 	beq.w	23fc5d2 <_ZN17Adafruit_NeoPixel4showEv+0x202>
    Log.error("Not enough memory available!");
    return;
  }

  memset(spiArray, 0, spiArraySize);
 23fc3fc:	4632      	mov	r2, r6
 23fc3fe:	2100      	movs	r1, #0
 23fc400:	f002 fc5d 	bl	23fecbe <memset>
uint8_t *Adafruit_NeoPixel::getPixels(void) const {
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
 23fc404:	8862      	ldrh	r2, [r4, #2]
  for (int x = 0; x < numPixels(); x++) {
 23fc406:	2a00      	cmp	r2, #0
 23fc408:	f000 80c7 	beq.w	23fc59a <_ZN17Adafruit_NeoPixel4showEv+0x1ca>
 23fc40c:	46ac      	mov	ip, r5
 23fc40e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 23fc412:	68e1      	ldr	r1, [r4, #12]
 23fc414:	442a      	add	r2, r5
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fc416:	f991 3000 	ldrsb.w	r3, [r1]
 23fc41a:	7808      	ldrb	r0, [r1, #0]
 23fc41c:	2b00      	cmp	r3, #0
 23fc41e:	bfb5      	itete	lt
 23fc420:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fc424:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fc428:	23d8      	movlt	r3, #216	; 0xd8
 23fc42a:	2398      	movge	r3, #152	; 0x98
 23fc42c:	f010 0f40 	tst.w	r0, #64	; 0x40
 23fc430:	bf08      	it	eq
 23fc432:	4673      	moveq	r3, lr
 23fc434:	f010 0f20 	tst.w	r0, #32
 23fc438:	bf14      	ite	ne
 23fc43a:	2003      	movne	r0, #3
 23fc43c:	2002      	moveq	r0, #2
 23fc43e:	4403      	add	r3, r0
 23fc440:	f88c 3078 	strb.w	r3, [ip, #120]	; 0x78
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fc444:	7808      	ldrb	r0, [r1, #0]
  for (int x = 0; x < numPixels(); x++) {
 23fc446:	f10c 0c09 	add.w	ip, ip, #9
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fc44a:	f000 0310 	and.w	r3, r0, #16
 23fc44e:	2b00      	cmp	r3, #0
 23fc450:	bf15      	itete	ne
 23fc452:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fc456:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fc45a:	236d      	movne	r3, #109	; 0x6d
 23fc45c:	234d      	moveq	r3, #77	; 0x4d
 23fc45e:	f010 0f08 	tst.w	r0, #8
 23fc462:	bf08      	it	eq
 23fc464:	4673      	moveq	r3, lr
 23fc466:	f88c 3070 	strb.w	r3, [ip, #112]	; 0x70
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fc46a:	780b      	ldrb	r3, [r1, #0]
  for (int x = 0; x < numPixels(); x++) {
 23fc46c:	3103      	adds	r1, #3
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fc46e:	f013 0f02 	tst.w	r3, #2
 23fc472:	bf14      	ite	ne
 23fc474:	2030      	movne	r0, #48	; 0x30
 23fc476:	2020      	moveq	r0, #32
 23fc478:	f013 0f01 	tst.w	r3, #1
 23fc47c:	bf0c      	ite	eq
 23fc47e:	f04f 0e04 	moveq.w	lr, #4
 23fc482:	f04f 0e06 	movne.w	lr, #6
 23fc486:	015b      	lsls	r3, r3, #5
 23fc488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 23fc48c:	4403      	add	r3, r0
 23fc48e:	4473      	add	r3, lr
 23fc490:	f88c 3071 	strb.w	r3, [ip, #113]	; 0x71
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fc494:	f911 0c02 	ldrsb.w	r0, [r1, #-2]
 23fc498:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 23fc49c:	2800      	cmp	r0, #0
 23fc49e:	bfb5      	itete	lt
 23fc4a0:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fc4a4:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fc4a8:	20d8      	movlt	r0, #216	; 0xd8
 23fc4aa:	2098      	movge	r0, #152	; 0x98
 23fc4ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 23fc4b0:	bf08      	it	eq
 23fc4b2:	4670      	moveq	r0, lr
 23fc4b4:	f013 0f20 	tst.w	r3, #32
 23fc4b8:	bf14      	ite	ne
 23fc4ba:	2303      	movne	r3, #3
 23fc4bc:	2302      	moveq	r3, #2
 23fc4be:	4403      	add	r3, r0
 23fc4c0:	f88c 3072 	strb.w	r3, [ip, #114]	; 0x72
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fc4c4:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 23fc4c8:	f000 0310 	and.w	r3, r0, #16
 23fc4cc:	2b00      	cmp	r3, #0
 23fc4ce:	bf15      	itete	ne
 23fc4d0:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fc4d4:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fc4d8:	236d      	movne	r3, #109	; 0x6d
 23fc4da:	234d      	moveq	r3, #77	; 0x4d
 23fc4dc:	f010 0f08 	tst.w	r0, #8
 23fc4e0:	bf08      	it	eq
 23fc4e2:	4673      	moveq	r3, lr
 23fc4e4:	f88c 3073 	strb.w	r3, [ip, #115]	; 0x73
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fc4e8:	f811 ec02 	ldrb.w	lr, [r1, #-2]
 23fc4ec:	f01e 0f02 	tst.w	lr, #2
 23fc4f0:	bf14      	ite	ne
 23fc4f2:	2030      	movne	r0, #48	; 0x30
 23fc4f4:	2020      	moveq	r0, #32
 23fc4f6:	f01e 0f01 	tst.w	lr, #1
 23fc4fa:	bf14      	ite	ne
 23fc4fc:	2306      	movne	r3, #6
 23fc4fe:	2304      	moveq	r3, #4
 23fc500:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 23fc504:	f00e 0e80 	and.w	lr, lr, #128	; 0x80
 23fc508:	4486      	add	lr, r0
 23fc50a:	449e      	add	lr, r3
 23fc50c:	f88c e074 	strb.w	lr, [ip, #116]	; 0x74
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fc510:	f911 3c01 	ldrsb.w	r3, [r1, #-1]
 23fc514:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fc518:	2b00      	cmp	r3, #0
 23fc51a:	bfb5      	itete	lt
 23fc51c:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fc520:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fc524:	23d8      	movlt	r3, #216	; 0xd8
 23fc526:	2398      	movge	r3, #152	; 0x98
 23fc528:	f010 0f40 	tst.w	r0, #64	; 0x40
 23fc52c:	bf08      	it	eq
 23fc52e:	4673      	moveq	r3, lr
 23fc530:	f010 0f20 	tst.w	r0, #32
 23fc534:	bf14      	ite	ne
 23fc536:	2003      	movne	r0, #3
 23fc538:	2002      	moveq	r0, #2
 23fc53a:	4403      	add	r3, r0
 23fc53c:	f88c 3075 	strb.w	r3, [ip, #117]	; 0x75
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fc540:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fc544:	f000 0310 	and.w	r3, r0, #16
 23fc548:	2b00      	cmp	r3, #0
 23fc54a:	bf15      	itete	ne
 23fc54c:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fc550:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fc554:	236d      	movne	r3, #109	; 0x6d
 23fc556:	234d      	moveq	r3, #77	; 0x4d
 23fc558:	f010 0f08 	tst.w	r0, #8
 23fc55c:	bf08      	it	eq
 23fc55e:	4673      	moveq	r3, lr
 23fc560:	f88c 3076 	strb.w	r3, [ip, #118]	; 0x76
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fc564:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fc568:	f010 0f02 	tst.w	r0, #2
 23fc56c:	bf14      	ite	ne
 23fc56e:	f04f 0e30 	movne.w	lr, #48	; 0x30
 23fc572:	f04f 0e20 	moveq.w	lr, #32
 23fc576:	0143      	lsls	r3, r0, #5
 23fc578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 23fc57c:	4473      	add	r3, lr
 23fc57e:	b2db      	uxtb	r3, r3
 23fc580:	07c0      	lsls	r0, r0, #31
 23fc582:	f103 0e06 	add.w	lr, r3, #6
 23fc586:	f103 0304 	add.w	r3, r3, #4
 23fc58a:	bf4c      	ite	mi
 23fc58c:	f88c e077 	strbmi.w	lr, [ip, #119]	; 0x77
 23fc590:	f88c 3077 	strbpl.w	r3, [ip, #119]	; 0x77
  for (int x = 0; x < numPixels(); x++) {
 23fc594:	4594      	cmp	ip, r2
 23fc596:	f47f af3e 	bne.w	23fc416 <_ZN17Adafruit_NeoPixel4showEv+0x46>
  spi_->beginTransaction();
 23fc59a:	6960      	ldr	r0, [r4, #20]
 23fc59c:	f000 ff68 	bl	23fd470 <_ZN8SPIClass16beginTransactionEv>
  spi_->transfer(spiArray, nullptr, spiArraySize, nullptr);
 23fc5a0:	2200      	movs	r2, #0
 23fc5a2:	4633      	mov	r3, r6
 23fc5a4:	4629      	mov	r1, r5
 23fc5a6:	6960      	ldr	r0, [r4, #20]
 23fc5a8:	9200      	str	r2, [sp, #0]
 23fc5aa:	f001 f823 	bl	23fd5f4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  spi_->endTransaction();
 23fc5ae:	6960      	ldr	r0, [r4, #20]
 23fc5b0:	f000 ff61 	bl	23fd476 <_ZN8SPIClass14endTransactionEv>
  free(spiArray);
 23fc5b4:	4628      	mov	r0, r5
 23fc5b6:	f000 fe89 	bl	23fd2cc <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fc5ba:	f000 f9e1 	bl	23fc980 <HAL_Timer_Get_Micro_Seconds>
  endTime = micros(); // Save EOD time for latch on next call
 23fc5be:	6120      	str	r0, [r4, #16]
}
 23fc5c0:	b002      	add	sp, #8
 23fc5c2:	bd70      	pop	{r4, r5, r6, pc}
    Log.error("Pixel type not supported!");
 23fc5c4:	4904      	ldr	r1, [pc, #16]	; (23fc5d8 <_ZN17Adafruit_NeoPixel4showEv+0x208>)
    Log.error("Not enough memory available!");
 23fc5c6:	4805      	ldr	r0, [pc, #20]	; (23fc5dc <_ZN17Adafruit_NeoPixel4showEv+0x20c>)
 23fc5c8:	f7ff fe58 	bl	23fc27c <_ZNK5spark6Logger5errorEPKcz>
}
 23fc5cc:	b002      	add	sp, #8
 23fc5ce:	bd70      	pop	{r4, r5, r6, pc}
 23fc5d0:	4770      	bx	lr
    Log.error("Not enough memory available!");
 23fc5d2:	4903      	ldr	r1, [pc, #12]	; (23fc5e0 <_ZN17Adafruit_NeoPixel4showEv+0x210>)
 23fc5d4:	e7f7      	b.n	23fc5c6 <_ZN17Adafruit_NeoPixel4showEv+0x1f6>
 23fc5d6:	bf00      	nop
 23fc5d8:	023ffb08 	.word	0x023ffb08
 23fc5dc:	1007ae78 	.word	0x1007ae78
 23fc5e0:	023ffb24 	.word	0x023ffb24

023fc5e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
  if(n < numLEDs) {
 23fc5e4:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 23fc5e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 23fc5e8:	428b      	cmp	r3, r1
 23fc5ea:	d92d      	bls.n	23fc648 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    if(brightness) { // See notes in setBrightness()
 23fc5ec:	7a06      	ldrb	r6, [r0, #8]
 23fc5ee:	f3c2 4307 	ubfx	r3, r2, #16, #8
 23fc5f2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 23fc5f6:	b2d5      	uxtb	r5, r2
 23fc5f8:	b13e      	cbz	r6, 23fc60a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 23fc5fa:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 23fc5fc:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 23fc5fe:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 23fc600:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 23fc604:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 23fc608:	0a2d      	lsrs	r5, r5, #8
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 23fc60a:	f890 c006 	ldrb.w	ip, [r0, #6]
 23fc60e:	68c7      	ldr	r7, [r0, #12]
 23fc610:	f1bc 0f06 	cmp.w	ip, #6
 23fc614:	bf0c      	ite	eq
 23fc616:	2604      	moveq	r6, #4
 23fc618:	2603      	movne	r6, #3
 23fc61a:	434e      	muls	r6, r1
 23fc61c:	f1ac 0c02 	sub.w	ip, ip, #2
 23fc620:	19b9      	adds	r1, r7, r6
    switch(type) {
 23fc622:	f1bc 0f06 	cmp.w	ip, #6
 23fc626:	d81d      	bhi.n	23fc664 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 23fc628:	e8df f00c 	tbb	[pc, ip]
 23fc62c:	04081c04 	.word	0x04081c04
 23fc630:	040f      	.short	0x040f
 23fc632:	04          	.byte	0x04
 23fc633:	00          	.byte	0x00
          *p++ = g;
 23fc634:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 23fc636:	704b      	strb	r3, [r1, #1]
          *p = b;
 23fc638:	708d      	strb	r5, [r1, #2]
}
 23fc63a:	e005      	b.n	23fc648 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 23fc63c:	2bfe      	cmp	r3, #254	; 0xfe
 23fc63e:	bf28      	it	cs
 23fc640:	23fe      	movcs	r3, #254	; 0xfe
 23fc642:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 23fc644:	704d      	strb	r5, [r1, #1]
          *p = g;
 23fc646:	708c      	strb	r4, [r1, #2]
}
 23fc648:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 23fc64a:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 23fc64c:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 23fc64e:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fc650:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 23fc652:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fc654:	b913      	cbnz	r3, 23fc65c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 23fc656:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fc658:	70ca      	strb	r2, [r1, #3]
        } break;
 23fc65a:	e7f5      	b.n	23fc648 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fc65c:	435a      	muls	r2, r3
 23fc65e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 23fc662:	e7f9      	b.n	23fc658 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 23fc664:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 23fc666:	704c      	strb	r4, [r1, #1]
 23fc668:	e7e6      	b.n	23fc638 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

023fc66a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 23fc66a:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
 23fc66c:	1c4a      	adds	r2, r1, #1
 23fc66e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 23fc670:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 23fc672:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
 23fc674:	d01f      	beq.n	23fc6b6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 23fc676:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 23fc678:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
 23fc67c:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
 23fc67e:	d00c      	beq.n	23fc69a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 23fc680:	29ff      	cmp	r1, #255	; 0xff
 23fc682:	bf0f      	iteee	eq
 23fc684:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 23fc688:	0211      	lslne	r1, r2, #8
 23fc68a:	f101 31ff 	addne.w	r1, r1, #4294967295
 23fc68e:	fbb1 f3f3 	udivne	r3, r1, r3
    else if(b == 255) scale = 65535 / oldBrightness;
 23fc692:	bf0c      	ite	eq
 23fc694:	fbb1 f3f3 	udiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 23fc698:	b29b      	uxthne	r3, r3
            *ptr           = pixels,
 23fc69a:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
 23fc69c:	8886      	ldrh	r6, [r0, #4]
 23fc69e:	1b29      	subs	r1, r5, r4
 23fc6a0:	b289      	uxth	r1, r1
 23fc6a2:	428e      	cmp	r6, r1
 23fc6a4:	d906      	bls.n	23fc6b4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
 23fc6a6:	7829      	ldrb	r1, [r5, #0]
 23fc6a8:	4359      	muls	r1, r3
 23fc6aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 23fc6ae:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
 23fc6b2:	e7f3      	b.n	23fc69c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
 23fc6b4:	7202      	strb	r2, [r0, #8]
  }
}
 23fc6b6:	bd70      	pop	{r4, r5, r6, pc}

023fc6b8 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
 23fc6b8:	8882      	ldrh	r2, [r0, #4]
 23fc6ba:	2100      	movs	r1, #0
 23fc6bc:	68c0      	ldr	r0, [r0, #12]
 23fc6be:	f002 bafe 	b.w	23fecbe <memset>

023fc6c2 <_ZN16Adafruit_ILI9341D1Ev>:
/*!
@brief Class to manage hardware interface with ILI9341 chipset (also seems to work with ILI9340)
*/
/**************************************************************************/

class Adafruit_ILI9341 : public Adafruit_SPITFT {
 23fc6c2:	4770      	bx	lr

023fc6c4 <_ZN16Adafruit_ILI934113invertDisplayEb>:
/*!
    @brief   Enable/Disable display color inversion
    @param   invert True to invert, False to have normal color
*/
/**************************************************************************/
void Adafruit_ILI9341::invertDisplay(boolean invert) {
 23fc6c4:	b570      	push	{r4, r5, r6, lr}
 23fc6c6:	460d      	mov	r5, r1
 23fc6c8:	4604      	mov	r4, r0
    startWrite();
 23fc6ca:	6803      	ldr	r3, [r0, #0]
 23fc6cc:	695b      	ldr	r3, [r3, #20]
 23fc6ce:	4798      	blx	r3
    writeCommand(invert ? ILI9341_INVON : ILI9341_INVOFF);
 23fc6d0:	2d00      	cmp	r5, #0
 23fc6d2:	4620      	mov	r0, r4
 23fc6d4:	bf14      	ite	ne
 23fc6d6:	2121      	movne	r1, #33	; 0x21
 23fc6d8:	2120      	moveq	r1, #32
 23fc6da:	f7fe fd05 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fc6de:	6823      	ldr	r3, [r4, #0]
 23fc6e0:	4620      	mov	r0, r4
}
 23fc6e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fc6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc6e8:	4718      	bx	r3
	...

023fc6ec <_ZN16Adafruit_ILI934111setRotationEh>:
    rotation = m % 4; // can't be higher than 3
 23fc6ec:	f001 0103 	and.w	r1, r1, #3
    switch (rotation) {
 23fc6f0:	2902      	cmp	r1, #2
void Adafruit_ILI9341::setRotation(uint8_t m) {
 23fc6f2:	b570      	push	{r4, r5, r6, lr}
 23fc6f4:	4604      	mov	r4, r0
    rotation = m % 4; // can't be higher than 3
 23fc6f6:	7681      	strb	r1, [r0, #26]
    switch (rotation) {
 23fc6f8:	d01c      	beq.n	23fc734 <_ZN16Adafruit_ILI934111setRotationEh+0x48>
 23fc6fa:	2903      	cmp	r1, #3
 23fc6fc:	d01e      	beq.n	23fc73c <_ZN16Adafruit_ILI934111setRotationEh+0x50>
 23fc6fe:	2901      	cmp	r1, #1
            m = (MADCTL_MX | MADCTL_BGR);
 23fc700:	bf15      	itete	ne
 23fc702:	2548      	movne	r5, #72	; 0x48
            m = (MADCTL_MV | MADCTL_BGR);
 23fc704:	2528      	moveq	r5, #40	; 0x28
            _width  = ILI9341_TFTWIDTH;
 23fc706:	4b0f      	ldrne	r3, [pc, #60]	; (23fc744 <_ZN16Adafruit_ILI934111setRotationEh+0x58>)
            _width  = ILI9341_TFTHEIGHT;
 23fc708:	4b0f      	ldreq	r3, [pc, #60]	; (23fc748 <_ZN16Adafruit_ILI934111setRotationEh+0x5c>)
            _width  = ILI9341_TFTWIDTH;
 23fc70a:	bf14      	ite	ne
 23fc70c:	60c3      	strne	r3, [r0, #12]
            _width  = ILI9341_TFTHEIGHT;
 23fc70e:	60c3      	streq	r3, [r0, #12]
    startWrite();
 23fc710:	6823      	ldr	r3, [r4, #0]
 23fc712:	4620      	mov	r0, r4
 23fc714:	695b      	ldr	r3, [r3, #20]
 23fc716:	4798      	blx	r3
    writeCommand(ILI9341_MADCTL);
 23fc718:	4620      	mov	r0, r4
 23fc71a:	2136      	movs	r1, #54	; 0x36
 23fc71c:	f7fe fce4 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    spiWrite(m);
 23fc720:	4620      	mov	r0, r4
 23fc722:	4629      	mov	r1, r5
 23fc724:	f7fe fcb7 	bl	23fb096 <_ZN15Adafruit_SPITFT8spiWriteEh>
    endWrite();
 23fc728:	6823      	ldr	r3, [r4, #0]
 23fc72a:	4620      	mov	r0, r4
}
 23fc72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fc730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc732:	4718      	bx	r3
            _width  = ILI9341_TFTWIDTH;
 23fc734:	4b03      	ldr	r3, [pc, #12]	; (23fc744 <_ZN16Adafruit_ILI934111setRotationEh+0x58>)
            m = (MADCTL_MY | MADCTL_BGR);
 23fc736:	2588      	movs	r5, #136	; 0x88
            _width  = ILI9341_TFTWIDTH;
 23fc738:	60c3      	str	r3, [r0, #12]
            break;
 23fc73a:	e7e9      	b.n	23fc710 <_ZN16Adafruit_ILI934111setRotationEh+0x24>
            _width  = ILI9341_TFTHEIGHT;
 23fc73c:	4b02      	ldr	r3, [pc, #8]	; (23fc748 <_ZN16Adafruit_ILI934111setRotationEh+0x5c>)
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 23fc73e:	25e8      	movs	r5, #232	; 0xe8
            _width  = ILI9341_TFTHEIGHT;
 23fc740:	60c3      	str	r3, [r0, #12]
            break;
 23fc742:	e7e5      	b.n	23fc710 <_ZN16Adafruit_ILI934111setRotationEh+0x24>
 23fc744:	014000f0 	.word	0x014000f0
 23fc748:	00f00140 	.word	0x00f00140

023fc74c <_ZN16Adafruit_ILI93415beginEm>:
void Adafruit_ILI9341::begin(uint32_t freq) {
 23fc74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(!freq) freq = SPI_DEFAULT_FREQ;
 23fc750:	4b19      	ldr	r3, [pc, #100]	; (23fc7b8 <_ZN16Adafruit_ILI93415beginEm+0x6c>)
void Adafruit_ILI9341::begin(uint32_t freq) {
 23fc752:	4604      	mov	r4, r0
    if(!freq) freq = SPI_DEFAULT_FREQ;
 23fc754:	2900      	cmp	r1, #0
 23fc756:	bf18      	it	ne
 23fc758:	460b      	movne	r3, r1
    initSPI(freq);
 23fc75a:	2200      	movs	r2, #0
 23fc75c:	4619      	mov	r1, r3
    _freq = freq;
 23fc75e:	6483      	str	r3, [r0, #72]	; 0x48
    initSPI(freq);
 23fc760:	f7fe f9aa 	bl	23faab8 <_ZN15Adafruit_SPITFT7initSPIEmh>
    startWrite();
 23fc764:	6823      	ldr	r3, [r4, #0]
 23fc766:	4620      	mov	r0, r4
 23fc768:	695b      	ldr	r3, [r3, #20]
 23fc76a:	4798      	blx	r3
    const uint8_t *addr = initcmd;
 23fc76c:	4d13      	ldr	r5, [pc, #76]	; (23fc7bc <_ZN16Adafruit_ILI93415beginEm+0x70>)
    while((cmd = pgm_read_byte(addr++)) > 0) {
 23fc76e:	7829      	ldrb	r1, [r5, #0]
 23fc770:	b1d1      	cbz	r1, 23fc7a8 <_ZN16Adafruit_ILI93415beginEm+0x5c>
        writeCommand(cmd);
 23fc772:	4620      	mov	r0, r4
 23fc774:	f7fe fcb8 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
        x       = pgm_read_byte(addr++);
 23fc778:	786f      	ldrb	r7, [r5, #1]
 23fc77a:	f105 0802 	add.w	r8, r5, #2
        numArgs = x & 0x7F;
 23fc77e:	f007 057f 	and.w	r5, r7, #127	; 0x7f
        x       = pgm_read_byte(addr++);
 23fc782:	46c1      	mov	r9, r8
        numArgs = x & 0x7F;
 23fc784:	462e      	mov	r6, r5
        while(numArgs--) spiWrite(pgm_read_byte(addr++));
 23fc786:	3e01      	subs	r6, #1
 23fc788:	b2f6      	uxtb	r6, r6
 23fc78a:	2eff      	cmp	r6, #255	; 0xff
 23fc78c:	d005      	beq.n	23fc79a <_ZN16Adafruit_ILI93415beginEm+0x4e>
 23fc78e:	4620      	mov	r0, r4
 23fc790:	f819 1b01 	ldrb.w	r1, [r9], #1
 23fc794:	f7fe fc7f 	bl	23fb096 <_ZN15Adafruit_SPITFT8spiWriteEh>
 23fc798:	e7f5      	b.n	23fc786 <_ZN16Adafruit_ILI93415beginEm+0x3a>
        if(x & 0x80) delay(120);
 23fc79a:	063b      	lsls	r3, r7, #24
 23fc79c:	4445      	add	r5, r8
 23fc79e:	d5e6      	bpl.n	23fc76e <_ZN16Adafruit_ILI93415beginEm+0x22>
 23fc7a0:	2078      	movs	r0, #120	; 0x78
 23fc7a2:	f001 f99f 	bl	23fdae4 <delay>
 23fc7a6:	e7e2      	b.n	23fc76e <_ZN16Adafruit_ILI93415beginEm+0x22>
    endWrite();
 23fc7a8:	6823      	ldr	r3, [r4, #0]
 23fc7aa:	4620      	mov	r0, r4
 23fc7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc7ae:	4798      	blx	r3
    _width  = ILI9341_TFTWIDTH;
 23fc7b0:	4b03      	ldr	r3, [pc, #12]	; (23fc7c0 <_ZN16Adafruit_ILI93415beginEm+0x74>)
 23fc7b2:	60e3      	str	r3, [r4, #12]
}
 23fc7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fc7b8:	01e84800 	.word	0x01e84800
 23fc7bc:	023ffb41 	.word	0x023ffb41
 23fc7c0:	014000f0 	.word	0x014000f0

023fc7c4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:
    @param   y  TFT memory 'y' origin
    @param   w  Width of rectangle
    @param   h  Height of rectangle
*/
/**************************************************************************/
void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 23fc7c4:	b5e0      	push	{r5, r6, r7, lr}
 23fc7c6:	4607      	mov	r7, r0
 23fc7c8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fc7cc:	440b      	add	r3, r1
 23fc7ce:	3b01      	subs	r3, #1
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
 23fc7d0:	4415      	add	r5, r2
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fc7d2:	ea43 4601 	orr.w	r6, r3, r1, lsl #16
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
 23fc7d6:	3d01      	subs	r5, #1
    writeCommand(ILI9341_CASET); // Column addr set
 23fc7d8:	212a      	movs	r1, #42	; 0x2a
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
 23fc7da:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    writeCommand(ILI9341_CASET); // Column addr set
 23fc7de:	f7fe fc83 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    SPI_WRITE32(xa);
 23fc7e2:	4631      	mov	r1, r6
 23fc7e4:	4638      	mov	r0, r7
 23fc7e6:	f7fe fd1e 	bl	23fb226 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
    writeCommand(ILI9341_PASET); // Row addr set
 23fc7ea:	4638      	mov	r0, r7
 23fc7ec:	212b      	movs	r1, #43	; 0x2b
 23fc7ee:	f7fe fc7b 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    SPI_WRITE32(ya);
 23fc7f2:	4629      	mov	r1, r5
 23fc7f4:	4638      	mov	r0, r7
 23fc7f6:	f7fe fd16 	bl	23fb226 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
    writeCommand(ILI9341_RAMWR); // write to RAM
 23fc7fa:	4638      	mov	r0, r7
}
 23fc7fc:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
    writeCommand(ILI9341_RAMWR); // write to RAM
 23fc800:	212c      	movs	r1, #44	; 0x2c
 23fc802:	f7fe bc71 	b.w	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>

023fc806 <_ZN16Adafruit_ILI9341D0Ev>:
 23fc806:	b510      	push	{r4, lr}
 23fc808:	4604      	mov	r4, r0
 23fc80a:	214c      	movs	r1, #76	; 0x4c
 23fc80c:	f7fc fee1 	bl	23f95d2 <_ZdlPvj>
 23fc810:	4620      	mov	r0, r4
 23fc812:	bd10      	pop	{r4, pc}

023fc814 <_ZN16Adafruit_ILI9341C1Eaaa>:
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_SPITFT(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, cs, dc, rst) {
 23fc814:	b513      	push	{r0, r1, r4, lr}
 23fc816:	4604      	mov	r4, r0
 23fc818:	e9cd 2300 	strd	r2, r3, [sp]
 23fc81c:	460b      	mov	r3, r1
 23fc81e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 23fc822:	21f0      	movs	r1, #240	; 0xf0
 23fc824:	f7fe f918 	bl	23faa58 <_ZN15Adafruit_SPITFTC1Ettaaa>
}
 23fc828:	4620      	mov	r0, r4
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_SPITFT(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, cs, dc, rst) {
 23fc82a:	4b02      	ldr	r3, [pc, #8]	; (23fc834 <_ZN16Adafruit_ILI9341C1Eaaa+0x20>)
 23fc82c:	6023      	str	r3, [r4, #0]
}
 23fc82e:	b002      	add	sp, #8
 23fc830:	bd10      	pop	{r4, pc}
 23fc832:	bf00      	nop
 23fc834:	023ffbb8 	.word	0x023ffbb8

023fc838 <_ZN16Adafruit_ILI934112readcommand8Ehh>:
    @param    command  The command register to read data from
    @param    index  The byte index into the command to read from
    @return   Unsigned 8-bit data read from ILI9341 register
*/
/**************************************************************************/
uint8_t Adafruit_ILI9341::readcommand8(uint8_t command, uint8_t index) {
 23fc838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc83a:	4604      	mov	r4, r0
 23fc83c:	4615      	mov	r5, r2
 23fc83e:	460e      	mov	r6, r1
    uint32_t freq = _freq;
 23fc840:	6c87      	ldr	r7, [r0, #72]	; 0x48
    if(_freq > 24000000) _freq = 24000000;
 23fc842:	4b0f      	ldr	r3, [pc, #60]	; (23fc880 <_ZN16Adafruit_ILI934112readcommand8Ehh+0x48>)
    startWrite();
    writeCommand(0xD9);  // woo sekret command?
    spiWrite(0x10 + index);
 23fc844:	3510      	adds	r5, #16
    if(_freq > 24000000) _freq = 24000000;
 23fc846:	429f      	cmp	r7, r3
 23fc848:	bf88      	it	hi
 23fc84a:	6483      	strhi	r3, [r0, #72]	; 0x48
    startWrite();
 23fc84c:	6803      	ldr	r3, [r0, #0]
 23fc84e:	695b      	ldr	r3, [r3, #20]
 23fc850:	4798      	blx	r3
    writeCommand(0xD9);  // woo sekret command?
 23fc852:	4620      	mov	r0, r4
 23fc854:	21d9      	movs	r1, #217	; 0xd9
 23fc856:	f7fe fc47 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    spiWrite(0x10 + index);
 23fc85a:	4620      	mov	r0, r4
 23fc85c:	b2e9      	uxtb	r1, r5
 23fc85e:	f7fe fc1a 	bl	23fb096 <_ZN15Adafruit_SPITFT8spiWriteEh>
    writeCommand(command);
 23fc862:	4631      	mov	r1, r6
 23fc864:	4620      	mov	r0, r4
 23fc866:	f7fe fc3f 	bl	23fb0e8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    uint8_t r = spiRead();
 23fc86a:	4620      	mov	r0, r4
 23fc86c:	f7fe f9f3 	bl	23fac56 <_ZN15Adafruit_SPITFT7spiReadEv>
 23fc870:	4605      	mov	r5, r0
    endWrite();
 23fc872:	6823      	ldr	r3, [r4, #0]
 23fc874:	4620      	mov	r0, r4
 23fc876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc878:	4798      	blx	r3
    _freq = freq;
    return r;
}
 23fc87a:	4628      	mov	r0, r5
    _freq = freq;
 23fc87c:	64a7      	str	r7, [r4, #72]	; 0x48
}
 23fc87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc880:	016e3600 	.word	0x016e3600

023fc884 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc884:	b509      	push	{r0, r3, lr}
 23fc886:	4804      	ldr	r0, [pc, #16]	; (23fc898 <netdb_freeaddrinfo+0x14>)
 23fc888:	6800      	ldr	r0, [r0, #0]
 23fc88a:	4b04      	ldr	r3, [pc, #16]	; (23fc89c <netdb_freeaddrinfo+0x18>)
 23fc88c:	4403      	add	r3, r0
 23fc88e:	681b      	ldr	r3, [r3, #0]
 23fc890:	689b      	ldr	r3, [r3, #8]
 23fc892:	9302      	str	r3, [sp, #8]
 23fc894:	bd09      	pop	{r0, r3, pc}
 23fc896:	0000      	.short	0x0000
 23fc898:	1007ac8c 	.word	0x1007ac8c
 23fc89c:	00000050 	.word	0x00000050

023fc8a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc8a0:	b509      	push	{r0, r3, lr}
 23fc8a2:	4804      	ldr	r0, [pc, #16]	; (23fc8b4 <netdb_getaddrinfo+0x14>)
 23fc8a4:	6800      	ldr	r0, [r0, #0]
 23fc8a6:	4b04      	ldr	r3, [pc, #16]	; (23fc8b8 <netdb_getaddrinfo+0x18>)
 23fc8a8:	4403      	add	r3, r0
 23fc8aa:	681b      	ldr	r3, [r3, #0]
 23fc8ac:	68db      	ldr	r3, [r3, #12]
 23fc8ae:	9302      	str	r3, [sp, #8]
 23fc8b0:	bd09      	pop	{r0, r3, pc}
 23fc8b2:	0000      	.short	0x0000
 23fc8b4:	1007ac8c 	.word	0x1007ac8c
 23fc8b8:	00000050 	.word	0x00000050

023fc8bc <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc8bc:	b509      	push	{r0, r3, lr}
 23fc8be:	4804      	ldr	r0, [pc, #16]	; (23fc8d0 <hal_gpio_mode+0x14>)
 23fc8c0:	6800      	ldr	r0, [r0, #0]
 23fc8c2:	4b04      	ldr	r3, [pc, #16]	; (23fc8d4 <hal_gpio_mode+0x18>)
 23fc8c4:	4403      	add	r3, r0
 23fc8c6:	681b      	ldr	r3, [r3, #0]
 23fc8c8:	689b      	ldr	r3, [r3, #8]
 23fc8ca:	9302      	str	r3, [sp, #8]
 23fc8cc:	bd09      	pop	{r0, r3, pc}
 23fc8ce:	0000      	.short	0x0000
 23fc8d0:	1007ac8c 	.word	0x1007ac8c
 23fc8d4:	00000014 	.word	0x00000014

023fc8d8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc8d8:	b509      	push	{r0, r3, lr}
 23fc8da:	4804      	ldr	r0, [pc, #16]	; (23fc8ec <hal_gpio_get_mode+0x14>)
 23fc8dc:	6800      	ldr	r0, [r0, #0]
 23fc8de:	4b04      	ldr	r3, [pc, #16]	; (23fc8f0 <hal_gpio_get_mode+0x18>)
 23fc8e0:	4403      	add	r3, r0
 23fc8e2:	681b      	ldr	r3, [r3, #0]
 23fc8e4:	68db      	ldr	r3, [r3, #12]
 23fc8e6:	9302      	str	r3, [sp, #8]
 23fc8e8:	bd09      	pop	{r0, r3, pc}
 23fc8ea:	0000      	.short	0x0000
 23fc8ec:	1007ac8c 	.word	0x1007ac8c
 23fc8f0:	00000014 	.word	0x00000014

023fc8f4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc8f4:	b509      	push	{r0, r3, lr}
 23fc8f6:	4804      	ldr	r0, [pc, #16]	; (23fc908 <hal_gpio_write+0x14>)
 23fc8f8:	6800      	ldr	r0, [r0, #0]
 23fc8fa:	4b04      	ldr	r3, [pc, #16]	; (23fc90c <hal_gpio_write+0x18>)
 23fc8fc:	4403      	add	r3, r0
 23fc8fe:	681b      	ldr	r3, [r3, #0]
 23fc900:	691b      	ldr	r3, [r3, #16]
 23fc902:	9302      	str	r3, [sp, #8]
 23fc904:	bd09      	pop	{r0, r3, pc}
 23fc906:	0000      	.short	0x0000
 23fc908:	1007ac8c 	.word	0x1007ac8c
 23fc90c:	00000014 	.word	0x00000014

023fc910 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fc910:	b509      	push	{r0, r3, lr}
 23fc912:	4804      	ldr	r0, [pc, #16]	; (23fc924 <hal_gpio_read+0x14>)
 23fc914:	6800      	ldr	r0, [r0, #0]
 23fc916:	4b04      	ldr	r3, [pc, #16]	; (23fc928 <hal_gpio_read+0x18>)
 23fc918:	4403      	add	r3, r0
 23fc91a:	681b      	ldr	r3, [r3, #0]
 23fc91c:	695b      	ldr	r3, [r3, #20]
 23fc91e:	9302      	str	r3, [sp, #8]
 23fc920:	bd09      	pop	{r0, r3, pc}
 23fc922:	0000      	.short	0x0000
 23fc924:	1007ac8c 	.word	0x1007ac8c
 23fc928:	00000014 	.word	0x00000014

023fc92c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23fc92c:	b509      	push	{r0, r3, lr}
 23fc92e:	4804      	ldr	r0, [pc, #16]	; (23fc940 <if_index_to_name+0x14>)
 23fc930:	6800      	ldr	r0, [r0, #0]
 23fc932:	4b04      	ldr	r3, [pc, #16]	; (23fc944 <if_index_to_name+0x18>)
 23fc934:	4403      	add	r3, r0
 23fc936:	681b      	ldr	r3, [r3, #0]
 23fc938:	695b      	ldr	r3, [r3, #20]
 23fc93a:	9302      	str	r3, [sp, #8]
 23fc93c:	bd09      	pop	{r0, r3, pc}
 23fc93e:	0000      	.short	0x0000
 23fc940:	1007ac8c 	.word	0x1007ac8c
 23fc944:	00000054 	.word	0x00000054

023fc948 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc948:	b509      	push	{r0, r3, lr}
 23fc94a:	4804      	ldr	r0, [pc, #16]	; (23fc95c <HAL_RNG_GetRandomNumber+0x14>)
 23fc94c:	6800      	ldr	r0, [r0, #0]
 23fc94e:	4b04      	ldr	r3, [pc, #16]	; (23fc960 <HAL_RNG_GetRandomNumber+0x18>)
 23fc950:	4403      	add	r3, r0
 23fc952:	681b      	ldr	r3, [r3, #0]
 23fc954:	685b      	ldr	r3, [r3, #4]
 23fc956:	9302      	str	r3, [sp, #8]
 23fc958:	bd09      	pop	{r0, r3, pc}
 23fc95a:	0000      	.short	0x0000
 23fc95c:	1007ac8c 	.word	0x1007ac8c
 23fc960:	00000000 	.word	0x00000000

023fc964 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc964:	b509      	push	{r0, r3, lr}
 23fc966:	4804      	ldr	r0, [pc, #16]	; (23fc978 <HAL_Delay_Microseconds+0x14>)
 23fc968:	6800      	ldr	r0, [r0, #0]
 23fc96a:	4b04      	ldr	r3, [pc, #16]	; (23fc97c <HAL_Delay_Microseconds+0x18>)
 23fc96c:	4403      	add	r3, r0
 23fc96e:	681b      	ldr	r3, [r3, #0]
 23fc970:	68db      	ldr	r3, [r3, #12]
 23fc972:	9302      	str	r3, [sp, #8]
 23fc974:	bd09      	pop	{r0, r3, pc}
 23fc976:	0000      	.short	0x0000
 23fc978:	1007ac8c 	.word	0x1007ac8c
 23fc97c:	00000000 	.word	0x00000000

023fc980 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fc980:	b509      	push	{r0, r3, lr}
 23fc982:	4804      	ldr	r0, [pc, #16]	; (23fc994 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fc984:	6800      	ldr	r0, [r0, #0]
 23fc986:	4b04      	ldr	r3, [pc, #16]	; (23fc998 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fc988:	4403      	add	r3, r0
 23fc98a:	681b      	ldr	r3, [r3, #0]
 23fc98c:	691b      	ldr	r3, [r3, #16]
 23fc98e:	9302      	str	r3, [sp, #8]
 23fc990:	bd09      	pop	{r0, r3, pc}
 23fc992:	0000      	.short	0x0000
 23fc994:	1007ac8c 	.word	0x1007ac8c
 23fc998:	00000000 	.word	0x00000000

023fc99c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc99c:	b509      	push	{r0, r3, lr}
 23fc99e:	4804      	ldr	r0, [pc, #16]	; (23fc9b0 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc9a0:	6800      	ldr	r0, [r0, #0]
 23fc9a2:	4b04      	ldr	r3, [pc, #16]	; (23fc9b4 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc9a4:	4403      	add	r3, r0
 23fc9a6:	681b      	ldr	r3, [r3, #0]
 23fc9a8:	695b      	ldr	r3, [r3, #20]
 23fc9aa:	9302      	str	r3, [sp, #8]
 23fc9ac:	bd09      	pop	{r0, r3, pc}
 23fc9ae:	0000      	.short	0x0000
 23fc9b0:	1007ac8c 	.word	0x1007ac8c
 23fc9b4:	00000000 	.word	0x00000000

023fc9b8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23fc9b8:	b509      	push	{r0, r3, lr}
 23fc9ba:	4804      	ldr	r0, [pc, #16]	; (23fc9cc <hal_rtc_time_is_valid+0x14>)
 23fc9bc:	6800      	ldr	r0, [r0, #0]
 23fc9be:	4b04      	ldr	r3, [pc, #16]	; (23fc9d0 <hal_rtc_time_is_valid+0x18>)
 23fc9c0:	4403      	add	r3, r0
 23fc9c2:	681b      	ldr	r3, [r3, #0]
 23fc9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fc9c6:	9302      	str	r3, [sp, #8]
 23fc9c8:	bd09      	pop	{r0, r3, pc}
 23fc9ca:	0000      	.short	0x0000
 23fc9cc:	1007ac8c 	.word	0x1007ac8c
 23fc9d0:	00000000 	.word	0x00000000

023fc9d4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fc9d4:	b509      	push	{r0, r3, lr}
 23fc9d6:	4804      	ldr	r0, [pc, #16]	; (23fc9e8 <hal_timer_millis+0x14>)
 23fc9d8:	6800      	ldr	r0, [r0, #0]
 23fc9da:	4b04      	ldr	r3, [pc, #16]	; (23fc9ec <hal_timer_millis+0x18>)
 23fc9dc:	4403      	add	r3, r0
 23fc9de:	681b      	ldr	r3, [r3, #0]
 23fc9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fc9e2:	9302      	str	r3, [sp, #8]
 23fc9e4:	bd09      	pop	{r0, r3, pc}
 23fc9e6:	0000      	.short	0x0000
 23fc9e8:	1007ac8c 	.word	0x1007ac8c
 23fc9ec:	00000000 	.word	0x00000000

023fc9f0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23fc9f0:	b509      	push	{r0, r3, lr}
 23fc9f2:	4804      	ldr	r0, [pc, #16]	; (23fca04 <hal_rtc_get_time+0x14>)
 23fc9f4:	6800      	ldr	r0, [r0, #0]
 23fc9f6:	4b04      	ldr	r3, [pc, #16]	; (23fca08 <hal_rtc_get_time+0x18>)
 23fc9f8:	4403      	add	r3, r0
 23fc9fa:	681b      	ldr	r3, [r3, #0]
 23fc9fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23fc9fe:	9302      	str	r3, [sp, #8]
 23fca00:	bd09      	pop	{r0, r3, pc}
 23fca02:	0000      	.short	0x0000
 23fca04:	1007ac8c 	.word	0x1007ac8c
 23fca08:	00000000 	.word	0x00000000

023fca0c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 23fca0c:	b509      	push	{r0, r3, lr}
 23fca0e:	4804      	ldr	r0, [pc, #16]	; (23fca20 <os_thread_yield+0x14>)
 23fca10:	6800      	ldr	r0, [r0, #0]
 23fca12:	4b04      	ldr	r3, [pc, #16]	; (23fca24 <os_thread_yield+0x18>)
 23fca14:	4403      	add	r3, r0
 23fca16:	681b      	ldr	r3, [r3, #0]
 23fca18:	68db      	ldr	r3, [r3, #12]
 23fca1a:	9302      	str	r3, [sp, #8]
 23fca1c:	bd09      	pop	{r0, r3, pc}
 23fca1e:	0000      	.short	0x0000
 23fca20:	1007ac8c 	.word	0x1007ac8c
 23fca24:	00000030 	.word	0x00000030

023fca28 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 23fca28:	b509      	push	{r0, r3, lr}
 23fca2a:	4804      	ldr	r0, [pc, #16]	; (23fca3c <os_thread_scheduling+0x14>)
 23fca2c:	6800      	ldr	r0, [r0, #0]
 23fca2e:	4b04      	ldr	r3, [pc, #16]	; (23fca40 <os_thread_scheduling+0x18>)
 23fca30:	4403      	add	r3, r0
 23fca32:	681b      	ldr	r3, [r3, #0]
 23fca34:	69db      	ldr	r3, [r3, #28]
 23fca36:	9302      	str	r3, [sp, #8]
 23fca38:	bd09      	pop	{r0, r3, pc}
 23fca3a:	0000      	.short	0x0000
 23fca3c:	1007ac8c 	.word	0x1007ac8c
 23fca40:	00000030 	.word	0x00000030

023fca44 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 23fca44:	b509      	push	{r0, r3, lr}
 23fca46:	4804      	ldr	r0, [pc, #16]	; (23fca58 <os_timer_create+0x14>)
 23fca48:	6800      	ldr	r0, [r0, #0]
 23fca4a:	4b04      	ldr	r3, [pc, #16]	; (23fca5c <os_timer_create+0x18>)
 23fca4c:	4403      	add	r3, r0
 23fca4e:	681b      	ldr	r3, [r3, #0]
 23fca50:	6a1b      	ldr	r3, [r3, #32]
 23fca52:	9302      	str	r3, [sp, #8]
 23fca54:	bd09      	pop	{r0, r3, pc}
 23fca56:	0000      	.short	0x0000
 23fca58:	1007ac8c 	.word	0x1007ac8c
 23fca5c:	00000030 	.word	0x00000030

023fca60 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 23fca60:	b509      	push	{r0, r3, lr}
 23fca62:	4804      	ldr	r0, [pc, #16]	; (23fca74 <os_timer_destroy+0x14>)
 23fca64:	6800      	ldr	r0, [r0, #0]
 23fca66:	4b04      	ldr	r3, [pc, #16]	; (23fca78 <os_timer_destroy+0x18>)
 23fca68:	4403      	add	r3, r0
 23fca6a:	681b      	ldr	r3, [r3, #0]
 23fca6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fca6e:	9302      	str	r3, [sp, #8]
 23fca70:	bd09      	pop	{r0, r3, pc}
 23fca72:	0000      	.short	0x0000
 23fca74:	1007ac8c 	.word	0x1007ac8c
 23fca78:	00000030 	.word	0x00000030

023fca7c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 23fca7c:	b509      	push	{r0, r3, lr}
 23fca7e:	4804      	ldr	r0, [pc, #16]	; (23fca90 <os_timer_get_id+0x14>)
 23fca80:	6800      	ldr	r0, [r0, #0]
 23fca82:	4b04      	ldr	r3, [pc, #16]	; (23fca94 <os_timer_get_id+0x18>)
 23fca84:	4403      	add	r3, r0
 23fca86:	681b      	ldr	r3, [r3, #0]
 23fca88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fca8a:	9302      	str	r3, [sp, #8]
 23fca8c:	bd09      	pop	{r0, r3, pc}
 23fca8e:	0000      	.short	0x0000
 23fca90:	1007ac8c 	.word	0x1007ac8c
 23fca94:	00000030 	.word	0x00000030

023fca98 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 23fca98:	b509      	push	{r0, r3, lr}
 23fca9a:	4804      	ldr	r0, [pc, #16]	; (23fcaac <os_timer_change+0x14>)
 23fca9c:	6800      	ldr	r0, [r0, #0]
 23fca9e:	4b04      	ldr	r3, [pc, #16]	; (23fcab0 <os_timer_change+0x18>)
 23fcaa0:	4403      	add	r3, r0
 23fcaa2:	681b      	ldr	r3, [r3, #0]
 23fcaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcaa6:	9302      	str	r3, [sp, #8]
 23fcaa8:	bd09      	pop	{r0, r3, pc}
 23fcaaa:	0000      	.short	0x0000
 23fcaac:	1007ac8c 	.word	0x1007ac8c
 23fcab0:	00000030 	.word	0x00000030

023fcab4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcab4:	b509      	push	{r0, r3, lr}
 23fcab6:	4804      	ldr	r0, [pc, #16]	; (23fcac8 <os_mutex_recursive_create+0x14>)
 23fcab8:	6800      	ldr	r0, [r0, #0]
 23fcaba:	4b04      	ldr	r3, [pc, #16]	; (23fcacc <os_mutex_recursive_create+0x18>)
 23fcabc:	4403      	add	r3, r0
 23fcabe:	681b      	ldr	r3, [r3, #0]
 23fcac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcac2:	9302      	str	r3, [sp, #8]
 23fcac4:	bd09      	pop	{r0, r3, pc}
 23fcac6:	0000      	.short	0x0000
 23fcac8:	1007ac8c 	.word	0x1007ac8c
 23fcacc:	00000030 	.word	0x00000030

023fcad0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 23fcad0:	b509      	push	{r0, r3, lr}
 23fcad2:	4804      	ldr	r0, [pc, #16]	; (23fcae4 <os_timer_set_id+0x14>)
 23fcad4:	6800      	ldr	r0, [r0, #0]
 23fcad6:	4b04      	ldr	r3, [pc, #16]	; (23fcae8 <os_timer_set_id+0x18>)
 23fcad8:	4403      	add	r3, r0
 23fcada:	681b      	ldr	r3, [r3, #0]
 23fcadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fcade:	9302      	str	r3, [sp, #8]
 23fcae0:	bd09      	pop	{r0, r3, pc}
 23fcae2:	0000      	.short	0x0000
 23fcae4:	1007ac8c 	.word	0x1007ac8c
 23fcae8:	00000030 	.word	0x00000030

023fcaec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fcaec:	b509      	push	{r0, r3, lr}
 23fcaee:	4804      	ldr	r0, [pc, #16]	; (23fcb00 <inet_inet_ntop+0x14>)
 23fcaf0:	6800      	ldr	r0, [r0, #0]
 23fcaf2:	4b04      	ldr	r3, [pc, #16]	; (23fcb04 <inet_inet_ntop+0x18>)
 23fcaf4:	4403      	add	r3, r0
 23fcaf6:	681b      	ldr	r3, [r3, #0]
 23fcaf8:	695b      	ldr	r3, [r3, #20]
 23fcafa:	9302      	str	r3, [sp, #8]
 23fcafc:	bd09      	pop	{r0, r3, pc}
 23fcafe:	0000      	.short	0x0000
 23fcb00:	1007ac8c 	.word	0x1007ac8c
 23fcb04:	0000004c 	.word	0x0000004c

023fcb08 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23fcb08:	b509      	push	{r0, r3, lr}
 23fcb0a:	4804      	ldr	r0, [pc, #16]	; (23fcb1c <inet_htonl+0x14>)
 23fcb0c:	6800      	ldr	r0, [r0, #0]
 23fcb0e:	4b04      	ldr	r3, [pc, #16]	; (23fcb20 <inet_htonl+0x18>)
 23fcb10:	4403      	add	r3, r0
 23fcb12:	681b      	ldr	r3, [r3, #0]
 23fcb14:	6a1b      	ldr	r3, [r3, #32]
 23fcb16:	9302      	str	r3, [sp, #8]
 23fcb18:	bd09      	pop	{r0, r3, pc}
 23fcb1a:	0000      	.short	0x0000
 23fcb1c:	1007ac8c 	.word	0x1007ac8c
 23fcb20:	0000004c 	.word	0x0000004c

023fcb24 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23fcb24:	b509      	push	{r0, r3, lr}
 23fcb26:	4804      	ldr	r0, [pc, #16]	; (23fcb38 <inet_htons+0x14>)
 23fcb28:	6800      	ldr	r0, [r0, #0]
 23fcb2a:	4b04      	ldr	r3, [pc, #16]	; (23fcb3c <inet_htons+0x18>)
 23fcb2c:	4403      	add	r3, r0
 23fcb2e:	681b      	ldr	r3, [r3, #0]
 23fcb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcb32:	9302      	str	r3, [sp, #8]
 23fcb34:	bd09      	pop	{r0, r3, pc}
 23fcb36:	0000      	.short	0x0000
 23fcb38:	1007ac8c 	.word	0x1007ac8c
 23fcb3c:	0000004c 	.word	0x0000004c

023fcb40 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fcb40:	b509      	push	{r0, r3, lr}
 23fcb42:	4804      	ldr	r0, [pc, #16]	; (23fcb54 <hal_usart_write+0x14>)
 23fcb44:	6800      	ldr	r0, [r0, #0]
 23fcb46:	4b04      	ldr	r3, [pc, #16]	; (23fcb58 <hal_usart_write+0x18>)
 23fcb48:	4403      	add	r3, r0
 23fcb4a:	681b      	ldr	r3, [r3, #0]
 23fcb4c:	68db      	ldr	r3, [r3, #12]
 23fcb4e:	9302      	str	r3, [sp, #8]
 23fcb50:	bd09      	pop	{r0, r3, pc}
 23fcb52:	0000      	.short	0x0000
 23fcb54:	1007ac8c 	.word	0x1007ac8c
 23fcb58:	00000024 	.word	0x00000024

023fcb5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fcb5c:	b509      	push	{r0, r3, lr}
 23fcb5e:	4804      	ldr	r0, [pc, #16]	; (23fcb70 <hal_usart_available+0x14>)
 23fcb60:	6800      	ldr	r0, [r0, #0]
 23fcb62:	4b04      	ldr	r3, [pc, #16]	; (23fcb74 <hal_usart_available+0x18>)
 23fcb64:	4403      	add	r3, r0
 23fcb66:	681b      	ldr	r3, [r3, #0]
 23fcb68:	691b      	ldr	r3, [r3, #16]
 23fcb6a:	9302      	str	r3, [sp, #8]
 23fcb6c:	bd09      	pop	{r0, r3, pc}
 23fcb6e:	0000      	.short	0x0000
 23fcb70:	1007ac8c 	.word	0x1007ac8c
 23fcb74:	00000024 	.word	0x00000024

023fcb78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fcb78:	b509      	push	{r0, r3, lr}
 23fcb7a:	4804      	ldr	r0, [pc, #16]	; (23fcb8c <hal_usart_read+0x14>)
 23fcb7c:	6800      	ldr	r0, [r0, #0]
 23fcb7e:	4b04      	ldr	r3, [pc, #16]	; (23fcb90 <hal_usart_read+0x18>)
 23fcb80:	4403      	add	r3, r0
 23fcb82:	681b      	ldr	r3, [r3, #0]
 23fcb84:	695b      	ldr	r3, [r3, #20]
 23fcb86:	9302      	str	r3, [sp, #8]
 23fcb88:	bd09      	pop	{r0, r3, pc}
 23fcb8a:	0000      	.short	0x0000
 23fcb8c:	1007ac8c 	.word	0x1007ac8c
 23fcb90:	00000024 	.word	0x00000024

023fcb94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fcb94:	b509      	push	{r0, r3, lr}
 23fcb96:	4804      	ldr	r0, [pc, #16]	; (23fcba8 <hal_usart_peek+0x14>)
 23fcb98:	6800      	ldr	r0, [r0, #0]
 23fcb9a:	4b04      	ldr	r3, [pc, #16]	; (23fcbac <hal_usart_peek+0x18>)
 23fcb9c:	4403      	add	r3, r0
 23fcb9e:	681b      	ldr	r3, [r3, #0]
 23fcba0:	699b      	ldr	r3, [r3, #24]
 23fcba2:	9302      	str	r3, [sp, #8]
 23fcba4:	bd09      	pop	{r0, r3, pc}
 23fcba6:	0000      	.short	0x0000
 23fcba8:	1007ac8c 	.word	0x1007ac8c
 23fcbac:	00000024 	.word	0x00000024

023fcbb0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fcbb0:	b509      	push	{r0, r3, lr}
 23fcbb2:	4804      	ldr	r0, [pc, #16]	; (23fcbc4 <hal_usart_flush+0x14>)
 23fcbb4:	6800      	ldr	r0, [r0, #0]
 23fcbb6:	4b04      	ldr	r3, [pc, #16]	; (23fcbc8 <hal_usart_flush+0x18>)
 23fcbb8:	4403      	add	r3, r0
 23fcbba:	681b      	ldr	r3, [r3, #0]
 23fcbbc:	69db      	ldr	r3, [r3, #28]
 23fcbbe:	9302      	str	r3, [sp, #8]
 23fcbc0:	bd09      	pop	{r0, r3, pc}
 23fcbc2:	0000      	.short	0x0000
 23fcbc4:	1007ac8c 	.word	0x1007ac8c
 23fcbc8:	00000024 	.word	0x00000024

023fcbcc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fcbcc:	b509      	push	{r0, r3, lr}
 23fcbce:	4804      	ldr	r0, [pc, #16]	; (23fcbe0 <hal_usart_is_enabled+0x14>)
 23fcbd0:	6800      	ldr	r0, [r0, #0]
 23fcbd2:	4b04      	ldr	r3, [pc, #16]	; (23fcbe4 <hal_usart_is_enabled+0x18>)
 23fcbd4:	4403      	add	r3, r0
 23fcbd6:	681b      	ldr	r3, [r3, #0]
 23fcbd8:	6a1b      	ldr	r3, [r3, #32]
 23fcbda:	9302      	str	r3, [sp, #8]
 23fcbdc:	bd09      	pop	{r0, r3, pc}
 23fcbde:	0000      	.short	0x0000
 23fcbe0:	1007ac8c 	.word	0x1007ac8c
 23fcbe4:	00000024 	.word	0x00000024

023fcbe8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fcbe8:	b509      	push	{r0, r3, lr}
 23fcbea:	4804      	ldr	r0, [pc, #16]	; (23fcbfc <hal_usart_available_data_for_write+0x14>)
 23fcbec:	6800      	ldr	r0, [r0, #0]
 23fcbee:	4b04      	ldr	r3, [pc, #16]	; (23fcc00 <hal_usart_available_data_for_write+0x18>)
 23fcbf0:	4403      	add	r3, r0
 23fcbf2:	681b      	ldr	r3, [r3, #0]
 23fcbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcbf6:	9302      	str	r3, [sp, #8]
 23fcbf8:	bd09      	pop	{r0, r3, pc}
 23fcbfa:	0000      	.short	0x0000
 23fcbfc:	1007ac8c 	.word	0x1007ac8c
 23fcc00:	00000024 	.word	0x00000024

023fcc04 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcc04:	b509      	push	{r0, r3, lr}
 23fcc06:	4804      	ldr	r0, [pc, #16]	; (23fcc18 <hal_usart_init_ex+0x14>)
 23fcc08:	6800      	ldr	r0, [r0, #0]
 23fcc0a:	4b04      	ldr	r3, [pc, #16]	; (23fcc1c <hal_usart_init_ex+0x18>)
 23fcc0c:	4403      	add	r3, r0
 23fcc0e:	681b      	ldr	r3, [r3, #0]
 23fcc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcc12:	9302      	str	r3, [sp, #8]
 23fcc14:	bd09      	pop	{r0, r3, pc}
 23fcc16:	0000      	.short	0x0000
 23fcc18:	1007ac8c 	.word	0x1007ac8c
 23fcc1c:	00000024 	.word	0x00000024

023fcc20 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fcc20:	b509      	push	{r0, r3, lr}
 23fcc22:	4804      	ldr	r0, [pc, #16]	; (23fcc34 <hal_i2c_write+0x14>)
 23fcc24:	6800      	ldr	r0, [r0, #0]
 23fcc26:	4b04      	ldr	r3, [pc, #16]	; (23fcc38 <hal_i2c_write+0x18>)
 23fcc28:	4403      	add	r3, r0
 23fcc2a:	681b      	ldr	r3, [r3, #0]
 23fcc2c:	6a1b      	ldr	r3, [r3, #32]
 23fcc2e:	9302      	str	r3, [sp, #8]
 23fcc30:	bd09      	pop	{r0, r3, pc}
 23fcc32:	0000      	.short	0x0000
 23fcc34:	1007ac8c 	.word	0x1007ac8c
 23fcc38:	00000010 	.word	0x00000010

023fcc3c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcc3c:	b509      	push	{r0, r3, lr}
 23fcc3e:	4804      	ldr	r0, [pc, #16]	; (23fcc50 <hal_i2c_available+0x14>)
 23fcc40:	6800      	ldr	r0, [r0, #0]
 23fcc42:	4b04      	ldr	r3, [pc, #16]	; (23fcc54 <hal_i2c_available+0x18>)
 23fcc44:	4403      	add	r3, r0
 23fcc46:	681b      	ldr	r3, [r3, #0]
 23fcc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcc4a:	9302      	str	r3, [sp, #8]
 23fcc4c:	bd09      	pop	{r0, r3, pc}
 23fcc4e:	0000      	.short	0x0000
 23fcc50:	1007ac8c 	.word	0x1007ac8c
 23fcc54:	00000010 	.word	0x00000010

023fcc58 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fcc58:	b509      	push	{r0, r3, lr}
 23fcc5a:	4804      	ldr	r0, [pc, #16]	; (23fcc6c <hal_i2c_read+0x14>)
 23fcc5c:	6800      	ldr	r0, [r0, #0]
 23fcc5e:	4b04      	ldr	r3, [pc, #16]	; (23fcc70 <hal_i2c_read+0x18>)
 23fcc60:	4403      	add	r3, r0
 23fcc62:	681b      	ldr	r3, [r3, #0]
 23fcc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcc66:	9302      	str	r3, [sp, #8]
 23fcc68:	bd09      	pop	{r0, r3, pc}
 23fcc6a:	0000      	.short	0x0000
 23fcc6c:	1007ac8c 	.word	0x1007ac8c
 23fcc70:	00000010 	.word	0x00000010

023fcc74 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fcc74:	b509      	push	{r0, r3, lr}
 23fcc76:	4804      	ldr	r0, [pc, #16]	; (23fcc88 <hal_i2c_peek+0x14>)
 23fcc78:	6800      	ldr	r0, [r0, #0]
 23fcc7a:	4b04      	ldr	r3, [pc, #16]	; (23fcc8c <hal_i2c_peek+0x18>)
 23fcc7c:	4403      	add	r3, r0
 23fcc7e:	681b      	ldr	r3, [r3, #0]
 23fcc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcc82:	9302      	str	r3, [sp, #8]
 23fcc84:	bd09      	pop	{r0, r3, pc}
 23fcc86:	0000      	.short	0x0000
 23fcc88:	1007ac8c 	.word	0x1007ac8c
 23fcc8c:	00000010 	.word	0x00000010

023fcc90 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fcc90:	b509      	push	{r0, r3, lr}
 23fcc92:	4804      	ldr	r0, [pc, #16]	; (23fcca4 <hal_i2c_flush+0x14>)
 23fcc94:	6800      	ldr	r0, [r0, #0]
 23fcc96:	4b04      	ldr	r3, [pc, #16]	; (23fcca8 <hal_i2c_flush+0x18>)
 23fcc98:	4403      	add	r3, r0
 23fcc9a:	681b      	ldr	r3, [r3, #0]
 23fcc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcc9e:	9302      	str	r3, [sp, #8]
 23fcca0:	bd09      	pop	{r0, r3, pc}
 23fcca2:	0000      	.short	0x0000
 23fcca4:	1007ac8c 	.word	0x1007ac8c
 23fcca8:	00000010 	.word	0x00000010

023fccac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fccac:	b509      	push	{r0, r3, lr}
 23fccae:	4804      	ldr	r0, [pc, #16]	; (23fccc0 <hal_i2c_is_enabled+0x14>)
 23fccb0:	6800      	ldr	r0, [r0, #0]
 23fccb2:	4b04      	ldr	r3, [pc, #16]	; (23fccc4 <hal_i2c_is_enabled+0x18>)
 23fccb4:	4403      	add	r3, r0
 23fccb6:	681b      	ldr	r3, [r3, #0]
 23fccb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fccba:	9302      	str	r3, [sp, #8]
 23fccbc:	bd09      	pop	{r0, r3, pc}
 23fccbe:	0000      	.short	0x0000
 23fccc0:	1007ac8c 	.word	0x1007ac8c
 23fccc4:	00000010 	.word	0x00000010

023fccc8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fccc8:	b509      	push	{r0, r3, lr}
 23fccca:	4804      	ldr	r0, [pc, #16]	; (23fccdc <hal_i2c_init+0x14>)
 23fcccc:	6800      	ldr	r0, [r0, #0]
 23fccce:	4b04      	ldr	r3, [pc, #16]	; (23fcce0 <hal_i2c_init+0x18>)
 23fccd0:	4403      	add	r3, r0
 23fccd2:	681b      	ldr	r3, [r3, #0]
 23fccd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fccd6:	9302      	str	r3, [sp, #8]
 23fccd8:	bd09      	pop	{r0, r3, pc}
 23fccda:	0000      	.short	0x0000
 23fccdc:	1007ac8c 	.word	0x1007ac8c
 23fcce0:	00000010 	.word	0x00000010

023fcce4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23fcce4:	b509      	push	{r0, r3, lr}
 23fcce6:	4804      	ldr	r0, [pc, #16]	; (23fccf8 <sock_setsockopt+0x14>)
 23fcce8:	6800      	ldr	r0, [r0, #0]
 23fccea:	4b04      	ldr	r3, [pc, #16]	; (23fccfc <sock_setsockopt+0x18>)
 23fccec:	4403      	add	r3, r0
 23fccee:	681b      	ldr	r3, [r3, #0]
 23fccf0:	699b      	ldr	r3, [r3, #24]
 23fccf2:	9302      	str	r3, [sp, #8]
 23fccf4:	bd09      	pop	{r0, r3, pc}
 23fccf6:	0000      	.short	0x0000
 23fccf8:	1007ac8c 	.word	0x1007ac8c
 23fccfc:	00000020 	.word	0x00000020

023fcd00 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23fcd00:	b509      	push	{r0, r3, lr}
 23fcd02:	4804      	ldr	r0, [pc, #16]	; (23fcd14 <sock_close+0x14>)
 23fcd04:	6800      	ldr	r0, [r0, #0]
 23fcd06:	4b04      	ldr	r3, [pc, #16]	; (23fcd18 <sock_close+0x18>)
 23fcd08:	4403      	add	r3, r0
 23fcd0a:	681b      	ldr	r3, [r3, #0]
 23fcd0c:	69db      	ldr	r3, [r3, #28]
 23fcd0e:	9302      	str	r3, [sp, #8]
 23fcd10:	bd09      	pop	{r0, r3, pc}
 23fcd12:	0000      	.short	0x0000
 23fcd14:	1007ac8c 	.word	0x1007ac8c
 23fcd18:	00000020 	.word	0x00000020

023fcd1c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23fcd1c:	b509      	push	{r0, r3, lr}
 23fcd1e:	4804      	ldr	r0, [pc, #16]	; (23fcd30 <sock_connect+0x14>)
 23fcd20:	6800      	ldr	r0, [r0, #0]
 23fcd22:	4b04      	ldr	r3, [pc, #16]	; (23fcd34 <sock_connect+0x18>)
 23fcd24:	4403      	add	r3, r0
 23fcd26:	681b      	ldr	r3, [r3, #0]
 23fcd28:	6a1b      	ldr	r3, [r3, #32]
 23fcd2a:	9302      	str	r3, [sp, #8]
 23fcd2c:	bd09      	pop	{r0, r3, pc}
 23fcd2e:	0000      	.short	0x0000
 23fcd30:	1007ac8c 	.word	0x1007ac8c
 23fcd34:	00000020 	.word	0x00000020

023fcd38 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23fcd38:	b509      	push	{r0, r3, lr}
 23fcd3a:	4804      	ldr	r0, [pc, #16]	; (23fcd4c <sock_recv+0x14>)
 23fcd3c:	6800      	ldr	r0, [r0, #0]
 23fcd3e:	4b04      	ldr	r3, [pc, #16]	; (23fcd50 <sock_recv+0x18>)
 23fcd40:	4403      	add	r3, r0
 23fcd42:	681b      	ldr	r3, [r3, #0]
 23fcd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcd46:	9302      	str	r3, [sp, #8]
 23fcd48:	bd09      	pop	{r0, r3, pc}
 23fcd4a:	0000      	.short	0x0000
 23fcd4c:	1007ac8c 	.word	0x1007ac8c
 23fcd50:	00000020 	.word	0x00000020

023fcd54 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23fcd54:	b509      	push	{r0, r3, lr}
 23fcd56:	4804      	ldr	r0, [pc, #16]	; (23fcd68 <sock_send+0x14>)
 23fcd58:	6800      	ldr	r0, [r0, #0]
 23fcd5a:	4b04      	ldr	r3, [pc, #16]	; (23fcd6c <sock_send+0x18>)
 23fcd5c:	4403      	add	r3, r0
 23fcd5e:	681b      	ldr	r3, [r3, #0]
 23fcd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcd62:	9302      	str	r3, [sp, #8]
 23fcd64:	bd09      	pop	{r0, r3, pc}
 23fcd66:	0000      	.short	0x0000
 23fcd68:	1007ac8c 	.word	0x1007ac8c
 23fcd6c:	00000020 	.word	0x00000020

023fcd70 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23fcd70:	b509      	push	{r0, r3, lr}
 23fcd72:	4804      	ldr	r0, [pc, #16]	; (23fcd84 <sock_socket+0x14>)
 23fcd74:	6800      	ldr	r0, [r0, #0]
 23fcd76:	4b04      	ldr	r3, [pc, #16]	; (23fcd88 <sock_socket+0x18>)
 23fcd78:	4403      	add	r3, r0
 23fcd7a:	681b      	ldr	r3, [r3, #0]
 23fcd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fcd7e:	9302      	str	r3, [sp, #8]
 23fcd80:	bd09      	pop	{r0, r3, pc}
 23fcd82:	0000      	.short	0x0000
 23fcd84:	1007ac8c 	.word	0x1007ac8c
 23fcd88:	00000020 	.word	0x00000020

023fcd8c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fcd8c:	b509      	push	{r0, r3, lr}
 23fcd8e:	4804      	ldr	r0, [pc, #16]	; (23fcda0 <hal_spi_begin+0x14>)
 23fcd90:	6800      	ldr	r0, [r0, #0]
 23fcd92:	4b04      	ldr	r3, [pc, #16]	; (23fcda4 <hal_spi_begin+0x18>)
 23fcd94:	4403      	add	r3, r0
 23fcd96:	681b      	ldr	r3, [r3, #0]
 23fcd98:	681b      	ldr	r3, [r3, #0]
 23fcd9a:	9302      	str	r3, [sp, #8]
 23fcd9c:	bd09      	pop	{r0, r3, pc}
 23fcd9e:	0000      	.short	0x0000
 23fcda0:	1007ac8c 	.word	0x1007ac8c
 23fcda4:	00000018 	.word	0x00000018

023fcda8 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fcda8:	b509      	push	{r0, r3, lr}
 23fcdaa:	4804      	ldr	r0, [pc, #16]	; (23fcdbc <hal_spi_set_clock_divider+0x14>)
 23fcdac:	6800      	ldr	r0, [r0, #0]
 23fcdae:	4b04      	ldr	r3, [pc, #16]	; (23fcdc0 <hal_spi_set_clock_divider+0x18>)
 23fcdb0:	4403      	add	r3, r0
 23fcdb2:	681b      	ldr	r3, [r3, #0]
 23fcdb4:	691b      	ldr	r3, [r3, #16]
 23fcdb6:	9302      	str	r3, [sp, #8]
 23fcdb8:	bd09      	pop	{r0, r3, pc}
 23fcdba:	0000      	.short	0x0000
 23fcdbc:	1007ac8c 	.word	0x1007ac8c
 23fcdc0:	00000018 	.word	0x00000018

023fcdc4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fcdc4:	b509      	push	{r0, r3, lr}
 23fcdc6:	4804      	ldr	r0, [pc, #16]	; (23fcdd8 <hal_spi_transfer+0x14>)
 23fcdc8:	6800      	ldr	r0, [r0, #0]
 23fcdca:	4b04      	ldr	r3, [pc, #16]	; (23fcddc <hal_spi_transfer+0x18>)
 23fcdcc:	4403      	add	r3, r0
 23fcdce:	681b      	ldr	r3, [r3, #0]
 23fcdd0:	695b      	ldr	r3, [r3, #20]
 23fcdd2:	9302      	str	r3, [sp, #8]
 23fcdd4:	bd09      	pop	{r0, r3, pc}
 23fcdd6:	0000      	.short	0x0000
 23fcdd8:	1007ac8c 	.word	0x1007ac8c
 23fcddc:	00000018 	.word	0x00000018

023fcde0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fcde0:	b509      	push	{r0, r3, lr}
 23fcde2:	4804      	ldr	r0, [pc, #16]	; (23fcdf4 <hal_spi_init+0x14>)
 23fcde4:	6800      	ldr	r0, [r0, #0]
 23fcde6:	4b04      	ldr	r3, [pc, #16]	; (23fcdf8 <hal_spi_init+0x18>)
 23fcde8:	4403      	add	r3, r0
 23fcdea:	681b      	ldr	r3, [r3, #0]
 23fcdec:	69db      	ldr	r3, [r3, #28]
 23fcdee:	9302      	str	r3, [sp, #8]
 23fcdf0:	bd09      	pop	{r0, r3, pc}
 23fcdf2:	0000      	.short	0x0000
 23fcdf4:	1007ac8c 	.word	0x1007ac8c
 23fcdf8:	00000018 	.word	0x00000018

023fcdfc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fcdfc:	b509      	push	{r0, r3, lr}
 23fcdfe:	4804      	ldr	r0, [pc, #16]	; (23fce10 <hal_spi_is_enabled+0x14>)
 23fce00:	6800      	ldr	r0, [r0, #0]
 23fce02:	4b04      	ldr	r3, [pc, #16]	; (23fce14 <hal_spi_is_enabled+0x18>)
 23fce04:	4403      	add	r3, r0
 23fce06:	681b      	ldr	r3, [r3, #0]
 23fce08:	6a1b      	ldr	r3, [r3, #32]
 23fce0a:	9302      	str	r3, [sp, #8]
 23fce0c:	bd09      	pop	{r0, r3, pc}
 23fce0e:	0000      	.short	0x0000
 23fce10:	1007ac8c 	.word	0x1007ac8c
 23fce14:	00000018 	.word	0x00000018

023fce18 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fce18:	b509      	push	{r0, r3, lr}
 23fce1a:	4804      	ldr	r0, [pc, #16]	; (23fce2c <hal_spi_info+0x14>)
 23fce1c:	6800      	ldr	r0, [r0, #0]
 23fce1e:	4b04      	ldr	r3, [pc, #16]	; (23fce30 <hal_spi_info+0x18>)
 23fce20:	4403      	add	r3, r0
 23fce22:	681b      	ldr	r3, [r3, #0]
 23fce24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fce26:	9302      	str	r3, [sp, #8]
 23fce28:	bd09      	pop	{r0, r3, pc}
 23fce2a:	0000      	.short	0x0000
 23fce2c:	1007ac8c 	.word	0x1007ac8c
 23fce30:	00000018 	.word	0x00000018

023fce34 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fce34:	b509      	push	{r0, r3, lr}
 23fce36:	4804      	ldr	r0, [pc, #16]	; (23fce48 <hal_spi_transfer_dma+0x14>)
 23fce38:	6800      	ldr	r0, [r0, #0]
 23fce3a:	4b04      	ldr	r3, [pc, #16]	; (23fce4c <hal_spi_transfer_dma+0x18>)
 23fce3c:	4403      	add	r3, r0
 23fce3e:	681b      	ldr	r3, [r3, #0]
 23fce40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fce42:	9302      	str	r3, [sp, #8]
 23fce44:	bd09      	pop	{r0, r3, pc}
 23fce46:	0000      	.short	0x0000
 23fce48:	1007ac8c 	.word	0x1007ac8c
 23fce4c:	00000018 	.word	0x00000018

023fce50 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
 23fce50:	b509      	push	{r0, r3, lr}
 23fce52:	4804      	ldr	r0, [pc, #16]	; (23fce64 <hal_spi_begin_ext+0x14>)
 23fce54:	6800      	ldr	r0, [r0, #0]
 23fce56:	4b04      	ldr	r3, [pc, #16]	; (23fce68 <hal_spi_begin_ext+0x18>)
 23fce58:	4403      	add	r3, r0
 23fce5a:	681b      	ldr	r3, [r3, #0]
 23fce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fce5e:	9302      	str	r3, [sp, #8]
 23fce60:	bd09      	pop	{r0, r3, pc}
 23fce62:	0000      	.short	0x0000
 23fce64:	1007ac8c 	.word	0x1007ac8c
 23fce68:	00000018 	.word	0x00000018

023fce6c <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fce6c:	b509      	push	{r0, r3, lr}
 23fce6e:	4804      	ldr	r0, [pc, #16]	; (23fce80 <hal_spi_transfer_dma_status+0x14>)
 23fce70:	6800      	ldr	r0, [r0, #0]
 23fce72:	4b04      	ldr	r3, [pc, #16]	; (23fce84 <hal_spi_transfer_dma_status+0x18>)
 23fce74:	4403      	add	r3, r0
 23fce76:	681b      	ldr	r3, [r3, #0]
 23fce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fce7a:	9302      	str	r3, [sp, #8]
 23fce7c:	bd09      	pop	{r0, r3, pc}
 23fce7e:	0000      	.short	0x0000
 23fce80:	1007ac8c 	.word	0x1007ac8c
 23fce84:	00000018 	.word	0x00000018

023fce88 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fce88:	b509      	push	{r0, r3, lr}
 23fce8a:	4804      	ldr	r0, [pc, #16]	; (23fce9c <hal_spi_set_settings+0x14>)
 23fce8c:	6800      	ldr	r0, [r0, #0]
 23fce8e:	4b04      	ldr	r3, [pc, #16]	; (23fcea0 <hal_spi_set_settings+0x18>)
 23fce90:	4403      	add	r3, r0
 23fce92:	681b      	ldr	r3, [r3, #0]
 23fce94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fce96:	9302      	str	r3, [sp, #8]
 23fce98:	bd09      	pop	{r0, r3, pc}
 23fce9a:	0000      	.short	0x0000
 23fce9c:	1007ac8c 	.word	0x1007ac8c
 23fcea0:	00000018 	.word	0x00000018

023fcea4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fcea4:	b509      	push	{r0, r3, lr}
 23fcea6:	4804      	ldr	r0, [pc, #16]	; (23fceb8 <hal_spi_acquire+0x14>)
 23fcea8:	6800      	ldr	r0, [r0, #0]
 23fceaa:	4b04      	ldr	r3, [pc, #16]	; (23fcebc <hal_spi_acquire+0x18>)
 23fceac:	4403      	add	r3, r0
 23fceae:	681b      	ldr	r3, [r3, #0]
 23fceb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fceb2:	9302      	str	r3, [sp, #8]
 23fceb4:	bd09      	pop	{r0, r3, pc}
 23fceb6:	0000      	.short	0x0000
 23fceb8:	1007ac8c 	.word	0x1007ac8c
 23fcebc:	00000018 	.word	0x00000018

023fcec0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fcec0:	b509      	push	{r0, r3, lr}
 23fcec2:	4804      	ldr	r0, [pc, #16]	; (23fced4 <hal_spi_release+0x14>)
 23fcec4:	6800      	ldr	r0, [r0, #0]
 23fcec6:	4b04      	ldr	r3, [pc, #16]	; (23fced8 <hal_spi_release+0x18>)
 23fcec8:	4403      	add	r3, r0
 23fceca:	681b      	ldr	r3, [r3, #0]
 23fcecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcece:	9302      	str	r3, [sp, #8]
 23fced0:	bd09      	pop	{r0, r3, pc}
 23fced2:	0000      	.short	0x0000
 23fced4:	1007ac8c 	.word	0x1007ac8c
 23fced8:	00000018 	.word	0x00000018

023fcedc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fcedc:	b509      	push	{r0, r3, lr}
 23fcede:	4804      	ldr	r0, [pc, #16]	; (23fcef0 <HAL_USB_USART_Init+0x14>)
 23fcee0:	6800      	ldr	r0, [r0, #0]
 23fcee2:	4b04      	ldr	r3, [pc, #16]	; (23fcef4 <HAL_USB_USART_Init+0x18>)
 23fcee4:	4403      	add	r3, r0
 23fcee6:	681b      	ldr	r3, [r3, #0]
 23fcee8:	681b      	ldr	r3, [r3, #0]
 23fceea:	9302      	str	r3, [sp, #8]
 23fceec:	bd09      	pop	{r0, r3, pc}
 23fceee:	0000      	.short	0x0000
 23fcef0:	1007ac8c 	.word	0x1007ac8c
 23fcef4:	00000034 	.word	0x00000034

023fcef8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fcef8:	b509      	push	{r0, r3, lr}
 23fcefa:	4804      	ldr	r0, [pc, #16]	; (23fcf0c <HAL_USB_USART_Begin+0x14>)
 23fcefc:	6800      	ldr	r0, [r0, #0]
 23fcefe:	4b04      	ldr	r3, [pc, #16]	; (23fcf10 <HAL_USB_USART_Begin+0x18>)
 23fcf00:	4403      	add	r3, r0
 23fcf02:	681b      	ldr	r3, [r3, #0]
 23fcf04:	685b      	ldr	r3, [r3, #4]
 23fcf06:	9302      	str	r3, [sp, #8]
 23fcf08:	bd09      	pop	{r0, r3, pc}
 23fcf0a:	0000      	.short	0x0000
 23fcf0c:	1007ac8c 	.word	0x1007ac8c
 23fcf10:	00000034 	.word	0x00000034

023fcf14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fcf14:	b509      	push	{r0, r3, lr}
 23fcf16:	4804      	ldr	r0, [pc, #16]	; (23fcf28 <HAL_USB_USART_Available_Data+0x14>)
 23fcf18:	6800      	ldr	r0, [r0, #0]
 23fcf1a:	4b04      	ldr	r3, [pc, #16]	; (23fcf2c <HAL_USB_USART_Available_Data+0x18>)
 23fcf1c:	4403      	add	r3, r0
 23fcf1e:	681b      	ldr	r3, [r3, #0]
 23fcf20:	691b      	ldr	r3, [r3, #16]
 23fcf22:	9302      	str	r3, [sp, #8]
 23fcf24:	bd09      	pop	{r0, r3, pc}
 23fcf26:	0000      	.short	0x0000
 23fcf28:	1007ac8c 	.word	0x1007ac8c
 23fcf2c:	00000034 	.word	0x00000034

023fcf30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fcf30:	b509      	push	{r0, r3, lr}
 23fcf32:	4804      	ldr	r0, [pc, #16]	; (23fcf44 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fcf34:	6800      	ldr	r0, [r0, #0]
 23fcf36:	4b04      	ldr	r3, [pc, #16]	; (23fcf48 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fcf38:	4403      	add	r3, r0
 23fcf3a:	681b      	ldr	r3, [r3, #0]
 23fcf3c:	695b      	ldr	r3, [r3, #20]
 23fcf3e:	9302      	str	r3, [sp, #8]
 23fcf40:	bd09      	pop	{r0, r3, pc}
 23fcf42:	0000      	.short	0x0000
 23fcf44:	1007ac8c 	.word	0x1007ac8c
 23fcf48:	00000034 	.word	0x00000034

023fcf4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcf4c:	b509      	push	{r0, r3, lr}
 23fcf4e:	4804      	ldr	r0, [pc, #16]	; (23fcf60 <HAL_USB_USART_Receive_Data+0x14>)
 23fcf50:	6800      	ldr	r0, [r0, #0]
 23fcf52:	4b04      	ldr	r3, [pc, #16]	; (23fcf64 <HAL_USB_USART_Receive_Data+0x18>)
 23fcf54:	4403      	add	r3, r0
 23fcf56:	681b      	ldr	r3, [r3, #0]
 23fcf58:	699b      	ldr	r3, [r3, #24]
 23fcf5a:	9302      	str	r3, [sp, #8]
 23fcf5c:	bd09      	pop	{r0, r3, pc}
 23fcf5e:	0000      	.short	0x0000
 23fcf60:	1007ac8c 	.word	0x1007ac8c
 23fcf64:	00000034 	.word	0x00000034

023fcf68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcf68:	b509      	push	{r0, r3, lr}
 23fcf6a:	4804      	ldr	r0, [pc, #16]	; (23fcf7c <HAL_USB_USART_Send_Data+0x14>)
 23fcf6c:	6800      	ldr	r0, [r0, #0]
 23fcf6e:	4b04      	ldr	r3, [pc, #16]	; (23fcf80 <HAL_USB_USART_Send_Data+0x18>)
 23fcf70:	4403      	add	r3, r0
 23fcf72:	681b      	ldr	r3, [r3, #0]
 23fcf74:	69db      	ldr	r3, [r3, #28]
 23fcf76:	9302      	str	r3, [sp, #8]
 23fcf78:	bd09      	pop	{r0, r3, pc}
 23fcf7a:	0000      	.short	0x0000
 23fcf7c:	1007ac8c 	.word	0x1007ac8c
 23fcf80:	00000034 	.word	0x00000034

023fcf84 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fcf84:	b509      	push	{r0, r3, lr}
 23fcf86:	4804      	ldr	r0, [pc, #16]	; (23fcf98 <HAL_USB_USART_Flush_Data+0x14>)
 23fcf88:	6800      	ldr	r0, [r0, #0]
 23fcf8a:	4b04      	ldr	r3, [pc, #16]	; (23fcf9c <HAL_USB_USART_Flush_Data+0x18>)
 23fcf8c:	4403      	add	r3, r0
 23fcf8e:	681b      	ldr	r3, [r3, #0]
 23fcf90:	6a1b      	ldr	r3, [r3, #32]
 23fcf92:	9302      	str	r3, [sp, #8]
 23fcf94:	bd09      	pop	{r0, r3, pc}
 23fcf96:	0000      	.short	0x0000
 23fcf98:	1007ac8c 	.word	0x1007ac8c
 23fcf9c:	00000034 	.word	0x00000034

023fcfa0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fcfa0:	b509      	push	{r0, r3, lr}
 23fcfa2:	4804      	ldr	r0, [pc, #16]	; (23fcfb4 <panic_+0x14>)
 23fcfa4:	6800      	ldr	r0, [r0, #0]
 23fcfa6:	4b04      	ldr	r3, [pc, #16]	; (23fcfb8 <panic_+0x18>)
 23fcfa8:	4403      	add	r3, r0
 23fcfaa:	681b      	ldr	r3, [r3, #0]
 23fcfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcfae:	9302      	str	r3, [sp, #8]
 23fcfb0:	bd09      	pop	{r0, r3, pc}
 23fcfb2:	0000      	.short	0x0000
 23fcfb4:	1007ac8c 	.word	0x1007ac8c
 23fcfb8:	00000048 	.word	0x00000048

023fcfbc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fcfbc:	b509      	push	{r0, r3, lr}
 23fcfbe:	4804      	ldr	r0, [pc, #16]	; (23fcfd0 <log_message+0x14>)
 23fcfc0:	6800      	ldr	r0, [r0, #0]
 23fcfc2:	4b04      	ldr	r3, [pc, #16]	; (23fcfd4 <log_message+0x18>)
 23fcfc4:	4403      	add	r3, r0
 23fcfc6:	681b      	ldr	r3, [r3, #0]
 23fcfc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fcfca:	9302      	str	r3, [sp, #8]
 23fcfcc:	bd09      	pop	{r0, r3, pc}
 23fcfce:	0000      	.short	0x0000
 23fcfd0:	1007ac8c 	.word	0x1007ac8c
 23fcfd4:	00000048 	.word	0x00000048

023fcfd8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fcfd8:	b509      	push	{r0, r3, lr}
 23fcfda:	4804      	ldr	r0, [pc, #16]	; (23fcfec <log_message_v+0x14>)
 23fcfdc:	6800      	ldr	r0, [r0, #0]
 23fcfde:	4b04      	ldr	r3, [pc, #16]	; (23fcff0 <log_message_v+0x18>)
 23fcfe0:	4403      	add	r3, r0
 23fcfe2:	681b      	ldr	r3, [r3, #0]
 23fcfe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcfe6:	9302      	str	r3, [sp, #8]
 23fcfe8:	bd09      	pop	{r0, r3, pc}
 23fcfea:	0000      	.short	0x0000
 23fcfec:	1007ac8c 	.word	0x1007ac8c
 23fcff0:	00000048 	.word	0x00000048

023fcff4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23fcff4:	b509      	push	{r0, r3, lr}
 23fcff6:	4804      	ldr	r0, [pc, #16]	; (23fd008 <system_mode+0x14>)
 23fcff8:	6800      	ldr	r0, [r0, #0]
 23fcffa:	4b04      	ldr	r3, [pc, #16]	; (23fd00c <system_mode+0x18>)
 23fcffc:	4403      	add	r3, r0
 23fcffe:	681b      	ldr	r3, [r3, #0]
 23fd000:	681b      	ldr	r3, [r3, #0]
 23fd002:	9302      	str	r3, [sp, #8]
 23fd004:	bd09      	pop	{r0, r3, pc}
 23fd006:	0000      	.short	0x0000
 23fd008:	1007ac8c 	.word	0x1007ac8c
 23fd00c:	00000008 	.word	0x00000008

023fd010 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd010:	b509      	push	{r0, r3, lr}
 23fd012:	4804      	ldr	r0, [pc, #16]	; (23fd024 <set_system_mode+0x14>)
 23fd014:	6800      	ldr	r0, [r0, #0]
 23fd016:	4b04      	ldr	r3, [pc, #16]	; (23fd028 <set_system_mode+0x18>)
 23fd018:	4403      	add	r3, r0
 23fd01a:	681b      	ldr	r3, [r3, #0]
 23fd01c:	685b      	ldr	r3, [r3, #4]
 23fd01e:	9302      	str	r3, [sp, #8]
 23fd020:	bd09      	pop	{r0, r3, pc}
 23fd022:	0000      	.short	0x0000
 23fd024:	1007ac8c 	.word	0x1007ac8c
 23fd028:	00000008 	.word	0x00000008

023fd02c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd02c:	b509      	push	{r0, r3, lr}
 23fd02e:	4804      	ldr	r0, [pc, #16]	; (23fd040 <system_delay_ms+0x14>)
 23fd030:	6800      	ldr	r0, [r0, #0]
 23fd032:	4b04      	ldr	r3, [pc, #16]	; (23fd044 <system_delay_ms+0x18>)
 23fd034:	4403      	add	r3, r0
 23fd036:	681b      	ldr	r3, [r3, #0]
 23fd038:	695b      	ldr	r3, [r3, #20]
 23fd03a:	9302      	str	r3, [sp, #8]
 23fd03c:	bd09      	pop	{r0, r3, pc}
 23fd03e:	0000      	.short	0x0000
 23fd040:	1007ac8c 	.word	0x1007ac8c
 23fd044:	00000008 	.word	0x00000008

023fd048 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23fd048:	b509      	push	{r0, r3, lr}
 23fd04a:	4804      	ldr	r0, [pc, #16]	; (23fd05c <system_thread_get_state+0x14>)
 23fd04c:	6800      	ldr	r0, [r0, #0]
 23fd04e:	4b04      	ldr	r3, [pc, #16]	; (23fd060 <system_thread_get_state+0x18>)
 23fd050:	4403      	add	r3, r0
 23fd052:	681b      	ldr	r3, [r3, #0]
 23fd054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd056:	9302      	str	r3, [sp, #8]
 23fd058:	bd09      	pop	{r0, r3, pc}
 23fd05a:	0000      	.short	0x0000
 23fd05c:	1007ac8c 	.word	0x1007ac8c
 23fd060:	00000008 	.word	0x00000008

023fd064 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd064:	b509      	push	{r0, r3, lr}
 23fd066:	4804      	ldr	r0, [pc, #16]	; (23fd078 <system_ctrl_set_app_request_handler+0x14>)
 23fd068:	6800      	ldr	r0, [r0, #0]
 23fd06a:	4b04      	ldr	r3, [pc, #16]	; (23fd07c <system_ctrl_set_app_request_handler+0x18>)
 23fd06c:	4403      	add	r3, r0
 23fd06e:	681b      	ldr	r3, [r3, #0]
 23fd070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd074:	9302      	str	r3, [sp, #8]
 23fd076:	bd09      	pop	{r0, r3, pc}
 23fd078:	1007ac8c 	.word	0x1007ac8c
 23fd07c:	00000008 	.word	0x00000008

023fd080 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd080:	b509      	push	{r0, r3, lr}
 23fd082:	4804      	ldr	r0, [pc, #16]	; (23fd094 <system_ctrl_set_result+0x14>)
 23fd084:	6800      	ldr	r0, [r0, #0]
 23fd086:	4b04      	ldr	r3, [pc, #16]	; (23fd098 <system_ctrl_set_result+0x18>)
 23fd088:	4403      	add	r3, r0
 23fd08a:	681b      	ldr	r3, [r3, #0]
 23fd08c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd090:	9302      	str	r3, [sp, #8]
 23fd092:	bd09      	pop	{r0, r3, pc}
 23fd094:	1007ac8c 	.word	0x1007ac8c
 23fd098:	00000008 	.word	0x00000008

023fd09c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd09c:	b509      	push	{r0, r3, lr}
 23fd09e:	4804      	ldr	r0, [pc, #16]	; (23fd0b0 <network_connect+0x14>)
 23fd0a0:	6800      	ldr	r0, [r0, #0]
 23fd0a2:	4b04      	ldr	r3, [pc, #16]	; (23fd0b4 <network_connect+0x18>)
 23fd0a4:	4403      	add	r3, r0
 23fd0a6:	681b      	ldr	r3, [r3, #0]
 23fd0a8:	685b      	ldr	r3, [r3, #4]
 23fd0aa:	9302      	str	r3, [sp, #8]
 23fd0ac:	bd09      	pop	{r0, r3, pc}
 23fd0ae:	0000      	.short	0x0000
 23fd0b0:	1007ac8c 	.word	0x1007ac8c
 23fd0b4:	00000028 	.word	0x00000028

023fd0b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd0b8:	b509      	push	{r0, r3, lr}
 23fd0ba:	4804      	ldr	r0, [pc, #16]	; (23fd0cc <network_connecting+0x14>)
 23fd0bc:	6800      	ldr	r0, [r0, #0]
 23fd0be:	4b04      	ldr	r3, [pc, #16]	; (23fd0d0 <network_connecting+0x18>)
 23fd0c0:	4403      	add	r3, r0
 23fd0c2:	681b      	ldr	r3, [r3, #0]
 23fd0c4:	689b      	ldr	r3, [r3, #8]
 23fd0c6:	9302      	str	r3, [sp, #8]
 23fd0c8:	bd09      	pop	{r0, r3, pc}
 23fd0ca:	0000      	.short	0x0000
 23fd0cc:	1007ac8c 	.word	0x1007ac8c
 23fd0d0:	00000028 	.word	0x00000028

023fd0d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd0d4:	b509      	push	{r0, r3, lr}
 23fd0d6:	4804      	ldr	r0, [pc, #16]	; (23fd0e8 <network_disconnect+0x14>)
 23fd0d8:	6800      	ldr	r0, [r0, #0]
 23fd0da:	4b04      	ldr	r3, [pc, #16]	; (23fd0ec <network_disconnect+0x18>)
 23fd0dc:	4403      	add	r3, r0
 23fd0de:	681b      	ldr	r3, [r3, #0]
 23fd0e0:	68db      	ldr	r3, [r3, #12]
 23fd0e2:	9302      	str	r3, [sp, #8]
 23fd0e4:	bd09      	pop	{r0, r3, pc}
 23fd0e6:	0000      	.short	0x0000
 23fd0e8:	1007ac8c 	.word	0x1007ac8c
 23fd0ec:	00000028 	.word	0x00000028

023fd0f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd0f0:	b509      	push	{r0, r3, lr}
 23fd0f2:	4804      	ldr	r0, [pc, #16]	; (23fd104 <network_ready+0x14>)
 23fd0f4:	6800      	ldr	r0, [r0, #0]
 23fd0f6:	4b04      	ldr	r3, [pc, #16]	; (23fd108 <network_ready+0x18>)
 23fd0f8:	4403      	add	r3, r0
 23fd0fa:	681b      	ldr	r3, [r3, #0]
 23fd0fc:	691b      	ldr	r3, [r3, #16]
 23fd0fe:	9302      	str	r3, [sp, #8]
 23fd100:	bd09      	pop	{r0, r3, pc}
 23fd102:	0000      	.short	0x0000
 23fd104:	1007ac8c 	.word	0x1007ac8c
 23fd108:	00000028 	.word	0x00000028

023fd10c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd10c:	b509      	push	{r0, r3, lr}
 23fd10e:	4804      	ldr	r0, [pc, #16]	; (23fd120 <network_on+0x14>)
 23fd110:	6800      	ldr	r0, [r0, #0]
 23fd112:	4b04      	ldr	r3, [pc, #16]	; (23fd124 <network_on+0x18>)
 23fd114:	4403      	add	r3, r0
 23fd116:	681b      	ldr	r3, [r3, #0]
 23fd118:	695b      	ldr	r3, [r3, #20]
 23fd11a:	9302      	str	r3, [sp, #8]
 23fd11c:	bd09      	pop	{r0, r3, pc}
 23fd11e:	0000      	.short	0x0000
 23fd120:	1007ac8c 	.word	0x1007ac8c
 23fd124:	00000028 	.word	0x00000028

023fd128 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd128:	b509      	push	{r0, r3, lr}
 23fd12a:	4804      	ldr	r0, [pc, #16]	; (23fd13c <network_off+0x14>)
 23fd12c:	6800      	ldr	r0, [r0, #0]
 23fd12e:	4b04      	ldr	r3, [pc, #16]	; (23fd140 <network_off+0x18>)
 23fd130:	4403      	add	r3, r0
 23fd132:	681b      	ldr	r3, [r3, #0]
 23fd134:	699b      	ldr	r3, [r3, #24]
 23fd136:	9302      	str	r3, [sp, #8]
 23fd138:	bd09      	pop	{r0, r3, pc}
 23fd13a:	0000      	.short	0x0000
 23fd13c:	1007ac8c 	.word	0x1007ac8c
 23fd140:	00000028 	.word	0x00000028

023fd144 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd144:	b509      	push	{r0, r3, lr}
 23fd146:	4804      	ldr	r0, [pc, #16]	; (23fd158 <network_listen+0x14>)
 23fd148:	6800      	ldr	r0, [r0, #0]
 23fd14a:	4b04      	ldr	r3, [pc, #16]	; (23fd15c <network_listen+0x18>)
 23fd14c:	4403      	add	r3, r0
 23fd14e:	681b      	ldr	r3, [r3, #0]
 23fd150:	69db      	ldr	r3, [r3, #28]
 23fd152:	9302      	str	r3, [sp, #8]
 23fd154:	bd09      	pop	{r0, r3, pc}
 23fd156:	0000      	.short	0x0000
 23fd158:	1007ac8c 	.word	0x1007ac8c
 23fd15c:	00000028 	.word	0x00000028

023fd160 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd160:	b509      	push	{r0, r3, lr}
 23fd162:	4804      	ldr	r0, [pc, #16]	; (23fd174 <network_listening+0x14>)
 23fd164:	6800      	ldr	r0, [r0, #0]
 23fd166:	4b04      	ldr	r3, [pc, #16]	; (23fd178 <network_listening+0x18>)
 23fd168:	4403      	add	r3, r0
 23fd16a:	681b      	ldr	r3, [r3, #0]
 23fd16c:	6a1b      	ldr	r3, [r3, #32]
 23fd16e:	9302      	str	r3, [sp, #8]
 23fd170:	bd09      	pop	{r0, r3, pc}
 23fd172:	0000      	.short	0x0000
 23fd174:	1007ac8c 	.word	0x1007ac8c
 23fd178:	00000028 	.word	0x00000028

023fd17c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd17c:	b509      	push	{r0, r3, lr}
 23fd17e:	4804      	ldr	r0, [pc, #16]	; (23fd190 <network_set_listen_timeout+0x14>)
 23fd180:	6800      	ldr	r0, [r0, #0]
 23fd182:	4b04      	ldr	r3, [pc, #16]	; (23fd194 <network_set_listen_timeout+0x18>)
 23fd184:	4403      	add	r3, r0
 23fd186:	681b      	ldr	r3, [r3, #0]
 23fd188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd18a:	9302      	str	r3, [sp, #8]
 23fd18c:	bd09      	pop	{r0, r3, pc}
 23fd18e:	0000      	.short	0x0000
 23fd190:	1007ac8c 	.word	0x1007ac8c
 23fd194:	00000028 	.word	0x00000028

023fd198 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd198:	b509      	push	{r0, r3, lr}
 23fd19a:	4804      	ldr	r0, [pc, #16]	; (23fd1ac <network_get_listen_timeout+0x14>)
 23fd19c:	6800      	ldr	r0, [r0, #0]
 23fd19e:	4b04      	ldr	r3, [pc, #16]	; (23fd1b0 <network_get_listen_timeout+0x18>)
 23fd1a0:	4403      	add	r3, r0
 23fd1a2:	681b      	ldr	r3, [r3, #0]
 23fd1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd1a6:	9302      	str	r3, [sp, #8]
 23fd1a8:	bd09      	pop	{r0, r3, pc}
 23fd1aa:	0000      	.short	0x0000
 23fd1ac:	1007ac8c 	.word	0x1007ac8c
 23fd1b0:	00000028 	.word	0x00000028

023fd1b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd1b4:	b509      	push	{r0, r3, lr}
 23fd1b6:	4804      	ldr	r0, [pc, #16]	; (23fd1c8 <network_is_on+0x14>)
 23fd1b8:	6800      	ldr	r0, [r0, #0]
 23fd1ba:	4b04      	ldr	r3, [pc, #16]	; (23fd1cc <network_is_on+0x18>)
 23fd1bc:	4403      	add	r3, r0
 23fd1be:	681b      	ldr	r3, [r3, #0]
 23fd1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd1c2:	9302      	str	r3, [sp, #8]
 23fd1c4:	bd09      	pop	{r0, r3, pc}
 23fd1c6:	0000      	.short	0x0000
 23fd1c8:	1007ac8c 	.word	0x1007ac8c
 23fd1cc:	00000028 	.word	0x00000028

023fd1d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd1d0:	b509      	push	{r0, r3, lr}
 23fd1d2:	4804      	ldr	r0, [pc, #16]	; (23fd1e4 <network_is_off+0x14>)
 23fd1d4:	6800      	ldr	r0, [r0, #0]
 23fd1d6:	4b04      	ldr	r3, [pc, #16]	; (23fd1e8 <network_is_off+0x18>)
 23fd1d8:	4403      	add	r3, r0
 23fd1da:	681b      	ldr	r3, [r3, #0]
 23fd1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd1de:	9302      	str	r3, [sp, #8]
 23fd1e0:	bd09      	pop	{r0, r3, pc}
 23fd1e2:	0000      	.short	0x0000
 23fd1e4:	1007ac8c 	.word	0x1007ac8c
 23fd1e8:	00000028 	.word	0x00000028

023fd1ec <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fd1ec:	b509      	push	{r0, r3, lr}
 23fd1ee:	4804      	ldr	r0, [pc, #16]	; (23fd200 <network_prefer+0x14>)
 23fd1f0:	6800      	ldr	r0, [r0, #0]
 23fd1f2:	4b04      	ldr	r3, [pc, #16]	; (23fd204 <network_prefer+0x18>)
 23fd1f4:	4403      	add	r3, r0
 23fd1f6:	681b      	ldr	r3, [r3, #0]
 23fd1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd1fa:	9302      	str	r3, [sp, #8]
 23fd1fc:	bd09      	pop	{r0, r3, pc}
 23fd1fe:	0000      	.short	0x0000
 23fd200:	1007ac8c 	.word	0x1007ac8c
 23fd204:	00000028 	.word	0x00000028

023fd208 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd208:	b509      	push	{r0, r3, lr}
 23fd20a:	4804      	ldr	r0, [pc, #16]	; (23fd21c <network_is_preferred+0x14>)
 23fd20c:	6800      	ldr	r0, [r0, #0]
 23fd20e:	4b04      	ldr	r3, [pc, #16]	; (23fd220 <network_is_preferred+0x18>)
 23fd210:	4403      	add	r3, r0
 23fd212:	681b      	ldr	r3, [r3, #0]
 23fd214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd216:	9302      	str	r3, [sp, #8]
 23fd218:	bd09      	pop	{r0, r3, pc}
 23fd21a:	0000      	.short	0x0000
 23fd21c:	1007ac8c 	.word	0x1007ac8c
 23fd220:	00000028 	.word	0x00000028

023fd224 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fd224:	b509      	push	{r0, r3, lr}
 23fd226:	4804      	ldr	r0, [pc, #16]	; (23fd238 <spark_process+0x14>)
 23fd228:	6800      	ldr	r0, [r0, #0]
 23fd22a:	4b04      	ldr	r3, [pc, #16]	; (23fd23c <spark_process+0x18>)
 23fd22c:	4403      	add	r3, r0
 23fd22e:	681b      	ldr	r3, [r3, #0]
 23fd230:	689b      	ldr	r3, [r3, #8]
 23fd232:	9302      	str	r3, [sp, #8]
 23fd234:	bd09      	pop	{r0, r3, pc}
 23fd236:	0000      	.short	0x0000
 23fd238:	1007ac8c 	.word	0x1007ac8c
 23fd23c:	0000002c 	.word	0x0000002c

023fd240 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fd240:	b509      	push	{r0, r3, lr}
 23fd242:	4804      	ldr	r0, [pc, #16]	; (23fd254 <spark_cloud_flag_connected+0x14>)
 23fd244:	6800      	ldr	r0, [r0, #0]
 23fd246:	4b04      	ldr	r3, [pc, #16]	; (23fd258 <spark_cloud_flag_connected+0x18>)
 23fd248:	4403      	add	r3, r0
 23fd24a:	681b      	ldr	r3, [r3, #0]
 23fd24c:	695b      	ldr	r3, [r3, #20]
 23fd24e:	9302      	str	r3, [sp, #8]
 23fd250:	bd09      	pop	{r0, r3, pc}
 23fd252:	0000      	.short	0x0000
 23fd254:	1007ac8c 	.word	0x1007ac8c
 23fd258:	0000002c 	.word	0x0000002c

023fd25c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 23fd25c:	b509      	push	{r0, r3, lr}
 23fd25e:	4804      	ldr	r0, [pc, #16]	; (23fd270 <spark_sync_time+0x14>)
 23fd260:	6800      	ldr	r0, [r0, #0]
 23fd262:	4b04      	ldr	r3, [pc, #16]	; (23fd274 <spark_sync_time+0x18>)
 23fd264:	4403      	add	r3, r0
 23fd266:	681b      	ldr	r3, [r3, #0]
 23fd268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd26a:	9302      	str	r3, [sp, #8]
 23fd26c:	bd09      	pop	{r0, r3, pc}
 23fd26e:	0000      	.short	0x0000
 23fd270:	1007ac8c 	.word	0x1007ac8c
 23fd274:	0000002c 	.word	0x0000002c

023fd278 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23fd278:	b509      	push	{r0, r3, lr}
 23fd27a:	4804      	ldr	r0, [pc, #16]	; (23fd28c <spark_sync_time_pending+0x14>)
 23fd27c:	6800      	ldr	r0, [r0, #0]
 23fd27e:	4b04      	ldr	r3, [pc, #16]	; (23fd290 <spark_sync_time_pending+0x18>)
 23fd280:	4403      	add	r3, r0
 23fd282:	681b      	ldr	r3, [r3, #0]
 23fd284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd286:	9302      	str	r3, [sp, #8]
 23fd288:	bd09      	pop	{r0, r3, pc}
 23fd28a:	0000      	.short	0x0000
 23fd28c:	1007ac8c 	.word	0x1007ac8c
 23fd290:	0000002c 	.word	0x0000002c

023fd294 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd294:	b509      	push	{r0, r3, lr}
 23fd296:	4804      	ldr	r0, [pc, #16]	; (23fd2a8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd298:	6800      	ldr	r0, [r0, #0]
 23fd29a:	4b04      	ldr	r3, [pc, #16]	; (23fd2ac <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd29c:	4403      	add	r3, r0
 23fd29e:	681b      	ldr	r3, [r3, #0]
 23fd2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd2a2:	9302      	str	r3, [sp, #8]
 23fd2a4:	bd09      	pop	{r0, r3, pc}
 23fd2a6:	0000      	.short	0x0000
 23fd2a8:	1007ac8c 	.word	0x1007ac8c
 23fd2ac:	0000002c 	.word	0x0000002c

023fd2b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd2b0:	b509      	push	{r0, r3, lr}
 23fd2b2:	4804      	ldr	r0, [pc, #16]	; (23fd2c4 <malloc+0x14>)
 23fd2b4:	6800      	ldr	r0, [r0, #0]
 23fd2b6:	4b04      	ldr	r3, [pc, #16]	; (23fd2c8 <malloc+0x18>)
 23fd2b8:	4403      	add	r3, r0
 23fd2ba:	681b      	ldr	r3, [r3, #0]
 23fd2bc:	681b      	ldr	r3, [r3, #0]
 23fd2be:	9302      	str	r3, [sp, #8]
 23fd2c0:	bd09      	pop	{r0, r3, pc}
 23fd2c2:	0000      	.short	0x0000
 23fd2c4:	1007ac8c 	.word	0x1007ac8c
 23fd2c8:	00000004 	.word	0x00000004

023fd2cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd2cc:	b509      	push	{r0, r3, lr}
 23fd2ce:	4804      	ldr	r0, [pc, #16]	; (23fd2e0 <free+0x14>)
 23fd2d0:	6800      	ldr	r0, [r0, #0]
 23fd2d2:	4b04      	ldr	r3, [pc, #16]	; (23fd2e4 <free+0x18>)
 23fd2d4:	4403      	add	r3, r0
 23fd2d6:	681b      	ldr	r3, [r3, #0]
 23fd2d8:	685b      	ldr	r3, [r3, #4]
 23fd2da:	9302      	str	r3, [sp, #8]
 23fd2dc:	bd09      	pop	{r0, r3, pc}
 23fd2de:	0000      	.short	0x0000
 23fd2e0:	1007ac8c 	.word	0x1007ac8c
 23fd2e4:	00000004 	.word	0x00000004

023fd2e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd2e8:	b509      	push	{r0, r3, lr}
 23fd2ea:	4804      	ldr	r0, [pc, #16]	; (23fd2fc <realloc+0x14>)
 23fd2ec:	6800      	ldr	r0, [r0, #0]
 23fd2ee:	4b04      	ldr	r3, [pc, #16]	; (23fd300 <realloc+0x18>)
 23fd2f0:	4403      	add	r3, r0
 23fd2f2:	681b      	ldr	r3, [r3, #0]
 23fd2f4:	689b      	ldr	r3, [r3, #8]
 23fd2f6:	9302      	str	r3, [sp, #8]
 23fd2f8:	bd09      	pop	{r0, r3, pc}
 23fd2fa:	0000      	.short	0x0000
 23fd2fc:	1007ac8c 	.word	0x1007ac8c
 23fd300:	00000004 	.word	0x00000004

023fd304 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23fd304:	b509      	push	{r0, r3, lr}
 23fd306:	4804      	ldr	r0, [pc, #16]	; (23fd318 <snprintf+0x14>)
 23fd308:	6800      	ldr	r0, [r0, #0]
 23fd30a:	4b04      	ldr	r3, [pc, #16]	; (23fd31c <snprintf+0x18>)
 23fd30c:	4403      	add	r3, r0
 23fd30e:	681b      	ldr	r3, [r3, #0]
 23fd310:	69db      	ldr	r3, [r3, #28]
 23fd312:	9302      	str	r3, [sp, #8]
 23fd314:	bd09      	pop	{r0, r3, pc}
 23fd316:	0000      	.short	0x0000
 23fd318:	1007ac8c 	.word	0x1007ac8c
 23fd31c:	00000004 	.word	0x00000004

023fd320 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd320:	b509      	push	{r0, r3, lr}
 23fd322:	4804      	ldr	r0, [pc, #16]	; (23fd334 <vsnprintf+0x14>)
 23fd324:	6800      	ldr	r0, [r0, #0]
 23fd326:	4b04      	ldr	r3, [pc, #16]	; (23fd338 <vsnprintf+0x18>)
 23fd328:	4403      	add	r3, r0
 23fd32a:	681b      	ldr	r3, [r3, #0]
 23fd32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd32e:	9302      	str	r3, [sp, #8]
 23fd330:	bd09      	pop	{r0, r3, pc}
 23fd332:	0000      	.short	0x0000
 23fd334:	1007ac8c 	.word	0x1007ac8c
 23fd338:	00000004 	.word	0x00000004

023fd33c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd33c:	b509      	push	{r0, r3, lr}
 23fd33e:	4804      	ldr	r0, [pc, #16]	; (23fd350 <__errno+0x14>)
 23fd340:	6800      	ldr	r0, [r0, #0]
 23fd342:	4b04      	ldr	r3, [pc, #16]	; (23fd354 <__errno+0x18>)
 23fd344:	4403      	add	r3, r0
 23fd346:	681b      	ldr	r3, [r3, #0]
 23fd348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd34a:	9302      	str	r3, [sp, #8]
 23fd34c:	bd09      	pop	{r0, r3, pc}
 23fd34e:	0000      	.short	0x0000
 23fd350:	1007ac8c 	.word	0x1007ac8c
 23fd354:	00000004 	.word	0x00000004

023fd358 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd358:	b509      	push	{r0, r3, lr}
 23fd35a:	4804      	ldr	r0, [pc, #16]	; (23fd36c <__assert_func+0x14>)
 23fd35c:	6800      	ldr	r0, [r0, #0]
 23fd35e:	4b04      	ldr	r3, [pc, #16]	; (23fd370 <__assert_func+0x18>)
 23fd360:	4403      	add	r3, r0
 23fd362:	681b      	ldr	r3, [r3, #0]
 23fd364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd366:	9302      	str	r3, [sp, #8]
 23fd368:	bd09      	pop	{r0, r3, pc}
 23fd36a:	0000      	.short	0x0000
 23fd36c:	1007ac8c 	.word	0x1007ac8c
 23fd370:	00000004 	.word	0x00000004

023fd374 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd374:	b509      	push	{r0, r3, lr}
 23fd376:	4804      	ldr	r0, [pc, #16]	; (23fd388 <newlib_impure_ptr_callback+0x14>)
 23fd378:	6800      	ldr	r0, [r0, #0]
 23fd37a:	4b04      	ldr	r3, [pc, #16]	; (23fd38c <newlib_impure_ptr_callback+0x18>)
 23fd37c:	4403      	add	r3, r0
 23fd37e:	681b      	ldr	r3, [r3, #0]
 23fd380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd382:	9302      	str	r3, [sp, #8]
 23fd384:	bd09      	pop	{r0, r3, pc}
 23fd386:	0000      	.short	0x0000
 23fd388:	1007ac8c 	.word	0x1007ac8c
 23fd38c:	00000004 	.word	0x00000004

023fd390 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23fd390:	b509      	push	{r0, r3, lr}
 23fd392:	4804      	ldr	r0, [pc, #16]	; (23fd3a4 <localtime_r+0x14>)
 23fd394:	6800      	ldr	r0, [r0, #0]
 23fd396:	4b04      	ldr	r3, [pc, #16]	; (23fd3a8 <localtime_r+0x18>)
 23fd398:	4403      	add	r3, r0
 23fd39a:	681b      	ldr	r3, [r3, #0]
 23fd39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fd39e:	9302      	str	r3, [sp, #8]
 23fd3a0:	bd09      	pop	{r0, r3, pc}
 23fd3a2:	0000      	.short	0x0000
 23fd3a4:	1007ac8c 	.word	0x1007ac8c
 23fd3a8:	00000004 	.word	0x00000004

023fd3ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd3ac:	2200      	movs	r2, #0
 23fd3ae:	6840      	ldr	r0, [r0, #4]
 23fd3b0:	4611      	mov	r1, r2
 23fd3b2:	f7ff bed5 	b.w	23fd160 <network_listening>

023fd3b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd3b6:	2200      	movs	r2, #0
 23fd3b8:	6840      	ldr	r0, [r0, #4]
 23fd3ba:	4611      	mov	r1, r2
 23fd3bc:	f7ff beec 	b.w	23fd198 <network_get_listen_timeout>

023fd3c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd3c0:	2200      	movs	r2, #0
 23fd3c2:	6840      	ldr	r0, [r0, #4]
 23fd3c4:	f7ff beda 	b.w	23fd17c <network_set_listen_timeout>

023fd3c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd3c8:	2200      	movs	r2, #0
 23fd3ca:	6840      	ldr	r0, [r0, #4]
 23fd3cc:	f081 0101 	eor.w	r1, r1, #1
 23fd3d0:	f7ff beb8 	b.w	23fd144 <network_listen>

023fd3d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd3d4:	2300      	movs	r3, #0
 23fd3d6:	6840      	ldr	r0, [r0, #4]
 23fd3d8:	461a      	mov	r2, r3
 23fd3da:	4619      	mov	r1, r3
 23fd3dc:	f7ff bea4 	b.w	23fd128 <network_off>

023fd3e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd3e0:	2300      	movs	r3, #0
 23fd3e2:	6840      	ldr	r0, [r0, #4]
 23fd3e4:	461a      	mov	r2, r3
 23fd3e6:	4619      	mov	r1, r3
 23fd3e8:	f7ff be90 	b.w	23fd10c <network_on>

023fd3ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd3ec:	2200      	movs	r2, #0
 23fd3ee:	6840      	ldr	r0, [r0, #4]
 23fd3f0:	4611      	mov	r1, r2
 23fd3f2:	f7ff be7d 	b.w	23fd0f0 <network_ready>

023fd3f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd3f6:	2200      	movs	r2, #0
 23fd3f8:	6840      	ldr	r0, [r0, #4]
 23fd3fa:	4611      	mov	r1, r2
 23fd3fc:	f7ff be5c 	b.w	23fd0b8 <network_connecting>

023fd400 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd400:	2200      	movs	r2, #0
 23fd402:	2102      	movs	r1, #2
 23fd404:	6840      	ldr	r0, [r0, #4]
 23fd406:	f7ff be65 	b.w	23fd0d4 <network_disconnect>

023fd40a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd40a:	2300      	movs	r3, #0
 23fd40c:	6840      	ldr	r0, [r0, #4]
 23fd40e:	461a      	mov	r2, r3
 23fd410:	f7ff be44 	b.w	23fd09c <network_connect>

023fd414 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd414:	2203      	movs	r2, #3
 23fd416:	4b02      	ldr	r3, [pc, #8]	; (23fd420 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd418:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd41a:	4a02      	ldr	r2, [pc, #8]	; (23fd424 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd41c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd41e:	4770      	bx	lr
 23fd420:	1007ae5c 	.word	0x1007ae5c
 23fd424:	023ffc18 	.word	0x023ffc18

023fd428 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd428:	2100      	movs	r1, #0
 23fd42a:	f7ff bd49 	b.w	23fcec0 <hal_spi_release>

023fd42e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd42e:	2100      	movs	r1, #0
 23fd430:	f7ff bd38 	b.w	23fcea4 <hal_spi_acquire>

023fd434 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd434:	b510      	push	{r4, lr}
 23fd436:	4604      	mov	r4, r0
 23fd438:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd43a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd43c:	f7ff fcd0 	bl	23fcde0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd440:	2300      	movs	r3, #0
}
 23fd442:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd444:	6063      	str	r3, [r4, #4]
}
 23fd446:	bd10      	pop	{r4, pc}

023fd448 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd448:	b513      	push	{r0, r1, r4, lr}
 23fd44a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd44c:	7800      	ldrb	r0, [r0, #0]
 23fd44e:	f7ff ffee 	bl	23fd42e <_ZN8SPIClass4lockEv.isra.0>
 23fd452:	b958      	cbnz	r0, 23fd46c <_ZN8SPIClass5beginEv+0x24>
 23fd454:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd456:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd45a:	9001      	str	r0, [sp, #4]
 23fd45c:	f7ff fc96 	bl	23fcd8c <hal_spi_begin>
        unlock();
 23fd460:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd462:	b002      	add	sp, #8
 23fd464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd468:	f7ff bfde 	b.w	23fd428 <_ZN8SPIClass6unlockEv.isra.0>
 23fd46c:	b002      	add	sp, #8
 23fd46e:	bd10      	pop	{r4, pc}

023fd470 <_ZN8SPIClass16beginTransactionEv>:
    }
}

int32_t SPIClass::beginTransaction()
{
    return lock();
 23fd470:	7800      	ldrb	r0, [r0, #0]
 23fd472:	f7ff bfdc 	b.w	23fd42e <_ZN8SPIClass4lockEv.isra.0>

023fd476 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fd476:	7800      	ldrb	r0, [r0, #0]
 23fd478:	f7ff bfd6 	b.w	23fd428 <_ZN8SPIClass6unlockEv.isra.0>

023fd47c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fd47c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fd47e:	2400      	movs	r4, #0
 23fd480:	0840      	lsrs	r0, r0, #1
 23fd482:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd484:	6818      	ldr	r0, [r3, #0]
 23fd486:	b2e5      	uxtb	r5, r4
 23fd488:	4288      	cmp	r0, r1
 23fd48a:	d906      	bls.n	23fd49a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fd48c:	3401      	adds	r4, #1
 23fd48e:	2c08      	cmp	r4, #8
 23fd490:	d002      	beq.n	23fd498 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fd492:	0840      	lsrs	r0, r0, #1
 23fd494:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd496:	e7f5      	b.n	23fd484 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fd498:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fd49a:	4b02      	ldr	r3, [pc, #8]	; (23fd4a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fd49c:	5d5b      	ldrb	r3, [r3, r5]
 23fd49e:	7013      	strb	r3, [r2, #0]
}
 23fd4a0:	bd30      	pop	{r4, r5, pc}
 23fd4a2:	bf00      	nop
 23fd4a4:	023ffc54 	.word	0x023ffc54

023fd4a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fd4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd4ac:	4606      	mov	r6, r0
 23fd4ae:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fd4b0:	7800      	ldrb	r0, [r0, #0]
{
 23fd4b2:	460c      	mov	r4, r1
    CHECK(lock());
 23fd4b4:	f7ff ffbb 	bl	23fd42e <_ZN8SPIClass4lockEv.isra.0>
 23fd4b8:	2800      	cmp	r0, #0
 23fd4ba:	db1b      	blt.n	23fd4f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd4bc:	2214      	movs	r2, #20
 23fd4be:	2100      	movs	r1, #0
 23fd4c0:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fd4c2:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd4c4:	f001 fbfb 	bl	23fecbe <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd4c8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd4ca:	2200      	movs	r2, #0
 23fd4cc:	4628      	mov	r0, r5
 23fd4ce:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd4d0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fd4d4:	f7ff fca0 	bl	23fce18 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fd4d8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fd4dc:	b113      	cbz	r3, 23fd4e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fd4de:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fd4e2:	b155      	cbz	r5, 23fd4fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fd4e4:	2700      	movs	r7, #0
 23fd4e6:	2501      	movs	r5, #1
 23fd4e8:	46b9      	mov	r9, r7
 23fd4ea:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fd4ec:	7923      	ldrb	r3, [r4, #4]
 23fd4ee:	b15d      	cbz	r5, 23fd508 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fd4f0:	b1c3      	cbz	r3, 23fd524 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fd4f2:	2000      	movs	r0, #0
}
 23fd4f4:	b00f      	add	sp, #60	; 0x3c
 23fd4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fd4fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fd4fe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fd502:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fd506:	e7f1      	b.n	23fd4ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fd508:	2b00      	cmp	r3, #0
 23fd50a:	d135      	bne.n	23fd578 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fd50c:	68a3      	ldr	r3, [r4, #8]
 23fd50e:	4543      	cmp	r3, r8
 23fd510:	d108      	bne.n	23fd524 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fd512:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd516:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd51a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd51e:	89a3      	ldrh	r3, [r4, #12]
 23fd520:	429a      	cmp	r2, r3
 23fd522:	d0e6      	beq.n	23fd4f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fd524:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd526:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fd528:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd52c:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fd52e:	ab04      	add	r3, sp, #16
 23fd530:	f10d 020f 	add.w	r2, sp, #15
 23fd534:	f7ff ffa2 	bl	23fd47c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fd538:	7921      	ldrb	r1, [r4, #4]
 23fd53a:	b985      	cbnz	r5, 23fd55e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fd53c:	b989      	cbnz	r1, 23fd562 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd53e:	68a3      	ldr	r3, [r4, #8]
 23fd540:	4543      	cmp	r3, r8
 23fd542:	d30e      	bcc.n	23fd562 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fd544:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd548:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd54c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd550:	89a3      	ldrh	r3, [r4, #12]
 23fd552:	429a      	cmp	r2, r3
 23fd554:	d105      	bne.n	23fd562 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fd556:	9b04      	ldr	r3, [sp, #16]
 23fd558:	4543      	cmp	r3, r8
 23fd55a:	d102      	bne.n	23fd562 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd55c:	e7c9      	b.n	23fd4f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fd55e:	2900      	cmp	r1, #0
 23fd560:	d1f9      	bne.n	23fd556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fd562:	2300      	movs	r3, #0
 23fd564:	9301      	str	r3, [sp, #4]
 23fd566:	7b63      	ldrb	r3, [r4, #13]
 23fd568:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fd56c:	9300      	str	r3, [sp, #0]
 23fd56e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fd570:	7830      	ldrb	r0, [r6, #0]
 23fd572:	f7ff fc89 	bl	23fce88 <hal_spi_set_settings>
 23fd576:	e7bc      	b.n	23fd4f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fd578:	462b      	mov	r3, r5
 23fd57a:	462a      	mov	r2, r5
 23fd57c:	2101      	movs	r1, #1
 23fd57e:	e9cd 5500 	strd	r5, r5, [sp]
 23fd582:	e7f5      	b.n	23fd570 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fd584 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fd584:	2300      	movs	r3, #0
{
 23fd586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd58a:	4604      	mov	r4, r0
 23fd58c:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fd58e:	7800      	ldrb	r0, [r0, #0]
{
 23fd590:	460e      	mov	r6, r1
 23fd592:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fd594:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fd596:	f7ff ff4a 	bl	23fd42e <_ZN8SPIClass4lockEv.isra.0>
 23fd59a:	4605      	mov	r5, r0
 23fd59c:	bb00      	cbnz	r0, 23fd5e0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd59e:	4601      	mov	r1, r0
 23fd5a0:	2214      	movs	r2, #20
 23fd5a2:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fd5a4:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd5a8:	f001 fb89 	bl	23fecbe <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd5ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd5ae:	462a      	mov	r2, r5
 23fd5b0:	4640      	mov	r0, r8
 23fd5b2:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd5b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fd5b8:	f7ff fc2e 	bl	23fce18 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fd5bc:	fb07 f106 	mul.w	r1, r7, r6
 23fd5c0:	9804      	ldr	r0, [sp, #16]
 23fd5c2:	ab02      	add	r3, sp, #8
 23fd5c4:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fd5c8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fd5cc:	f7ff ff56 	bl	23fd47c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fd5d0:	7820      	ldrb	r0, [r4, #0]
 23fd5d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fd5d6:	f7ff fbe7 	bl	23fcda8 <hal_spi_set_clock_divider>
        unlock();
 23fd5da:	7820      	ldrb	r0, [r4, #0]
 23fd5dc:	f7ff ff24 	bl	23fd428 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fd5e0:	9802      	ldr	r0, [sp, #8]
 23fd5e2:	b008      	add	sp, #32
 23fd5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd5e8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fd5e8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd5ea:	7800      	ldrb	r0, [r0, #0]
 23fd5ec:	f7ff fbea 	bl	23fcdc4 <hal_spi_transfer>
}
 23fd5f0:	b2c0      	uxtb	r0, r0
 23fd5f2:	bd08      	pop	{r3, pc}

023fd5f4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fd5f4:	b530      	push	{r4, r5, lr}
 23fd5f6:	b087      	sub	sp, #28
 23fd5f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fd5fa:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fd5fc:	9500      	str	r5, [sp, #0]
 23fd5fe:	7800      	ldrb	r0, [r0, #0]
 23fd600:	f7ff fc18 	bl	23fce34 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fd604:	b93d      	cbnz	r5, 23fd616 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fd606:	7820      	ldrb	r0, [r4, #0]
 23fd608:	a902      	add	r1, sp, #8
 23fd60a:	f7ff fc2f 	bl	23fce6c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fd60e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fd612:	07db      	lsls	r3, r3, #31
 23fd614:	d4f7      	bmi.n	23fd606 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fd616:	b007      	add	sp, #28
 23fd618:	bd30      	pop	{r4, r5, pc}
	...

023fd61c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd61c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd61e:	2000      	movs	r0, #0
 23fd620:	4b04      	ldr	r3, [pc, #16]	; (23fd634 <_GLOBAL__sub_I_System+0x18>)
 23fd622:	601a      	str	r2, [r3, #0]
 23fd624:	4b04      	ldr	r3, [pc, #16]	; (23fd638 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd626:	4a05      	ldr	r2, [pc, #20]	; (23fd63c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd628:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd62c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd62e:	f7ff bcef 	b.w	23fd010 <set_system_mode>
 23fd632:	bf00      	nop
 23fd634:	1007ae70 	.word	0x1007ae70
 23fd638:	1007ae64 	.word	0x1007ae64
 23fd63c:	ffff0000 	.word	0xffff0000

023fd640 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fd640:	b510      	push	{r4, lr}
 23fd642:	4604      	mov	r4, r0
{
    free(buffer);
 23fd644:	6800      	ldr	r0, [r0, #0]
 23fd646:	f7ff fe41 	bl	23fd2cc <free>
}
 23fd64a:	4620      	mov	r0, r4
 23fd64c:	bd10      	pop	{r4, pc}

023fd64e <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fd64e:	b510      	push	{r4, lr}
 23fd650:	4604      	mov	r4, r0
    if (buffer) {
 23fd652:	6800      	ldr	r0, [r0, #0]
 23fd654:	b108      	cbz	r0, 23fd65a <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fd656:	f7ff fe39 	bl	23fd2cc <free>
    }
    buffer = nullptr;
 23fd65a:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fd65c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fd660:	6023      	str	r3, [r4, #0]
}
 23fd662:	bd10      	pop	{r4, pc}

023fd664 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd664:	b538      	push	{r3, r4, r5, lr}
 23fd666:	4604      	mov	r4, r0
 23fd668:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd66a:	6800      	ldr	r0, [r0, #0]
 23fd66c:	3101      	adds	r1, #1
 23fd66e:	f7ff fe3b 	bl	23fd2e8 <realloc>
    if (newbuffer) {
 23fd672:	b110      	cbz	r0, 23fd67a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fd674:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fd678:	2001      	movs	r0, #1
    }
    return 0;
}
 23fd67a:	bd38      	pop	{r3, r4, r5, pc}

023fd67c <_ZN6String7reserveEj>:
{
 23fd67c:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fd67e:	6803      	ldr	r3, [r0, #0]
{
 23fd680:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fd682:	b123      	cbz	r3, 23fd68e <_ZN6String7reserveEj+0x12>
 23fd684:	6843      	ldr	r3, [r0, #4]
 23fd686:	428b      	cmp	r3, r1
 23fd688:	d301      	bcc.n	23fd68e <_ZN6String7reserveEj+0x12>
 23fd68a:	2001      	movs	r0, #1
}
 23fd68c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fd68e:	4620      	mov	r0, r4
 23fd690:	f7ff ffe8 	bl	23fd664 <_ZN6String12changeBufferEj>
 23fd694:	2800      	cmp	r0, #0
 23fd696:	d0f9      	beq.n	23fd68c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fd698:	68a3      	ldr	r3, [r4, #8]
 23fd69a:	2b00      	cmp	r3, #0
 23fd69c:	d1f5      	bne.n	23fd68a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fd69e:	6822      	ldr	r2, [r4, #0]
 23fd6a0:	7013      	strb	r3, [r2, #0]
 23fd6a2:	e7f2      	b.n	23fd68a <_ZN6String7reserveEj+0xe>

023fd6a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd6a6:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fd6a8:	4611      	mov	r1, r2
 23fd6aa:	9201      	str	r2, [sp, #4]
{
 23fd6ac:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fd6ae:	f7ff ffe5 	bl	23fd67c <_ZN6String7reserveEj>
 23fd6b2:	9a01      	ldr	r2, [sp, #4]
 23fd6b4:	b928      	cbnz	r0, 23fd6c2 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fd6b6:	4620      	mov	r0, r4
 23fd6b8:	f7ff ffc9 	bl	23fd64e <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fd6bc:	4620      	mov	r0, r4
 23fd6be:	b003      	add	sp, #12
 23fd6c0:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fd6c2:	4629      	mov	r1, r5
    len = length;
 23fd6c4:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fd6c6:	6820      	ldr	r0, [r4, #0]
 23fd6c8:	f001 faec 	bl	23feca4 <memcpy>
    buffer[len] = 0;
 23fd6cc:	2100      	movs	r1, #0
 23fd6ce:	6822      	ldr	r2, [r4, #0]
 23fd6d0:	68a3      	ldr	r3, [r4, #8]
 23fd6d2:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fd6d4:	e7f2      	b.n	23fd6bc <_ZN6String4copyEPKcj+0x18>

023fd6d6 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fd6d6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fd6d8:	b513      	push	{r0, r1, r4, lr}
 23fd6da:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd6dc:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd6e0:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd6e2:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fd6e4:	b141      	cbz	r1, 23fd6f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fd6e6:	4608      	mov	r0, r1
 23fd6e8:	9101      	str	r1, [sp, #4]
 23fd6ea:	f7fb ff49 	bl	23f9580 <strlen>
 23fd6ee:	9901      	ldr	r1, [sp, #4]
 23fd6f0:	4602      	mov	r2, r0
 23fd6f2:	4620      	mov	r0, r4
 23fd6f4:	f7ff ffd6 	bl	23fd6a4 <_ZN6String4copyEPKcj>
}
 23fd6f8:	4620      	mov	r0, r4
 23fd6fa:	b002      	add	sp, #8
 23fd6fc:	bd10      	pop	{r4, pc}

023fd6fe <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fd6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd700:	4604      	mov	r4, r0
 23fd702:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23fd704:	460f      	mov	r7, r1
 23fd706:	b909      	cbnz	r1, 23fd70c <_ZN6String6concatEPKcj+0xe>
        return 0;
 23fd708:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23fd70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23fd70c:	b18a      	cbz	r2, 23fd732 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23fd70e:	6885      	ldr	r5, [r0, #8]
 23fd710:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23fd712:	4629      	mov	r1, r5
 23fd714:	f7ff ffb2 	bl	23fd67c <_ZN6String7reserveEj>
 23fd718:	2800      	cmp	r0, #0
 23fd71a:	d0f5      	beq.n	23fd708 <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23fd71c:	68a3      	ldr	r3, [r4, #8]
 23fd71e:	6820      	ldr	r0, [r4, #0]
 23fd720:	4632      	mov	r2, r6
 23fd722:	4418      	add	r0, r3
 23fd724:	4639      	mov	r1, r7
 23fd726:	f001 fabd 	bl	23feca4 <memcpy>
    buffer[newlen] = 0;
 23fd72a:	2200      	movs	r2, #0
 23fd72c:	6823      	ldr	r3, [r4, #0]
 23fd72e:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23fd730:	60a5      	str	r5, [r4, #8]
        return 1;
 23fd732:	2001      	movs	r0, #1
 23fd734:	e7e9      	b.n	23fd70a <_ZN6String6concatEPKcj+0xc>

023fd736 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 23fd736:	b513      	push	{r0, r1, r4, lr}
 23fd738:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
 23fd73a:	4608      	mov	r0, r1
    if (!cstr) {
 23fd73c:	b151      	cbz	r1, 23fd754 <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
 23fd73e:	9101      	str	r1, [sp, #4]
 23fd740:	f7fb ff1e 	bl	23f9580 <strlen>
 23fd744:	4602      	mov	r2, r0
 23fd746:	4620      	mov	r0, r4
 23fd748:	9901      	ldr	r1, [sp, #4]
}
 23fd74a:	b002      	add	sp, #8
 23fd74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
 23fd750:	f7ff bfd5 	b.w	23fd6fe <_ZN6String6concatEPKcj>
}
 23fd754:	b002      	add	sp, #8
 23fd756:	bd10      	pop	{r4, pc}

023fd758 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fd758:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd75a:	6843      	ldr	r3, [r0, #4]
    {
 23fd75c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd75e:	3b01      	subs	r3, #1
 23fd760:	6043      	str	r3, [r0, #4]
 23fd762:	b963      	cbnz	r3, 23fd77e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fd764:	6803      	ldr	r3, [r0, #0]
 23fd766:	689b      	ldr	r3, [r3, #8]
 23fd768:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd76a:	68a3      	ldr	r3, [r4, #8]
 23fd76c:	3b01      	subs	r3, #1
 23fd76e:	60a3      	str	r3, [r4, #8]
 23fd770:	b92b      	cbnz	r3, 23fd77e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd772:	6823      	ldr	r3, [r4, #0]
 23fd774:	4620      	mov	r0, r4
        }
    }
 23fd776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd77a:	68db      	ldr	r3, [r3, #12]
 23fd77c:	4718      	bx	r3
    }
 23fd77e:	bd10      	pop	{r4, pc}

023fd780 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd780:	2300      	movs	r3, #0
 23fd782:	4802      	ldr	r0, [pc, #8]	; (23fd78c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd784:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd786:	f7ff b995 	b.w	23fcab4 <os_mutex_recursive_create>
 23fd78a:	bf00      	nop
 23fd78c:	1007ae74 	.word	0x1007ae74

023fd790 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd792:	4606      	mov	r6, r0
 23fd794:	460d      	mov	r5, r1
  size_t n = 0;
 23fd796:	2400      	movs	r4, #0
 23fd798:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd79a:	42bd      	cmp	r5, r7
 23fd79c:	d00c      	beq.n	23fd7b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd79e:	6833      	ldr	r3, [r6, #0]
 23fd7a0:	4630      	mov	r0, r6
 23fd7a2:	689b      	ldr	r3, [r3, #8]
 23fd7a4:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd7a8:	4798      	blx	r3
     if (chunk>=0)
 23fd7aa:	1e03      	subs	r3, r0, #0
 23fd7ac:	db01      	blt.n	23fd7b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd7ae:	441c      	add	r4, r3
  while (size--) {
 23fd7b0:	e7f3      	b.n	23fd79a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd7b2:	2c00      	cmp	r4, #0
 23fd7b4:	bf08      	it	eq
 23fd7b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd7b8:	4620      	mov	r0, r4
 23fd7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd7bc <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fd7bc:	b513      	push	{r0, r1, r4, lr}
 23fd7be:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fd7c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd7c2:	b159      	cbz	r1, 23fd7dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd7c4:	9101      	str	r1, [sp, #4]
 23fd7c6:	f7fb fedb 	bl	23f9580 <strlen>
 23fd7ca:	4602      	mov	r2, r0
 23fd7cc:	4620      	mov	r0, r4
 23fd7ce:	6823      	ldr	r3, [r4, #0]
 23fd7d0:	9901      	ldr	r1, [sp, #4]
 23fd7d2:	68db      	ldr	r3, [r3, #12]
    }
 23fd7d4:	b002      	add	sp, #8
 23fd7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd7da:	4718      	bx	r3
    }
 23fd7dc:	b002      	add	sp, #8
 23fd7de:	bd10      	pop	{r4, pc}

023fd7e0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fd7e0:	b508      	push	{r3, lr}
  return write(str);
 23fd7e2:	f7ff ffeb 	bl	23fd7bc <_ZN5Print5writeEPKc>
}
 23fd7e6:	bd08      	pop	{r3, pc}

023fd7e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fd7e8:	6803      	ldr	r3, [r0, #0]
 23fd7ea:	689b      	ldr	r3, [r3, #8]
 23fd7ec:	4718      	bx	r3

023fd7ee <_ZN5Print5printEPK19__FlashStringHelper>:
 23fd7ee:	b508      	push	{r3, lr}
 23fd7f0:	f7ff ffe4 	bl	23fd7bc <_ZN5Print5writeEPKc>
 23fd7f4:	bd08      	pop	{r3, pc}

023fd7f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd7f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd7f8:	210d      	movs	r1, #13
{
 23fd7fa:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd7fc:	f7ff fff4 	bl	23fd7e8 <_ZN5Print5printEc>
  n += print('\n');
 23fd800:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd802:	4604      	mov	r4, r0
  n += print('\n');
 23fd804:	4628      	mov	r0, r5
 23fd806:	f7ff ffef 	bl	23fd7e8 <_ZN5Print5printEc>
  return n;
}
 23fd80a:	4420      	add	r0, r4
 23fd80c:	bd38      	pop	{r3, r4, r5, pc}

023fd80e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fd80e:	b538      	push	{r3, r4, r5, lr}
 23fd810:	4605      	mov	r5, r0
  return write(str);
 23fd812:	f7ff ffd3 	bl	23fd7bc <_ZN5Print5writeEPKc>
 23fd816:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fd818:	4628      	mov	r0, r5
 23fd81a:	f7ff ffec 	bl	23fd7f6 <_ZN5Print7printlnEv>
  return n;
}
 23fd81e:	4420      	add	r0, r4
 23fd820:	bd38      	pop	{r3, r4, r5, pc}

023fd822 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 23fd822:	f7ff bff4 	b.w	23fd80e <_ZN5Print7printlnEPKc>

023fd826 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd826:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd828:	2a01      	cmp	r2, #1
 23fd82a:	bf98      	it	ls
 23fd82c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd82e:	b530      	push	{r4, r5, lr}
 23fd830:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd832:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd836:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd838:	460d      	mov	r5, r1
 23fd83a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd83e:	fb01 5312 	mls	r3, r1, r2, r5
 23fd842:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd846:	2b09      	cmp	r3, #9
 23fd848:	bf94      	ite	ls
 23fd84a:	3330      	addls	r3, #48	; 0x30
 23fd84c:	3337      	addhi	r3, #55	; 0x37
 23fd84e:	b2db      	uxtb	r3, r3
  } while(n);
 23fd850:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd852:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd856:	d9ef      	bls.n	23fd838 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd858:	4621      	mov	r1, r4
 23fd85a:	f7ff ffaf 	bl	23fd7bc <_ZN5Print5writeEPKc>
}
 23fd85e:	b00b      	add	sp, #44	; 0x2c
 23fd860:	bd30      	pop	{r4, r5, pc}

023fd862 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fd862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd866:	b086      	sub	sp, #24
 23fd868:	af00      	add	r7, sp, #0
 23fd86a:	4605      	mov	r5, r0
 23fd86c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd86e:	1d38      	adds	r0, r7, #4
 23fd870:	2114      	movs	r1, #20
{
 23fd872:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fd874:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd876:	f7ff fd53 	bl	23fd320 <vsnprintf>

    if (n<bufsize)
 23fd87a:	2813      	cmp	r0, #19
 23fd87c:	d80e      	bhi.n	23fd89c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fd87e:	4628      	mov	r0, r5
 23fd880:	1d39      	adds	r1, r7, #4
 23fd882:	f7ff ff9b 	bl	23fd7bc <_ZN5Print5writeEPKc>
 23fd886:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fd888:	b11e      	cbz	r6, 23fd892 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fd88a:	4628      	mov	r0, r5
 23fd88c:	f7ff ffb3 	bl	23fd7f6 <_ZN5Print7printlnEv>
 23fd890:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fd892:	4620      	mov	r0, r4
 23fd894:	3718      	adds	r7, #24
 23fd896:	46bd      	mov	sp, r7
 23fd898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fd89c:	f100 0308 	add.w	r3, r0, #8
 23fd8a0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fd8a4:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fd8a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fd8aa:	4622      	mov	r2, r4
 23fd8ac:	1c41      	adds	r1, r0, #1
 23fd8ae:	683b      	ldr	r3, [r7, #0]
 23fd8b0:	4668      	mov	r0, sp
 23fd8b2:	f7ff fd35 	bl	23fd320 <vsnprintf>
  return write(str);
 23fd8b6:	4669      	mov	r1, sp
 23fd8b8:	4628      	mov	r0, r5
 23fd8ba:	f7ff ff7f 	bl	23fd7bc <_ZN5Print5writeEPKc>
 23fd8be:	4604      	mov	r4, r0
 23fd8c0:	46c5      	mov	sp, r8
 23fd8c2:	e7e1      	b.n	23fd888 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fd8c4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fd8c4:	b510      	push	{r4, lr}
 23fd8c6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fd8c8:	f7ff f868 	bl	23fc99c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fd8cc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fd8ce:	6823      	ldr	r3, [r4, #0]
 23fd8d0:	4620      	mov	r0, r4
 23fd8d2:	695b      	ldr	r3, [r3, #20]
 23fd8d4:	4798      	blx	r3
    if (c >= 0) return c;
 23fd8d6:	2800      	cmp	r0, #0
 23fd8d8:	da08      	bge.n	23fd8ec <_ZN6Stream9timedReadEv+0x28>
 23fd8da:	f7ff f85f 	bl	23fc99c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fd8de:	68e3      	ldr	r3, [r4, #12]
 23fd8e0:	1ac0      	subs	r0, r0, r3
 23fd8e2:	68a3      	ldr	r3, [r4, #8]
 23fd8e4:	4298      	cmp	r0, r3
 23fd8e6:	d3f2      	bcc.n	23fd8ce <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fd8e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fd8ec:	bd10      	pop	{r4, pc}

023fd8ee <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fd8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd8f2:	4607      	mov	r7, r0
 23fd8f4:	460c      	mov	r4, r1
 23fd8f6:	460d      	mov	r5, r1
 23fd8f8:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fd8fa:	42b5      	cmp	r5, r6
 23fd8fc:	eba5 0804 	sub.w	r8, r5, r4
 23fd900:	d007      	beq.n	23fd912 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fd902:	4638      	mov	r0, r7
 23fd904:	f7ff ffde 	bl	23fd8c4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fd908:	1e03      	subs	r3, r0, #0
 23fd90a:	db02      	blt.n	23fd912 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fd90c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fd910:	e7f3      	b.n	23fd8fa <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fd912:	4640      	mov	r0, r8
 23fd914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd918 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fd918:	4b01      	ldr	r3, [pc, #4]	; (23fd920 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd91a:	4a02      	ldr	r2, [pc, #8]	; (23fd924 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd91c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd91e:	4770      	bx	lr
 23fd920:	1007ae78 	.word	0x1007ae78
 23fd924:	023ffc64 	.word	0x023ffc64

023fd928 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23fd928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23fd92c:	4a15      	ldr	r2, [pc, #84]	; (23fd984 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23fd92e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23fd990 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23fd932:	e9d2 6300 	ldrd	r6, r3, [r2]
 23fd936:	1980      	adds	r0, r0, r6
 23fd938:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23fd93c:	4b12      	ldr	r3, [pc, #72]	; (23fd988 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23fd93e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23fd940:	e9d3 6700 	ldrd	r6, r7, [r3]
 23fd944:	1986      	adds	r6, r0, r6
 23fd946:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23fd94a:	e9d8 2300 	ldrd	r2, r3, [r8]
 23fd94e:	42bb      	cmp	r3, r7
 23fd950:	bf08      	it	eq
 23fd952:	42b2      	cmpeq	r2, r6
 23fd954:	d013      	beq.n	23fd97e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23fd956:	a903      	add	r1, sp, #12
 23fd958:	4668      	mov	r0, sp
 23fd95a:	e9cd 6700 	strd	r6, r7, [sp]
 23fd95e:	f7ff fd17 	bl	23fd390 <localtime_r>
	calendar_time.tm_year += 1900;
 23fd962:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fd964:	4d09      	ldr	r5, [pc, #36]	; (23fd98c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23fd966:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fd96a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23fd96c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fd96e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fd970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fd972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fd974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23fd976:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fd97a:	6823      	ldr	r3, [r4, #0]
 23fd97c:	602b      	str	r3, [r5, #0]
    }
}
 23fd97e:	b00c      	add	sp, #48	; 0x30
 23fd980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd984:	1007aeb0 	.word	0x1007aeb0
 23fd988:	1007aea8 	.word	0x1007aea8
 23fd98c:	1007ae80 	.word	0x1007ae80
 23fd990:	1007aeb8 	.word	0x1007aeb8

023fd994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 23fd994:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fd996:	2000      	movs	r0, #0
 23fd998:	f7ff fc6e 	bl	23fd278 <spark_sync_time_pending>
 23fd99c:	b128      	cbz	r0, 23fd9aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd99e:	f7ff fc4f 	bl	23fd240 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fd9a2:	f080 0001 	eor.w	r0, r0, #1
 23fd9a6:	b2c0      	uxtb	r0, r0
    }
 23fd9a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fd9aa:	2001      	movs	r0, #1
 23fd9ac:	e7fc      	b.n	23fd9a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023fd9b0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23fd9b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fd9b2:	f7ff ffb9 	bl	23fd928 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23fd9b6:	4b02      	ldr	r3, [pc, #8]	; (23fd9c0 <_ZN9TimeClass5monthEx+0x10>)
 23fd9b8:	6918      	ldr	r0, [r3, #16]
}
 23fd9ba:	3001      	adds	r0, #1
 23fd9bc:	bd08      	pop	{r3, pc}
 23fd9be:	bf00      	nop
 23fd9c0:	1007ae80 	.word	0x1007ae80

023fd9c4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fd9c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 23fd9c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fd9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 23fd9d0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fd9d2:	d411      	bmi.n	23fd9f8 <_ZN9TimeClass4zoneEf+0x34>
 23fd9d4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 23fd9d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fd9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd9e0:	dc0a      	bgt.n	23fd9f8 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 23fd9e2:	eddf 7a06 	vldr	s15, [pc, #24]	; 23fd9fc <_ZN9TimeClass4zoneEf+0x38>
 23fd9e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 23fd9ea:	ee17 0a90 	vmov	r0, s15
 23fd9ee:	f7fb fd69 	bl	23f94c4 <__aeabi_f2lz>
 23fd9f2:	4b03      	ldr	r3, [pc, #12]	; (23fda00 <_ZN9TimeClass4zoneEf+0x3c>)
 23fd9f4:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fd9f8:	bd08      	pop	{r3, pc}
 23fd9fa:	bf00      	nop
 23fd9fc:	45610000 	.word	0x45610000
 23fda00:	1007aeb0 	.word	0x1007aeb0

023fda04 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 23fda04:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23fda06:	2000      	movs	r0, #0
 23fda08:	f7fe ffd6 	bl	23fc9b8 <hal_rtc_time_is_valid>
    if (rtcstate)
 23fda0c:	4604      	mov	r4, r0
 23fda0e:	b9a0      	cbnz	r0, 23fda3a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23fda10:	f7ff faf0 	bl	23fcff4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23fda14:	2801      	cmp	r0, #1
 23fda16:	d110      	bne.n	23fda3a <_ZN9TimeClass7isValidEv+0x36>
 23fda18:	4620      	mov	r0, r4
 23fda1a:	f7ff fb15 	bl	23fd048 <system_thread_get_state>
 23fda1e:	b960      	cbnz	r0, 23fda3a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23fda20:	f7ff ffb8 	bl	23fd994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fda24:	b910      	cbnz	r0, 23fda2c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23fda26:	f7ff fbfd 	bl	23fd224 <spark_process>
        while (_while() && !_condition()) {
 23fda2a:	e7f9      	b.n	23fda20 <_ZN9TimeClass7isValidEv+0x1c>
 23fda2c:	f7ff ffb2 	bl	23fd994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23fda30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23fda34:	2000      	movs	r0, #0
 23fda36:	f7fe bfbf 	b.w	23fc9b8 <hal_rtc_time_is_valid>
}
 23fda3a:	4620      	mov	r0, r4
 23fda3c:	bd10      	pop	{r4, pc}

023fda3e <_ZN9TimeClass3nowEv>:
{
 23fda3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23fda40:	f7ff ffe0 	bl	23fda04 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23fda44:	2210      	movs	r2, #16
 23fda46:	2100      	movs	r1, #0
 23fda48:	4668      	mov	r0, sp
 23fda4a:	f001 f938 	bl	23fecbe <memset>
    hal_rtc_get_time(&tv, nullptr);
 23fda4e:	2100      	movs	r1, #0
 23fda50:	4668      	mov	r0, sp
 23fda52:	f7fe ffcd 	bl	23fc9f0 <hal_rtc_get_time>
}
 23fda56:	9800      	ldr	r0, [sp, #0]
 23fda58:	b005      	add	sp, #20
 23fda5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fda60 <_ZN9TimeClass4hourEv>:
{
 23fda60:	b508      	push	{r3, lr}
	return hour(now());
 23fda62:	f7ff ffec 	bl	23fda3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fda66:	17c1      	asrs	r1, r0, #31
 23fda68:	f7ff ff5e 	bl	23fd928 <_ZL22Refresh_UnixTime_Cachex>
}
 23fda6c:	4b01      	ldr	r3, [pc, #4]	; (23fda74 <_ZN9TimeClass4hourEv+0x14>)
 23fda6e:	6898      	ldr	r0, [r3, #8]
 23fda70:	bd08      	pop	{r3, pc}
 23fda72:	bf00      	nop
 23fda74:	1007ae80 	.word	0x1007ae80

023fda78 <_ZN9TimeClass6minuteEv>:
{
 23fda78:	b508      	push	{r3, lr}
	return minute(now());
 23fda7a:	f7ff ffe0 	bl	23fda3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fda7e:	17c1      	asrs	r1, r0, #31
 23fda80:	f7ff ff52 	bl	23fd928 <_ZL22Refresh_UnixTime_Cachex>
}
 23fda84:	4b01      	ldr	r3, [pc, #4]	; (23fda8c <_ZN9TimeClass6minuteEv+0x14>)
 23fda86:	6858      	ldr	r0, [r3, #4]
 23fda88:	bd08      	pop	{r3, pc}
 23fda8a:	bf00      	nop
 23fda8c:	1007ae80 	.word	0x1007ae80

023fda90 <_ZN9TimeClass3dayEv>:
{
 23fda90:	b508      	push	{r3, lr}
	return day(now());
 23fda92:	f7ff ffd4 	bl	23fda3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fda96:	17c1      	asrs	r1, r0, #31
 23fda98:	f7ff ff46 	bl	23fd928 <_ZL22Refresh_UnixTime_Cachex>
}
 23fda9c:	4b01      	ldr	r3, [pc, #4]	; (23fdaa4 <_ZN9TimeClass3dayEv+0x14>)
 23fda9e:	68d8      	ldr	r0, [r3, #12]
 23fdaa0:	bd08      	pop	{r3, pc}
 23fdaa2:	bf00      	nop
 23fdaa4:	1007ae80 	.word	0x1007ae80

023fdaa8 <_ZN9TimeClass5monthEv>:
{
 23fdaa8:	b508      	push	{r3, lr}
	return month(now());
 23fdaaa:	f7ff ffc8 	bl	23fda3e <_ZN9TimeClass3nowEv>
}
 23fdaae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23fdab2:	17c1      	asrs	r1, r0, #31
 23fdab4:	f7ff bf7c 	b.w	23fd9b0 <_ZN9TimeClass5monthEx>

023fdab8 <_ZN9TimeClass4yearEv>:
{
 23fdab8:	b508      	push	{r3, lr}
	return year(now());
 23fdaba:	f7ff ffc0 	bl	23fda3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fdabe:	17c1      	asrs	r1, r0, #31
 23fdac0:	f7ff ff32 	bl	23fd928 <_ZL22Refresh_UnixTime_Cachex>
}
 23fdac4:	4b01      	ldr	r3, [pc, #4]	; (23fdacc <_ZN9TimeClass4yearEv+0x14>)
 23fdac6:	6958      	ldr	r0, [r3, #20]
 23fdac8:	bd08      	pop	{r3, pc}
 23fdaca:	bf00      	nop
 23fdacc:	1007ae80 	.word	0x1007ae80

023fdad0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdad0:	4b02      	ldr	r3, [pc, #8]	; (23fdadc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdad2:	681a      	ldr	r2, [r3, #0]
 23fdad4:	4b02      	ldr	r3, [pc, #8]	; (23fdae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdad6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdad8:	4770      	bx	lr
 23fdada:	bf00      	nop
 23fdadc:	1007aca4 	.word	0x1007aca4
 23fdae0:	1007ae7c 	.word	0x1007ae7c

023fdae4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fdae4:	2100      	movs	r1, #0
 23fdae6:	f7ff baa1 	b.w	23fd02c <system_delay_ms>
	...

023fdaec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fdaec:	b510      	push	{r4, lr}
 23fdaee:	4b04      	ldr	r3, [pc, #16]	; (23fdb00 <_ZN9TCPClientD1Ev+0x14>)
 23fdaf0:	4604      	mov	r4, r0
 23fdaf2:	6003      	str	r3, [r0, #0]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fdaf4:	6980      	ldr	r0, [r0, #24]
 23fdaf6:	b108      	cbz	r0, 23fdafc <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
 23fdaf8:	f7ff fe2e 	bl	23fd758 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
 23fdafc:	4620      	mov	r0, r4
 23fdafe:	bd10      	pop	{r4, pc}
 23fdb00:	023ffd68 	.word	0x023ffd68

023fdb04 <_ZN9TCPClientD0Ev>:
 23fdb04:	b510      	push	{r4, lr}
 23fdb06:	4604      	mov	r4, r0
 23fdb08:	f7ff fff0 	bl	23fdaec <_ZN9TCPClientD1Ev>
 23fdb0c:	4620      	mov	r0, r4
 23fdb0e:	211c      	movs	r1, #28
 23fdb10:	f7fb fd5f 	bl	23f95d2 <_ZdlPvj>
 23fdb14:	4620      	mov	r0, r4
 23fdb16:	bd10      	pop	{r4, pc}

023fdb18 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fdb18:	2200      	movs	r2, #0
 23fdb1a:	4b01      	ldr	r3, [pc, #4]	; (23fdb20 <_GLOBAL__sub_I_RGB+0x8>)
 23fdb1c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fdb1e:	4770      	bx	lr
 23fdb20:	1007aec0 	.word	0x1007aec0

023fdb24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdb24:	4b01      	ldr	r3, [pc, #4]	; (23fdb2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdb26:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdb28:	4770      	bx	lr
 23fdb2a:	bf00      	nop
 23fdb2c:	1007aca8 	.word	0x1007aca8

023fdb30 <serialEventRun>:
{
 23fdb30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdb32:	4b0f      	ldr	r3, [pc, #60]	; (23fdb70 <serialEventRun+0x40>)
 23fdb34:	b143      	cbz	r3, 23fdb48 <serialEventRun+0x18>
 23fdb36:	f000 f989 	bl	23fde4c <_Z16_fetch_usbserialv>
 23fdb3a:	6803      	ldr	r3, [r0, #0]
 23fdb3c:	691b      	ldr	r3, [r3, #16]
 23fdb3e:	4798      	blx	r3
 23fdb40:	2800      	cmp	r0, #0
 23fdb42:	dd01      	ble.n	23fdb48 <serialEventRun+0x18>
        serialEvent();
 23fdb44:	e000      	b.n	23fdb48 <serialEventRun+0x18>
 23fdb46:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdb48:	4b0a      	ldr	r3, [pc, #40]	; (23fdb74 <serialEventRun+0x44>)
 23fdb4a:	b143      	cbz	r3, 23fdb5e <serialEventRun+0x2e>
 23fdb4c:	f000 fec0 	bl	23fe8d0 <_Z22__fetch_global_Serial1v>
 23fdb50:	6803      	ldr	r3, [r0, #0]
 23fdb52:	691b      	ldr	r3, [r3, #16]
 23fdb54:	4798      	blx	r3
 23fdb56:	2800      	cmp	r0, #0
 23fdb58:	dd01      	ble.n	23fdb5e <serialEventRun+0x2e>
        serialEvent1();
 23fdb5a:	e000      	b.n	23fdb5e <serialEventRun+0x2e>
 23fdb5c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdb5e:	4b06      	ldr	r3, [pc, #24]	; (23fdb78 <serialEventRun+0x48>)
 23fdb60:	b10b      	cbz	r3, 23fdb66 <serialEventRun+0x36>
 23fdb62:	f000 fefb 	bl	23fe95c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdb66:	4b05      	ldr	r3, [pc, #20]	; (23fdb7c <serialEventRun+0x4c>)
 23fdb68:	b10b      	cbz	r3, 23fdb6e <serialEventRun+0x3e>
 23fdb6a:	f000 ff2d 	bl	23fe9c8 <_Z15serialEventRun3v>
}
 23fdb6e:	bd08      	pop	{r3, pc}
	...

023fdb80 <_post_loop>:
{
 23fdb80:	b508      	push	{r3, lr}
	serialEventRun();
 23fdb82:	f7ff ffd5 	bl	23fdb30 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdb86:	f7fe ff09 	bl	23fc99c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdb8a:	4b01      	ldr	r3, [pc, #4]	; (23fdb90 <_post_loop+0x10>)
 23fdb8c:	6018      	str	r0, [r3, #0]
}
 23fdb8e:	bd08      	pop	{r3, pc}
 23fdb90:	1007af48 	.word	0x1007af48

023fdb94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdb94:	4805      	ldr	r0, [pc, #20]	; (23fdbac <_Z33system_initialize_user_backup_ramv+0x18>)
 23fdb96:	4a06      	ldr	r2, [pc, #24]	; (23fdbb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fdb98:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdb9a:	1a12      	subs	r2, r2, r0
 23fdb9c:	4905      	ldr	r1, [pc, #20]	; (23fdbb4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fdb9e:	f001 f881 	bl	23feca4 <memcpy>
    __backup_sram_signature = signature;
 23fdba2:	4b05      	ldr	r3, [pc, #20]	; (23fdbb8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdba4:	4a05      	ldr	r2, [pc, #20]	; (23fdbbc <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdba6:	601a      	str	r2, [r3, #0]
}
 23fdba8:	bd08      	pop	{r3, pc}
 23fdbaa:	bf00      	nop
 23fdbac:	1007b400 	.word	0x1007b400
 23fdbb0:	1007b404 	.word	0x1007b404
 23fdbb4:	085ff404 	.word	0x085ff404
 23fdbb8:	1007b400 	.word	0x1007b400
 23fdbbc:	9a271c1e 	.word	0x9a271c1e

023fdbc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdbc0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fdbc2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdbc4:	461a      	mov	r2, r3
 23fdbc6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdbca:	9300      	str	r3, [sp, #0]
 23fdbcc:	f7ff fa58 	bl	23fd080 <system_ctrl_set_result>
}
 23fdbd0:	b003      	add	sp, #12
 23fdbd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fdbd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fdbd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fdbda:	8843      	ldrh	r3, [r0, #2]
 23fdbdc:	2b0a      	cmp	r3, #10
 23fdbde:	d008      	beq.n	23fdbf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fdbe0:	2b50      	cmp	r3, #80	; 0x50
 23fdbe2:	d10b      	bne.n	23fdbfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fdbe4:	4b09      	ldr	r3, [pc, #36]	; (23fdc0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fdbe6:	681b      	ldr	r3, [r3, #0]
 23fdbe8:	b14b      	cbz	r3, 23fdbfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fdbea:	b003      	add	sp, #12
 23fdbec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdbf0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdbf2:	f7ff ffe5 	bl	23fdbc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdbf6:	b003      	add	sp, #12
 23fdbf8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdbfc:	2300      	movs	r3, #0
 23fdbfe:	461a      	mov	r2, r3
 23fdc00:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdc04:	9300      	str	r3, [sp, #0]
 23fdc06:	f7ff fa3b 	bl	23fd080 <system_ctrl_set_result>
}
 23fdc0a:	e7f4      	b.n	23fdbf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fdc0c:	1007aed4 	.word	0x1007aed4

023fdc10 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdc10:	2100      	movs	r1, #0
{
 23fdc12:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdc14:	4811      	ldr	r0, [pc, #68]	; (23fdc5c <module_user_init_hook+0x4c>)
 23fdc16:	f7ff fbad 	bl	23fd374 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fdc1a:	4b11      	ldr	r3, [pc, #68]	; (23fdc60 <module_user_init_hook+0x50>)
 23fdc1c:	681a      	ldr	r2, [r3, #0]
 23fdc1e:	4b11      	ldr	r3, [pc, #68]	; (23fdc64 <module_user_init_hook+0x54>)
 23fdc20:	429a      	cmp	r2, r3
 23fdc22:	bf0c      	ite	eq
 23fdc24:	2201      	moveq	r2, #1
 23fdc26:	2200      	movne	r2, #0
 23fdc28:	4b0f      	ldr	r3, [pc, #60]	; (23fdc68 <module_user_init_hook+0x58>)
 23fdc2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fdc2c:	d001      	beq.n	23fdc32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fdc2e:	f7ff ffb1 	bl	23fdb94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fdc32:	f7fe fe89 	bl	23fc948 <HAL_RNG_GetRandomNumber>
 23fdc36:	4604      	mov	r4, r0
    srand(seed);
 23fdc38:	f001 f84a 	bl	23fecd0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fdc3c:	4b0b      	ldr	r3, [pc, #44]	; (23fdc6c <module_user_init_hook+0x5c>)
 23fdc3e:	b113      	cbz	r3, 23fdc46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fdc40:	4620      	mov	r0, r4
 23fdc42:	e000      	b.n	23fdc46 <module_user_init_hook+0x36>
 23fdc44:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fdc46:	2100      	movs	r1, #0
 23fdc48:	4808      	ldr	r0, [pc, #32]	; (23fdc6c <module_user_init_hook+0x5c>)
 23fdc4a:	f7ff fb23 	bl	23fd294 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fdc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fdc52:	2100      	movs	r1, #0
 23fdc54:	4806      	ldr	r0, [pc, #24]	; (23fdc70 <module_user_init_hook+0x60>)
 23fdc56:	f7ff ba05 	b.w	23fd064 <system_ctrl_set_app_request_handler>
 23fdc5a:	bf00      	nop
 23fdc5c:	023fdb25 	.word	0x023fdb25
 23fdc60:	1007b400 	.word	0x1007b400
 23fdc64:	9a271c1e 	.word	0x9a271c1e
 23fdc68:	1007aed0 	.word	0x1007aed0
 23fdc6c:	00000000 	.word	0x00000000
 23fdc70:	023fdbd9 	.word	0x023fdbd9

023fdc74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fdc74:	4770      	bx	lr

023fdc76 <_ZN9IPAddressD0Ev>:
 23fdc76:	b510      	push	{r4, lr}
 23fdc78:	4604      	mov	r4, r0
 23fdc7a:	2118      	movs	r1, #24
 23fdc7c:	f7fb fca9 	bl	23f95d2 <_ZdlPvj>
 23fdc80:	4620      	mov	r0, r4
 23fdc82:	bd10      	pop	{r4, pc}

023fdc84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fdc84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fdc86:	7d03      	ldrb	r3, [r0, #20]
{
 23fdc88:	460e      	mov	r6, r1
	if (address.v==6) {
 23fdc8a:	2b06      	cmp	r3, #6
 23fdc8c:	f04f 0400 	mov.w	r4, #0
{
 23fdc90:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdc92:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fdc96:	d012      	beq.n	23fdcbe <_ZNK9IPAddress7printToER5Print+0x3a>
 23fdc98:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fdc9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fdca0:	220a      	movs	r2, #10
 23fdca2:	4630      	mov	r0, r6
 23fdca4:	f7ff fdbf 	bl	23fd826 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fdca8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fdcaa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fdcac:	d019      	beq.n	23fdce2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fdcae:	2c00      	cmp	r4, #0
 23fdcb0:	d0f4      	beq.n	23fdc9c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fdcb2:	212e      	movs	r1, #46	; 0x2e
 23fdcb4:	4630      	mov	r0, r6
 23fdcb6:	f7ff fd97 	bl	23fd7e8 <_ZN5Print5printEc>
 23fdcba:	4404      	add	r4, r0
 23fdcbc:	e7ee      	b.n	23fdc9c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdcbe:	232f      	movs	r3, #47	; 0x2f
 23fdcc0:	466a      	mov	r2, sp
 23fdcc2:	4639      	mov	r1, r7
 23fdcc4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fdcc6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdcca:	f7fe ff0f 	bl	23fcaec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fdcce:	4668      	mov	r0, sp
 23fdcd0:	f7fb fc56 	bl	23f9580 <strlen>
 23fdcd4:	6833      	ldr	r3, [r6, #0]
 23fdcd6:	4602      	mov	r2, r0
 23fdcd8:	4669      	mov	r1, sp
 23fdcda:	4630      	mov	r0, r6
 23fdcdc:	68db      	ldr	r3, [r3, #12]
 23fdcde:	4798      	blx	r3
 23fdce0:	4604      	mov	r4, r0
    }
    return n;
}
 23fdce2:	4620      	mov	r0, r4
 23fdce4:	b00d      	add	sp, #52	; 0x34
 23fdce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fdce8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fdce8:	b510      	push	{r4, lr}
 23fdcea:	4604      	mov	r4, r0
 23fdcec:	4b04      	ldr	r3, [pc, #16]	; (23fdd00 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fdcee:	2211      	movs	r2, #17
 23fdcf0:	2100      	movs	r1, #0
 23fdcf2:	f840 3b04 	str.w	r3, [r0], #4
 23fdcf6:	f000 ffe2 	bl	23fecbe <memset>
}
 23fdcfa:	4620      	mov	r0, r4
 23fdcfc:	bd10      	pop	{r4, pc}
 23fdcfe:	bf00      	nop
 23fdd00:	023ffc8c 	.word	0x023ffc8c

023fdd04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fdd04:	4603      	mov	r3, r0
 23fdd06:	4a07      	ldr	r2, [pc, #28]	; (23fdd24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fdd08:	b510      	push	{r4, lr}
 23fdd0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fdd0e:	f101 0210 	add.w	r2, r1, #16
 23fdd12:	f851 4b04 	ldr.w	r4, [r1], #4
 23fdd16:	4291      	cmp	r1, r2
 23fdd18:	f843 4b04 	str.w	r4, [r3], #4
 23fdd1c:	d1f9      	bne.n	23fdd12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fdd1e:	780a      	ldrb	r2, [r1, #0]
 23fdd20:	701a      	strb	r2, [r3, #0]
}
 23fdd22:	bd10      	pop	{r4, pc}
 23fdd24:	023ffc8c 	.word	0x023ffc8c

023fdd28 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23fdd28:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23fdd2a:	2b04      	cmp	r3, #4
 23fdd2c:	d104      	bne.n	23fdd38 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23fdd2e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fdd30:	3800      	subs	r0, #0
 23fdd32:	bf18      	it	ne
 23fdd34:	2001      	movne	r0, #1
 23fdd36:	4770      	bx	lr
    } else if (version() == 6) {
 23fdd38:	2b06      	cmp	r3, #6
 23fdd3a:	d107      	bne.n	23fdd4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fdd3c:	6843      	ldr	r3, [r0, #4]
 23fdd3e:	b93b      	cbnz	r3, 23fdd50 <_ZNK9IPAddresscvbEv+0x28>
 23fdd40:	6883      	ldr	r3, [r0, #8]
 23fdd42:	b92b      	cbnz	r3, 23fdd50 <_ZNK9IPAddresscvbEv+0x28>
 23fdd44:	68c3      	ldr	r3, [r0, #12]
 23fdd46:	b91b      	cbnz	r3, 23fdd50 <_ZNK9IPAddresscvbEv+0x28>
 23fdd48:	6900      	ldr	r0, [r0, #16]
 23fdd4a:	e7f1      	b.n	23fdd30 <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23fdd4c:	2000      	movs	r0, #0
 23fdd4e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fdd50:	2001      	movs	r0, #1
}
 23fdd52:	4770      	bx	lr

023fdd54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fdd54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fdd56:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fdd5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fdd5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fdd62:	2304      	movs	r3, #4
 23fdd64:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fdd68:	6041      	str	r1, [r0, #4]
 23fdd6a:	7503      	strb	r3, [r0, #20]
}
 23fdd6c:	bd10      	pop	{r4, pc}
	...

023fdd70 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fdd70:	b507      	push	{r0, r1, r2, lr}
 23fdd72:	4b06      	ldr	r3, [pc, #24]	; (23fdd8c <_ZN9IPAddressC1EPKh+0x1c>)
 23fdd74:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fdd76:	78cb      	ldrb	r3, [r1, #3]
 23fdd78:	9300      	str	r3, [sp, #0]
 23fdd7a:	788b      	ldrb	r3, [r1, #2]
 23fdd7c:	784a      	ldrb	r2, [r1, #1]
 23fdd7e:	7809      	ldrb	r1, [r1, #0]
 23fdd80:	f7ff ffe8 	bl	23fdd54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fdd84:	b003      	add	sp, #12
 23fdd86:	f85d fb04 	ldr.w	pc, [sp], #4
 23fdd8a:	bf00      	nop
 23fdd8c:	023ffc8c 	.word	0x023ffc8c

023fdd90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdd90:	7441      	strb	r1, [r0, #17]
}
 23fdd92:	4770      	bx	lr

023fdd94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdd94:	4770      	bx	lr

023fdd96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fdd96:	4770      	bx	lr

023fdd98 <_ZN9USBSerial4readEv>:
{
 23fdd98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fdd9a:	2100      	movs	r1, #0
 23fdd9c:	7c00      	ldrb	r0, [r0, #16]
 23fdd9e:	f7ff f8d5 	bl	23fcf4c <HAL_USB_USART_Receive_Data>
}
 23fdda2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdda6:	bd08      	pop	{r3, pc}

023fdda8 <_ZN9USBSerial4peekEv>:
{
 23fdda8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fddaa:	2101      	movs	r1, #1
 23fddac:	7c00      	ldrb	r0, [r0, #16]
 23fddae:	f7ff f8cd 	bl	23fcf4c <HAL_USB_USART_Receive_Data>
}
 23fddb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fddb6:	bd08      	pop	{r3, pc}

023fddb8 <_ZN9USBSerial17availableForWriteEv>:
{
 23fddb8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fddba:	7c00      	ldrb	r0, [r0, #16]
 23fddbc:	f7ff f8b8 	bl	23fcf30 <HAL_USB_USART_Available_Data_For_Write>
}
 23fddc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fddc4:	bd08      	pop	{r3, pc}

023fddc6 <_ZN9USBSerial9availableEv>:
{
 23fddc6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fddc8:	7c00      	ldrb	r0, [r0, #16]
 23fddca:	f7ff f8a3 	bl	23fcf14 <HAL_USB_USART_Available_Data>
}
 23fddce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fddd2:	bd08      	pop	{r3, pc}

023fddd4 <_ZN9USBSerial5writeEh>:
{
 23fddd4:	b513      	push	{r0, r1, r4, lr}
 23fddd6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fddd8:	7c00      	ldrb	r0, [r0, #16]
{
 23fddda:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdddc:	f7ff f8a8 	bl	23fcf30 <HAL_USB_USART_Available_Data_For_Write>
 23fdde0:	2800      	cmp	r0, #0
 23fdde2:	9901      	ldr	r1, [sp, #4]
 23fdde4:	dc01      	bgt.n	23fddea <_ZN9USBSerial5writeEh+0x16>
 23fdde6:	7c60      	ldrb	r0, [r4, #17]
 23fdde8:	b120      	cbz	r0, 23fddf4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fddea:	7c20      	ldrb	r0, [r4, #16]
 23fddec:	f7ff f8bc 	bl	23fcf68 <HAL_USB_USART_Send_Data>
 23fddf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fddf4:	b002      	add	sp, #8
 23fddf6:	bd10      	pop	{r4, pc}

023fddf8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fddf8:	7c00      	ldrb	r0, [r0, #16]
 23fddfa:	f7ff b8c3 	b.w	23fcf84 <HAL_USB_USART_Flush_Data>

023fddfe <_ZN9USBSerialD0Ev>:
 23fddfe:	b510      	push	{r4, lr}
 23fde00:	4604      	mov	r4, r0
 23fde02:	2114      	movs	r1, #20
 23fde04:	f7fb fbe5 	bl	23f95d2 <_ZdlPvj>
 23fde08:	4620      	mov	r0, r4
 23fde0a:	bd10      	pop	{r4, pc}

023fde0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fde0c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fde0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fde12:	4604      	mov	r4, r0
 23fde14:	4608      	mov	r0, r1
 23fde16:	2100      	movs	r1, #0
 23fde18:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fde1c:	4b04      	ldr	r3, [pc, #16]	; (23fde30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fde1e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fde20:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fde22:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fde24:	4611      	mov	r1, r2
  _blocking = true;
 23fde26:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fde28:	f7ff f858 	bl	23fcedc <HAL_USB_USART_Init>
}
 23fde2c:	4620      	mov	r0, r4
 23fde2e:	bd10      	pop	{r4, pc}
 23fde30:	023ffca0 	.word	0x023ffca0

023fde34 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fde34:	2200      	movs	r2, #0
 23fde36:	7c00      	ldrb	r0, [r0, #16]
 23fde38:	f7ff b85e 	b.w	23fcef8 <HAL_USB_USART_Begin>

023fde3c <_Z19acquireSerialBufferv>:
{
 23fde3c:	b510      	push	{r4, lr}
 23fde3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fde40:	2214      	movs	r2, #20
 23fde42:	2100      	movs	r1, #0
 23fde44:	f000 ff3b 	bl	23fecbe <memset>
}
 23fde48:	4620      	mov	r0, r4
 23fde4a:	bd10      	pop	{r4, pc}

023fde4c <_Z16_fetch_usbserialv>:
{
 23fde4c:	b510      	push	{r4, lr}
 23fde4e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fde50:	a803      	add	r0, sp, #12
 23fde52:	f7ff fff3 	bl	23fde3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fde56:	4c0c      	ldr	r4, [pc, #48]	; (23fde88 <_Z16_fetch_usbserialv+0x3c>)
 23fde58:	e8d4 1f8f 	ldab	r1, [r4]
 23fde5c:	f011 0101 	ands.w	r1, r1, #1
 23fde60:	d10f      	bne.n	23fde82 <_Z16_fetch_usbserialv+0x36>
 23fde62:	4620      	mov	r0, r4
 23fde64:	9101      	str	r1, [sp, #4]
 23fde66:	f7fb fbc3 	bl	23f95f0 <__cxa_guard_acquire>
 23fde6a:	9901      	ldr	r1, [sp, #4]
 23fde6c:	b148      	cbz	r0, 23fde82 <_Z16_fetch_usbserialv+0x36>
 23fde6e:	aa03      	add	r2, sp, #12
 23fde70:	4806      	ldr	r0, [pc, #24]	; (23fde8c <_Z16_fetch_usbserialv+0x40>)
 23fde72:	f7ff ffcb 	bl	23fde0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fde76:	4620      	mov	r0, r4
 23fde78:	f7fb fbbf 	bl	23f95fa <__cxa_guard_release>
 23fde7c:	4804      	ldr	r0, [pc, #16]	; (23fde90 <_Z16_fetch_usbserialv+0x44>)
 23fde7e:	f000 ff0b 	bl	23fec98 <atexit>
	return _usbserial;
}
 23fde82:	4802      	ldr	r0, [pc, #8]	; (23fde8c <_Z16_fetch_usbserialv+0x40>)
 23fde84:	b008      	add	sp, #32
 23fde86:	bd10      	pop	{r4, pc}
 23fde88:	1007aed8 	.word	0x1007aed8
 23fde8c:	1007aedc 	.word	0x1007aedc
 23fde90:	023fdd95 	.word	0x023fdd95

023fde94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fde94:	4770      	bx	lr

023fde96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fde96:	7441      	strb	r1, [r0, #17]
}
 23fde98:	4770      	bx	lr

023fde9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fde9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fde9c:	7c00      	ldrb	r0, [r0, #16]
 23fde9e:	f7fe fea3 	bl	23fcbe8 <hal_usart_available_data_for_write>
}
 23fdea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdea6:	bd08      	pop	{r3, pc}

023fdea8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fdea8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fdeaa:	7c00      	ldrb	r0, [r0, #16]
 23fdeac:	f7fe fe56 	bl	23fcb5c <hal_usart_available>
}
 23fdeb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdeb4:	bd08      	pop	{r3, pc}

023fdeb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fdeb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fdeb8:	7c00      	ldrb	r0, [r0, #16]
 23fdeba:	f7fe fe6b 	bl	23fcb94 <hal_usart_peek>
}
 23fdebe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdec2:	bd08      	pop	{r3, pc}

023fdec4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fdec4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fdec6:	7c00      	ldrb	r0, [r0, #16]
 23fdec8:	f7fe fe56 	bl	23fcb78 <hal_usart_read>
}
 23fdecc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fded0:	bd08      	pop	{r3, pc}

023fded2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fded2:	7c00      	ldrb	r0, [r0, #16]
 23fded4:	f7fe be6c 	b.w	23fcbb0 <hal_usart_flush>

023fded8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fded8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdeda:	7c45      	ldrb	r5, [r0, #17]
{
 23fdedc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdede:	b12d      	cbz	r5, 23fdeec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fdee0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fdee2:	b003      	add	sp, #12
 23fdee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fdee8:	f7fe be2a 	b.w	23fcb40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdeec:	7c00      	ldrb	r0, [r0, #16]
 23fdeee:	9101      	str	r1, [sp, #4]
 23fdef0:	f7fe fe7a 	bl	23fcbe8 <hal_usart_available_data_for_write>
 23fdef4:	2800      	cmp	r0, #0
 23fdef6:	9901      	ldr	r1, [sp, #4]
 23fdef8:	dcf2      	bgt.n	23fdee0 <_ZN11USARTSerial5writeEh+0x8>
}
 23fdefa:	4628      	mov	r0, r5
 23fdefc:	b003      	add	sp, #12
 23fdefe:	bd30      	pop	{r4, r5, pc}

023fdf00 <_ZN11USARTSerialD0Ev>:
 23fdf00:	b510      	push	{r4, lr}
 23fdf02:	4604      	mov	r4, r0
 23fdf04:	2114      	movs	r1, #20
 23fdf06:	f7fb fb64 	bl	23f95d2 <_ZdlPvj>
 23fdf0a:	4620      	mov	r0, r4
 23fdf0c:	bd10      	pop	{r4, pc}
	...

023fdf10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdf10:	b510      	push	{r4, lr}
 23fdf12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdf16:	4604      	mov	r4, r0
 23fdf18:	4608      	mov	r0, r1
 23fdf1a:	4611      	mov	r1, r2
 23fdf1c:	2200      	movs	r2, #0
 23fdf1e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdf22:	4b04      	ldr	r3, [pc, #16]	; (23fdf34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fdf24:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdf26:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdf28:	2301      	movs	r3, #1
 23fdf2a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fdf2c:	f7fe fe6a 	bl	23fcc04 <hal_usart_init_ex>
}
 23fdf30:	4620      	mov	r0, r4
 23fdf32:	bd10      	pop	{r4, pc}
 23fdf34:	023ffcd4 	.word	0x023ffcd4

023fdf38 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdf38:	7c00      	ldrb	r0, [r0, #16]
 23fdf3a:	f7fe be47 	b.w	23fcbcc <hal_usart_is_enabled>

023fdf3e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fdf3e:	4770      	bx	lr

023fdf40 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fdf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdf42:	4606      	mov	r6, r0
 23fdf44:	4615      	mov	r5, r2
 23fdf46:	460c      	mov	r4, r1
 23fdf48:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fdf4a:	42bc      	cmp	r4, r7
 23fdf4c:	d006      	beq.n	23fdf5c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fdf4e:	6833      	ldr	r3, [r6, #0]
 23fdf50:	4630      	mov	r0, r6
 23fdf52:	689b      	ldr	r3, [r3, #8]
 23fdf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fdf58:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fdf5a:	e7f6      	b.n	23fdf4a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fdf5c:	4628      	mov	r0, r5
 23fdf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdf60 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fdf60:	2200      	movs	r2, #0
 23fdf62:	7c00      	ldrb	r0, [r0, #16]
 23fdf64:	f7fe be5c 	b.w	23fcc20 <hal_i2c_write>

023fdf68 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fdf68:	2100      	movs	r1, #0
 23fdf6a:	7c00      	ldrb	r0, [r0, #16]
 23fdf6c:	f7fe be66 	b.w	23fcc3c <hal_i2c_available>

023fdf70 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fdf70:	2100      	movs	r1, #0
 23fdf72:	7c00      	ldrb	r0, [r0, #16]
 23fdf74:	f7fe be70 	b.w	23fcc58 <hal_i2c_read>

023fdf78 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fdf78:	2100      	movs	r1, #0
 23fdf7a:	7c00      	ldrb	r0, [r0, #16]
 23fdf7c:	f7fe be7a 	b.w	23fcc74 <hal_i2c_peek>

023fdf80 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fdf80:	2100      	movs	r1, #0
 23fdf82:	7c00      	ldrb	r0, [r0, #16]
 23fdf84:	f7fe be84 	b.w	23fcc90 <hal_i2c_flush>

023fdf88 <_ZN7TwoWireD0Ev>:
 23fdf88:	b510      	push	{r4, lr}
 23fdf8a:	4604      	mov	r4, r0
 23fdf8c:	2114      	movs	r1, #20
 23fdf8e:	f7fb fb20 	bl	23f95d2 <_ZdlPvj>
 23fdf92:	4620      	mov	r0, r4
 23fdf94:	bd10      	pop	{r4, pc}
	...

023fdf98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fdf98:	b538      	push	{r3, r4, r5, lr}
 23fdf9a:	4604      	mov	r4, r0
 23fdf9c:	4615      	mov	r5, r2
 23fdf9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdfa2:	2200      	movs	r2, #0
 23fdfa4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdfa8:	4b09      	ldr	r3, [pc, #36]	; (23fdfd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fdfaa:	4608      	mov	r0, r1
  _i2c = i2c;
 23fdfac:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fdfae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fdfb0:	4629      	mov	r1, r5
 23fdfb2:	f7fe fe89 	bl	23fccc8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdfb6:	30bf      	adds	r0, #191	; 0xbf
 23fdfb8:	d108      	bne.n	23fdfcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fdfba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdfbc:	07db      	lsls	r3, r3, #31
 23fdfbe:	d505      	bpl.n	23fdfcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fdfc0:	6868      	ldr	r0, [r5, #4]
 23fdfc2:	f7ff f983 	bl	23fd2cc <free>
    free(conf.tx_buffer);
 23fdfc6:	68e8      	ldr	r0, [r5, #12]
 23fdfc8:	f7ff f980 	bl	23fd2cc <free>
}
 23fdfcc:	4620      	mov	r0, r4
 23fdfce:	bd38      	pop	{r3, r4, r5, pc}
 23fdfd0:	023ffd08 	.word	0x023ffd08

023fdfd4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fdfd4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fdfd6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fdfd8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fdfdc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fdfde:	2201      	movs	r2, #1
 23fdfe0:	f04f 33ff 	mov.w	r3, #4294967295
 23fdfe4:	f10d 0107 	add.w	r1, sp, #7
 23fdfe8:	47a0      	blx	r4
}
 23fdfea:	b002      	add	sp, #8
 23fdfec:	bd10      	pop	{r4, pc}

023fdfee <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fdfee:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fdff0:	6803      	ldr	r3, [r0, #0]
 23fdff2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fdff4:	f04f 33ff 	mov.w	r3, #4294967295
 23fdff8:	46a4      	mov	ip, r4
}
 23fdffa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fdffe:	4760      	bx	ip

023fe000 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe000:	b513      	push	{r0, r1, r4, lr}
 23fe002:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fe004:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe006:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fe00a:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fe00c:	f10d 0107 	add.w	r1, sp, #7
 23fe010:	2201      	movs	r2, #1
 23fe012:	47a0      	blx	r4
}
 23fe014:	b002      	add	sp, #8
 23fe016:	bd10      	pop	{r4, pc}

023fe018 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fe018:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe01a:	6943      	ldr	r3, [r0, #20]
 23fe01c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe01e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe022:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe026:	429a      	cmp	r2, r3
 23fe028:	d008      	beq.n	23fe03c <_ZN9TCPClient4readEv+0x24>
 23fe02a:	6963      	ldr	r3, [r4, #20]
 23fe02c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe030:	1c51      	adds	r1, r2, #1
 23fe032:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fe036:	4413      	add	r3, r2
 23fe038:	7918      	ldrb	r0, [r3, #4]
}
 23fe03a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe03c:	6803      	ldr	r3, [r0, #0]
 23fe03e:	691b      	ldr	r3, [r3, #16]
 23fe040:	4798      	blx	r3
 23fe042:	2800      	cmp	r0, #0
 23fe044:	d1f1      	bne.n	23fe02a <_ZN9TCPClient4readEv+0x12>
 23fe046:	f04f 30ff 	mov.w	r0, #4294967295
 23fe04a:	e7f6      	b.n	23fe03a <_ZN9TCPClient4readEv+0x22>

023fe04c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fe04c:	4770      	bx	lr

023fe04e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fe04e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fe050:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fe052:	43c0      	mvns	r0, r0
 23fe054:	0fc0      	lsrs	r0, r0, #31
 23fe056:	4770      	bx	lr

023fe058 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe058:	4770      	bx	lr
	...

023fe05c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fe05c:	4b06      	ldr	r3, [pc, #24]	; (23fe078 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fe05e:	b510      	push	{r4, lr}
	    ||
 23fe060:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fe062:	f100 040c 	add.w	r4, r0, #12
 23fe066:	d005      	beq.n	23fe074 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fe068:	4608      	mov	r0, r1
 23fe06a:	f000 fd03 	bl	23fea74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fe06e:	2800      	cmp	r0, #0
 23fe070:	bf08      	it	eq
 23fe072:	2400      	moveq	r4, #0
      }
 23fe074:	4620      	mov	r0, r4
 23fe076:	bd10      	pop	{r4, pc}
 23fe078:	023ffc5c 	.word	0x023ffc5c

023fe07c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe07c:	b510      	push	{r4, lr}
 23fe07e:	4604      	mov	r4, r0
 23fe080:	21ac      	movs	r1, #172	; 0xac
 23fe082:	f7fb faa6 	bl	23f95d2 <_ZdlPvj>
 23fe086:	4620      	mov	r0, r4
 23fe088:	bd10      	pop	{r4, pc}

023fe08a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fe08a:	21ac      	movs	r1, #172	; 0xac
 23fe08c:	f7fb baa1 	b.w	23f95d2 <_ZdlPvj>

023fe090 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fe090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fe094:	f04f 0800 	mov.w	r8, #0
 23fe098:	461c      	mov	r4, r3
 23fe09a:	b086      	sub	sp, #24
 23fe09c:	f8c0 8004 	str.w	r8, [r0, #4]
 23fe0a0:	4605      	mov	r5, r0
 23fe0a2:	460e      	mov	r6, r1
 23fe0a4:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fe0a6:	4641      	mov	r1, r8
 23fe0a8:	2210      	movs	r2, #16
 23fe0aa:	a802      	add	r0, sp, #8
 23fe0ac:	f000 fe07 	bl	23fecbe <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fe0b0:	1c63      	adds	r3, r4, #1
 23fe0b2:	d009      	beq.n	23fe0c8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fe0b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe0b8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe0bc:	fb03 4412 	mls	r4, r3, r2, r4
 23fe0c0:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fe0c2:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe0c6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fe0c8:	2310      	movs	r3, #16
 23fe0ca:	6968      	ldr	r0, [r5, #20]
 23fe0cc:	9300      	str	r3, [sp, #0]
 23fe0ce:	f241 0205 	movw	r2, #4101	; 0x1005
 23fe0d2:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fe0d6:	6800      	ldr	r0, [r0, #0]
 23fe0d8:	ab02      	add	r3, sp, #8
 23fe0da:	f7fe fe03 	bl	23fcce4 <sock_setsockopt>
    if (ret < 0) {
 23fe0de:	2800      	cmp	r0, #0
 23fe0e0:	da07      	bge.n	23fe0f2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fe0e2:	f7ff f92b 	bl	23fd33c <__errno>
 23fe0e6:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fe0e8:	2000      	movs	r0, #0
 23fe0ea:	606b      	str	r3, [r5, #4]
}
 23fe0ec:	b006      	add	sp, #24
 23fe0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fe0f2:	6968      	ldr	r0, [r5, #20]
 23fe0f4:	2300      	movs	r3, #0
 23fe0f6:	463a      	mov	r2, r7
 23fe0f8:	4631      	mov	r1, r6
 23fe0fa:	6800      	ldr	r0, [r0, #0]
 23fe0fc:	f7fe fe2a 	bl	23fcd54 <sock_send>
    if (ret < 0) {
 23fe100:	1e03      	subs	r3, r0, #0
 23fe102:	dbee      	blt.n	23fe0e2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fe104:	4618      	mov	r0, r3
 23fe106:	e7f1      	b.n	23fe0ec <_ZN9TCPClient5writeEPKhjm+0x5c>

023fe108 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fe108:	b530      	push	{r4, r5, lr}
 23fe10a:	4604      	mov	r4, r0
 23fe10c:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fe10e:	4668      	mov	r0, sp
 23fe110:	f7ff fe2e 	bl	23fdd70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe114:	ad01      	add	r5, sp, #4
 23fe116:	3404      	adds	r4, #4
 23fe118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe11c:	682b      	ldr	r3, [r5, #0]
 23fe11e:	7023      	strb	r3, [r4, #0]
    }
 23fe120:	b007      	add	sp, #28
 23fe122:	bd30      	pop	{r4, r5, pc}

023fe124 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fe124:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fe126:	4604      	mov	r4, r0
 23fe128:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fe12a:	694d      	ldr	r5, [r1, #20]
 23fe12c:	4b04      	ldr	r3, [pc, #16]	; (23fe140 <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fe12e:	358c      	adds	r5, #140	; 0x8c
 23fe130:	f844 3b04 	str.w	r3, [r4], #4
 23fe134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe138:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fe13a:	4630      	mov	r0, r6
 23fe13c:	7023      	strb	r3, [r4, #0]
 23fe13e:	bd70      	pop	{r4, r5, r6, pc}
 23fe140:	023ffc8c 	.word	0x023ffc8c

023fe144 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe148:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fe14a:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe14c:	4698      	mov	r8, r3
    stop();
 23fe14e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe150:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fe152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe154:	4606      	mov	r6, r0
 23fe156:	4617      	mov	r7, r2
    stop();
 23fe158:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe15a:	4628      	mov	r0, r5
 23fe15c:	466b      	mov	r3, sp
 23fe15e:	4622      	mov	r2, r4
 23fe160:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fe162:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe164:	f7fe fb9c 	bl	23fc8a0 <netdb_getaddrinfo>
 23fe168:	4605      	mov	r5, r0
 23fe16a:	2800      	cmp	r0, #0
 23fe16c:	d163      	bne.n	23fe236 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fe16e:	9b00      	ldr	r3, [sp, #0]
 23fe170:	2b00      	cmp	r3, #0
 23fe172:	d04b      	beq.n	23fe20c <_ZN9TCPClient7connectEPKctm+0xc8>
 23fe174:	695b      	ldr	r3, [r3, #20]
 23fe176:	2b00      	cmp	r3, #0
 23fe178:	d048      	beq.n	23fe20c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fe17a:	a806      	add	r0, sp, #24
 23fe17c:	f7ff fdb4 	bl	23fdce8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fe180:	9b00      	ldr	r3, [sp, #0]
 23fe182:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fe184:	7863      	ldrb	r3, [r4, #1]
 23fe186:	2b02      	cmp	r3, #2
 23fe188:	d104      	bne.n	23fe194 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fe18a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fe18c:	a806      	add	r0, sp, #24
 23fe18e:	f7ff ffbb 	bl	23fe108 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fe192:	e026      	b.n	23fe1e2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fe194:	2b0a      	cmp	r3, #10
 23fe196:	d124      	bne.n	23fe1e2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fe198:	2211      	movs	r2, #17
 23fe19a:	4629      	mov	r1, r5
 23fe19c:	a801      	add	r0, sp, #4
 23fe19e:	f000 fd8e 	bl	23fecbe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fe1a2:	68a3      	ldr	r3, [r4, #8]
 23fe1a4:	2b00      	cmp	r3, #0
 23fe1a6:	d038      	beq.n	23fe21a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe1a8:	f104 0308 	add.w	r3, r4, #8
 23fe1ac:	f10d 0c04 	add.w	ip, sp, #4
 23fe1b0:	3418      	adds	r4, #24
 23fe1b2:	4662      	mov	r2, ip
 23fe1b4:	6818      	ldr	r0, [r3, #0]
 23fe1b6:	6859      	ldr	r1, [r3, #4]
 23fe1b8:	3308      	adds	r3, #8
 23fe1ba:	c203      	stmia	r2!, {r0, r1}
 23fe1bc:	42a3      	cmp	r3, r4
 23fe1be:	4694      	mov	ip, r2
 23fe1c0:	d1f7      	bne.n	23fe1b2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fe1c2:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fe1c4:	a901      	add	r1, sp, #4
 23fe1c6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23fe1c8:	f88d 3014 	strb.w	r3, [sp, #20]
 23fe1cc:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23fe1ce:	f7ff fd99 	bl	23fdd04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe1d2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fe1d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fe1da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe1dc:	f8dc 3000 	ldr.w	r3, [ip]
 23fe1e0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23fe1e2:	a806      	add	r0, sp, #24
 23fe1e4:	f7ff fda0 	bl	23fdd28 <_ZNK9IPAddresscvbEv>
        if (addr) {
 23fe1e8:	b180      	cbz	r0, 23fe20c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23fe1ea:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23fe1ec:	ac0d      	add	r4, sp, #52	; 0x34
 23fe1ee:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 23fe1f2:	4b12      	ldr	r3, [pc, #72]	; (23fe23c <_ZN9TCPClient7connectEPKctm+0xf8>)
 23fe1f4:	ad07      	add	r5, sp, #28
 23fe1f6:	930c      	str	r3, [sp, #48]	; 0x30
 23fe1f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe1fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe1fc:	682b      	ldr	r3, [r5, #0]
 23fe1fe:	463a      	mov	r2, r7
 23fe200:	7023      	strb	r3, [r4, #0]
 23fe202:	4630      	mov	r0, r6
 23fe204:	4643      	mov	r3, r8
 23fe206:	a90c      	add	r1, sp, #48	; 0x30
 23fe208:	47c8      	blx	r9
 23fe20a:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23fe20c:	9800      	ldr	r0, [sp, #0]
 23fe20e:	f7fe fb39 	bl	23fc884 <netdb_freeaddrinfo>
}
 23fe212:	4628      	mov	r0, r5
 23fe214:	b013      	add	sp, #76	; 0x4c
 23fe216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fe21a:	68e3      	ldr	r3, [r4, #12]
 23fe21c:	2b00      	cmp	r3, #0
 23fe21e:	d1c3      	bne.n	23fe1a8 <_ZN9TCPClient7connectEPKctm+0x64>
 23fe220:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fe224:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23fe228:	f7fe fc6e 	bl	23fcb08 <inet_htonl>
 23fe22c:	4581      	cmp	r9, r0
 23fe22e:	d1bb      	bne.n	23fe1a8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23fe230:	f104 0114 	add.w	r1, r4, #20
 23fe234:	e7aa      	b.n	23fe18c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe236:	4625      	mov	r5, r4
 23fe238:	e7e8      	b.n	23fe20c <_ZN9TCPClient7connectEPKctm+0xc8>
 23fe23a:	bf00      	nop
 23fe23c:	023ffc8c 	.word	0x023ffc8c

023fe240 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23fe240:	b538      	push	{r3, r4, r5, lr}
 23fe242:	6943      	ldr	r3, [r0, #20]
 23fe244:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23fe246:	681a      	ldr	r2, [r3, #0]
 23fe248:	2a00      	cmp	r2, #0
 23fe24a:	da10      	bge.n	23fe26e <_ZN9TCPClient9connectedEv+0x2e>
 23fe24c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe250:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe254:	429a      	cmp	r2, r3
 23fe256:	d10a      	bne.n	23fe26e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23fe258:	6803      	ldr	r3, [r0, #0]
 23fe25a:	691b      	ldr	r3, [r3, #16]
 23fe25c:	4798      	blx	r3
        if (!rv) {
 23fe25e:	4604      	mov	r4, r0
 23fe260:	b928      	cbnz	r0, 23fe26e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23fe262:	682b      	ldr	r3, [r5, #0]
 23fe264:	4628      	mov	r0, r5
 23fe266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe268:	4798      	blx	r3
        rv = available();
 23fe26a:	4620      	mov	r0, r4
}
 23fe26c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23fe26e:	2001      	movs	r0, #1
 23fe270:	e7fc      	b.n	23fe26c <_ZN9TCPClient9connectedEv+0x2c>

023fe272 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23fe272:	b510      	push	{r4, lr}
 23fe274:	6943      	ldr	r3, [r0, #20]
 23fe276:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fe278:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe27c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe280:	429a      	cmp	r2, r3
 23fe282:	d005      	beq.n	23fe290 <_ZN9TCPClient4peekEv+0x1e>
 23fe284:	6963      	ldr	r3, [r4, #20]
 23fe286:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe28a:	4413      	add	r3, r2
 23fe28c:	7918      	ldrb	r0, [r3, #4]
}
 23fe28e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fe290:	6803      	ldr	r3, [r0, #0]
 23fe292:	691b      	ldr	r3, [r3, #16]
 23fe294:	4798      	blx	r3
 23fe296:	2800      	cmp	r0, #0
 23fe298:	d1f4      	bne.n	23fe284 <_ZN9TCPClient4peekEv+0x12>
 23fe29a:	f04f 30ff 	mov.w	r0, #4294967295
 23fe29e:	e7f6      	b.n	23fe28e <_ZN9TCPClient4peekEv+0x1c>

023fe2a0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe2a2:	6943      	ldr	r3, [r0, #20]
 23fe2a4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23fe2a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe2aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe2ae:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23fe2b0:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe2b2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23fe2b4:	d016      	beq.n	23fe2e4 <_ZN9TCPClient4readEPhj+0x44>
 23fe2b6:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fe2b8:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23fe2ba:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23fe2be:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23fe2c2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23fe2c4:	42bc      	cmp	r4, r7
 23fe2c6:	bf28      	it	cs
 23fe2c8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fe2ca:	3304      	adds	r3, #4
 23fe2cc:	4622      	mov	r2, r4
 23fe2ce:	4419      	add	r1, r3
 23fe2d0:	f000 fce8 	bl	23feca4 <memcpy>
 23fe2d4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23fe2d6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23fe2da:	4423      	add	r3, r4
 23fe2dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23fe2e0:	4620      	mov	r0, r4
 23fe2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23fe2e4:	6803      	ldr	r3, [r0, #0]
 23fe2e6:	691b      	ldr	r3, [r3, #16]
 23fe2e8:	4798      	blx	r3
 23fe2ea:	2800      	cmp	r0, #0
 23fe2ec:	d1e3      	bne.n	23fe2b6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23fe2ee:	f04f 34ff 	mov.w	r4, #4294967295
 23fe2f2:	e7f5      	b.n	23fe2e0 <_ZN9TCPClient4readEPhj+0x40>

023fe2f4 <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23fe2f4:	2300      	movs	r3, #0
 23fe2f6:	6942      	ldr	r2, [r0, #20]
 23fe2f8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23fe2fc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23fe2fe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23fe302:	4770      	bx	lr

023fe304 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe304:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe306:	460c      	mov	r4, r1
 23fe308:	461f      	mov	r7, r3
    stop();
 23fe30a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe30c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 23fe30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe310:	4605      	mov	r5, r0
 23fe312:	4616      	mov	r6, r2
    stop();
 23fe314:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23fe316:	7d23      	ldrb	r3, [r4, #20]
 23fe318:	2206      	movs	r2, #6
 23fe31a:	2b04      	cmp	r3, #4
 23fe31c:	bf0c      	ite	eq
 23fe31e:	2002      	moveq	r0, #2
 23fe320:	200a      	movne	r0, #10
 23fe322:	2101      	movs	r1, #1
 23fe324:	f7fe fd24 	bl	23fcd70 <sock_socket>
 23fe328:	696b      	ldr	r3, [r5, #20]
 23fe32a:	6018      	str	r0, [r3, #0]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fe32c:	696b      	ldr	r3, [r5, #20]
 23fe32e:	681b      	ldr	r3, [r3, #0]
 23fe330:	2b00      	cmp	r3, #0
 23fe332:	da07      	bge.n	23fe344 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
    NAMED_SCOPE_GUARD(done, {
 23fe334:	682b      	ldr	r3, [r5, #0]
 23fe336:	4628      	mov	r0, r5
 23fe338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fe33a:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fe33c:	4798      	blx	r3
}
 23fe33e:	4620      	mov	r0, r4
 23fe340:	b00b      	add	sp, #44	; 0x2c
 23fe342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flush_buffer();
 23fe344:	4628      	mov	r0, r5
 23fe346:	f7ff ffd5 	bl	23fe2f4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fe34a:	b1b7      	cbz	r7, 23fe37a <_ZN9TCPClient7connectE9IPAddresstm+0x76>
        struct ifreq ifr = {};
 23fe34c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fe34e:	a903      	add	r1, sp, #12
 23fe350:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fe352:	9303      	str	r3, [sp, #12]
 23fe354:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fe358:	f7fe fae8 	bl	23fc92c <if_index_to_name>
 23fe35c:	2800      	cmp	r0, #0
 23fe35e:	d1e9      	bne.n	23fe334 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fe360:	2306      	movs	r3, #6
 23fe362:	6968      	ldr	r0, [r5, #20]
 23fe364:	9300      	str	r3, [sp, #0]
 23fe366:	f241 020b 	movw	r2, #4107	; 0x100b
 23fe36a:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fe36e:	6800      	ldr	r0, [r0, #0]
 23fe370:	ab03      	add	r3, sp, #12
 23fe372:	f7fe fcb7 	bl	23fcce4 <sock_setsockopt>
 23fe376:	2800      	cmp	r0, #0
 23fe378:	d1dc      	bne.n	23fe334 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
    sockaddr_storage saddr = {};
 23fe37a:	221c      	movs	r2, #28
 23fe37c:	2100      	movs	r1, #0
 23fe37e:	a803      	add	r0, sp, #12
 23fe380:	f000 fc9d 	bl	23fecbe <memset>
    if (ip.version() == 4) {
 23fe384:	7d23      	ldrb	r3, [r4, #20]
 23fe386:	2b04      	cmp	r3, #4
 23fe388:	d11d      	bne.n	23fe3c6 <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        s->sin_len = sizeof(saddr);
 23fe38a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fe38e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fe390:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fe394:	f7fe fbc6 	bl	23fcb24 <inet_htons>
 23fe398:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fe39c:	6860      	ldr	r0, [r4, #4]
 23fe39e:	f7fe fbb3 	bl	23fcb08 <inet_htonl>
 23fe3a2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fe3a4:	696b      	ldr	r3, [r5, #20]
 23fe3a6:	221c      	movs	r2, #28
 23fe3a8:	6818      	ldr	r0, [r3, #0]
 23fe3aa:	a903      	add	r1, sp, #12
 23fe3ac:	f7fe fcb6 	bl	23fcd1c <sock_connect>
 23fe3b0:	2800      	cmp	r0, #0
 23fe3b2:	d1bf      	bne.n	23fe334 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
 23fe3b4:	696d      	ldr	r5, [r5, #20]
 23fe3b6:	3404      	adds	r4, #4
 23fe3b8:	358c      	adds	r5, #140	; 0x8c
 23fe3ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fe3bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fe3be:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fe3c0:	2401      	movs	r4, #1
 23fe3c2:	702b      	strb	r3, [r5, #0]
 23fe3c4:	e7bb      	b.n	23fe33e <_ZN9TCPClient7connectE9IPAddresstm+0x3a>
        s->sin6_len = sizeof(saddr);
 23fe3c6:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23fe3ca:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23fe3cc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23fe3d0:	f7fe fba8 	bl	23fcb24 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fe3d4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23fe3d6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fe3da:	1d23      	adds	r3, r4, #4
 23fe3dc:	f104 0714 	add.w	r7, r4, #20
 23fe3e0:	4632      	mov	r2, r6
 23fe3e2:	6818      	ldr	r0, [r3, #0]
 23fe3e4:	6859      	ldr	r1, [r3, #4]
 23fe3e6:	3308      	adds	r3, #8
 23fe3e8:	c203      	stmia	r2!, {r0, r1}
 23fe3ea:	42bb      	cmp	r3, r7
 23fe3ec:	4616      	mov	r6, r2
 23fe3ee:	d1f7      	bne.n	23fe3e0 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>
 23fe3f0:	e7d8      	b.n	23fe3a4 <_ZN9TCPClient7connectE9IPAddresstm+0xa0>
	...

023fe3f4 <_ZN9TCPClient9availableEv>:
{
 23fe3f4:	b530      	push	{r4, r5, lr}
 23fe3f6:	6942      	ldr	r2, [r0, #20]
 23fe3f8:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23fe3fa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23fe3fe:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23fe400:	b12b      	cbz	r3, 23fe40e <_ZN9TCPClient9availableEv+0x1a>
 23fe402:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fe406:	429a      	cmp	r2, r3
 23fe408:	d101      	bne.n	23fe40e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fe40a:	f7ff ff73 	bl	23fe2f4 <_ZN9TCPClient12flush_bufferEv>
 23fe40e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23fe410:	6808      	ldr	r0, [r1, #0]
 23fe412:	2800      	cmp	r0, #0
 23fe414:	db18      	blt.n	23fe448 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23fe416:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23fe41a:	2d7f      	cmp	r5, #127	; 0x7f
 23fe41c:	d814      	bhi.n	23fe448 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23fe41e:	3104      	adds	r1, #4
 23fe420:	2308      	movs	r3, #8
 23fe422:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23fe426:	4429      	add	r1, r5
 23fe428:	f7fe fc86 	bl	23fcd38 <sock_recv>
            if (ret > 0) {
 23fe42c:	2800      	cmp	r0, #0
 23fe42e:	dd13      	ble.n	23fe458 <_ZN9TCPClient9availableEv+0x64>
 23fe430:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23fe432:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe436:	b90a      	cbnz	r2, 23fe43c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23fe438:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23fe43c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23fe43e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe442:	4410      	add	r0, r2
 23fe444:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23fe448:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23fe44a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23fe44e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23fe452:	1ac0      	subs	r0, r0, r3
 23fe454:	b00b      	add	sp, #44	; 0x2c
 23fe456:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23fe458:	f7fe ff70 	bl	23fd33c <__errno>
 23fe45c:	6803      	ldr	r3, [r0, #0]
 23fe45e:	2b0b      	cmp	r3, #11
 23fe460:	d0f2      	beq.n	23fe448 <_ZN9TCPClient9availableEv+0x54>
 23fe462:	f7fe ff6b 	bl	23fd33c <__errno>
 23fe466:	6803      	ldr	r3, [r0, #0]
 23fe468:	2b0b      	cmp	r3, #11
 23fe46a:	d0ed      	beq.n	23fe448 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23fe46c:	2320      	movs	r3, #32
 23fe46e:	2500      	movs	r5, #0
 23fe470:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fe474:	f7fe ff62 	bl	23fd33c <__errno>
 23fe478:	6803      	ldr	r3, [r0, #0]
 23fe47a:	aa02      	add	r2, sp, #8
 23fe47c:	9301      	str	r3, [sp, #4]
 23fe47e:	4b08      	ldr	r3, [pc, #32]	; (23fe4a0 <_ZN9TCPClient9availableEv+0xac>)
 23fe480:	2032      	movs	r0, #50	; 0x32
 23fe482:	4908      	ldr	r1, [pc, #32]	; (23fe4a4 <_ZN9TCPClient9availableEv+0xb0>)
 23fe484:	9300      	str	r3, [sp, #0]
 23fe486:	462b      	mov	r3, r5
 23fe488:	f7fe fd98 	bl	23fcfbc <log_message>
                    sock_close(d_->sock);
 23fe48c:	6963      	ldr	r3, [r4, #20]
 23fe48e:	6818      	ldr	r0, [r3, #0]
 23fe490:	f7fe fc36 	bl	23fcd00 <sock_close>
                    d_->sock = -1;
 23fe494:	f04f 32ff 	mov.w	r2, #4294967295
 23fe498:	6963      	ldr	r3, [r4, #20]
 23fe49a:	601a      	str	r2, [r3, #0]
 23fe49c:	e7d4      	b.n	23fe448 <_ZN9TCPClient9availableEv+0x54>
 23fe49e:	bf00      	nop
 23fe4a0:	023ffd33 	.word	0x023ffd33
 23fe4a4:	023ffd2c 	.word	0x023ffd2c

023fe4a8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23fe4a8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23fe4aa:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23fe4ac:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23fe4ae:	6818      	ldr	r0, [r3, #0]
 23fe4b0:	2800      	cmp	r0, #0
 23fe4b2:	db01      	blt.n	23fe4b8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23fe4b4:	f7fe fc24 	bl	23fcd00 <sock_close>
    d_->sock = -1;
 23fe4b8:	f04f 32ff 	mov.w	r2, #4294967295
 23fe4bc:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23fe4be:	2100      	movs	r1, #0
 23fe4c0:	601a      	str	r2, [r3, #0]
 23fe4c2:	6960      	ldr	r0, [r4, #20]
 23fe4c4:	2211      	movs	r2, #17
 23fe4c6:	308c      	adds	r0, #140	; 0x8c
 23fe4c8:	f000 fbf9 	bl	23fecbe <memset>
    flush_buffer();
 23fe4cc:	4620      	mov	r0, r4
}
 23fe4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23fe4d2:	f7ff bf0f 	b.w	23fe2f4 <_ZN9TCPClient12flush_bufferEv>

023fe4d6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23fe4d6:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23fe4d8:	b510      	push	{r4, lr}
 23fe4da:	4604      	mov	r4, r0
          total(0) {
 23fe4dc:	6001      	str	r1, [r0, #0]
 23fe4de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23fe4e2:	3088      	adds	r0, #136	; 0x88
 23fe4e4:	f7ff fc00 	bl	23fdce8 <_ZN9IPAddressC1Ev>
}
 23fe4e8:	4620      	mov	r0, r4
 23fe4ea:	bd10      	pop	{r4, pc}

023fe4ec <_ZN9TCPClientC1Ei>:
 23fe4ec:	2300      	movs	r3, #0
 23fe4ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23fe4f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe4f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23fe4f8:	4a0e      	ldr	r2, [pc, #56]	; (23fe534 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23fe4fa:	6103      	str	r3, [r0, #16]
 23fe4fc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fe4fe:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23fe500:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fe502:	20ac      	movs	r0, #172	; 0xac
 23fe504:	9101      	str	r1, [sp, #4]
 23fe506:	f7fb f860 	bl	23f95ca <_Znwj>
	  auto __pi = ::new (__mem)
 23fe50a:	1e05      	subs	r5, r0, #0
 23fe50c:	f105 060c 	add.w	r6, r5, #12
 23fe510:	d008      	beq.n	23fe524 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe512:	2301      	movs	r3, #1
 23fe514:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fe518:	4b07      	ldr	r3, [pc, #28]	; (23fe538 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fe51a:	4630      	mov	r0, r6
 23fe51c:	9901      	ldr	r1, [sp, #4]
 23fe51e:	602b      	str	r3, [r5, #0]
 23fe520:	f7ff ffd9 	bl	23fe4d6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23fe524:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23fe526:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23fe52a:	f7ff fee3 	bl	23fe2f4 <_ZN9TCPClient12flush_bufferEv>
}
 23fe52e:	b002      	add	sp, #8
 23fe530:	bd70      	pop	{r4, r5, r6, pc}
 23fe532:	bf00      	nop
 23fe534:	023ffd68 	.word	0x023ffd68
 23fe538:	023ffd4c 	.word	0x023ffd4c

023fe53c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fe53c:	b510      	push	{r4, lr}
 23fe53e:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fe540:	f04f 31ff 	mov.w	r1, #4294967295
 23fe544:	f7ff ffd2 	bl	23fe4ec <_ZN9TCPClientC1Ei>
}
 23fe548:	4620      	mov	r0, r4
 23fe54a:	bd10      	pop	{r4, pc}

023fe54c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fe54c:	b510      	push	{r4, lr}
 23fe54e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fe550:	6800      	ldr	r0, [r0, #0]
 23fe552:	2800      	cmp	r0, #0
 23fe554:	db01      	blt.n	23fe55a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fe556:	f7fe fbd3 	bl	23fcd00 <sock_close>
    }
}
 23fe55a:	4620      	mov	r0, r4
 23fe55c:	bd10      	pop	{r4, pc}

023fe55e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fe55e:	300c      	adds	r0, #12
 23fe560:	f7ff bff4 	b.w	23fe54c <_ZN9TCPClient4DataD1Ev>

023fe564 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe564:	2200      	movs	r2, #0
 23fe566:	6840      	ldr	r0, [r0, #4]
 23fe568:	4611      	mov	r1, r2
 23fe56a:	f7fe bdc1 	b.w	23fd0f0 <network_ready>

023fe56e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe56e:	2200      	movs	r2, #0
 23fe570:	6840      	ldr	r0, [r0, #4]
 23fe572:	4611      	mov	r1, r2
 23fe574:	f7fe bdf4 	b.w	23fd160 <network_listening>

023fe578 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe578:	2200      	movs	r2, #0
 23fe57a:	6840      	ldr	r0, [r0, #4]
 23fe57c:	4611      	mov	r1, r2
 23fe57e:	f7fe be0b 	b.w	23fd198 <network_get_listen_timeout>

023fe582 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe582:	2200      	movs	r2, #0
 23fe584:	6840      	ldr	r0, [r0, #4]
 23fe586:	f7fe bdf9 	b.w	23fd17c <network_set_listen_timeout>

023fe58a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe58a:	2200      	movs	r2, #0
 23fe58c:	6840      	ldr	r0, [r0, #4]
 23fe58e:	f081 0101 	eor.w	r1, r1, #1
 23fe592:	f7fe bdd7 	b.w	23fd144 <network_listen>

023fe596 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe596:	2300      	movs	r3, #0
 23fe598:	6840      	ldr	r0, [r0, #4]
 23fe59a:	461a      	mov	r2, r3
 23fe59c:	4619      	mov	r1, r3
 23fe59e:	f7fe bdc3 	b.w	23fd128 <network_off>

023fe5a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe5a2:	2300      	movs	r3, #0
 23fe5a4:	6840      	ldr	r0, [r0, #4]
 23fe5a6:	461a      	mov	r2, r3
 23fe5a8:	4619      	mov	r1, r3
 23fe5aa:	f7fe bdaf 	b.w	23fd10c <network_on>

023fe5ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe5ae:	2200      	movs	r2, #0
 23fe5b0:	6840      	ldr	r0, [r0, #4]
 23fe5b2:	4611      	mov	r1, r2
 23fe5b4:	f7fe bd80 	b.w	23fd0b8 <network_connecting>

023fe5b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe5b8:	2200      	movs	r2, #0
 23fe5ba:	2102      	movs	r1, #2
 23fe5bc:	6840      	ldr	r0, [r0, #4]
 23fe5be:	f7fe bd89 	b.w	23fd0d4 <network_disconnect>

023fe5c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe5c2:	2300      	movs	r3, #0
 23fe5c4:	6840      	ldr	r0, [r0, #4]
 23fe5c6:	461a      	mov	r2, r3
 23fe5c8:	f7fe bd68 	b.w	23fd09c <network_connect>

023fe5cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fe5cc:	2204      	movs	r2, #4
 23fe5ce:	4b02      	ldr	r3, [pc, #8]	; (23fe5d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fe5d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fe5d2:	4a02      	ldr	r2, [pc, #8]	; (23fe5dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fe5d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fe5d6:	4770      	bx	lr
 23fe5d8:	1007aef0 	.word	0x1007aef0
 23fe5dc:	023ffdb8 	.word	0x023ffdb8

023fe5e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe5e0:	2300      	movs	r3, #0
 23fe5e2:	6840      	ldr	r0, [r0, #4]
 23fe5e4:	461a      	mov	r2, r3
 23fe5e6:	f7fe bd59 	b.w	23fd09c <network_connect>

023fe5ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe5ea:	2200      	movs	r2, #0
 23fe5ec:	2102      	movs	r1, #2
 23fe5ee:	6840      	ldr	r0, [r0, #4]
 23fe5f0:	f7fe bd70 	b.w	23fd0d4 <network_disconnect>

023fe5f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe5f4:	2200      	movs	r2, #0
 23fe5f6:	6840      	ldr	r0, [r0, #4]
 23fe5f8:	4611      	mov	r1, r2
 23fe5fa:	f7fe bd5d 	b.w	23fd0b8 <network_connecting>

023fe5fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe5fe:	2200      	movs	r2, #0
 23fe600:	6840      	ldr	r0, [r0, #4]
 23fe602:	4611      	mov	r1, r2
 23fe604:	f7fe bd74 	b.w	23fd0f0 <network_ready>

023fe608 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe608:	2300      	movs	r3, #0
 23fe60a:	6840      	ldr	r0, [r0, #4]
 23fe60c:	461a      	mov	r2, r3
 23fe60e:	4619      	mov	r1, r3
 23fe610:	f7fe bd7c 	b.w	23fd10c <network_on>

023fe614 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe614:	2300      	movs	r3, #0
 23fe616:	6840      	ldr	r0, [r0, #4]
 23fe618:	461a      	mov	r2, r3
 23fe61a:	4619      	mov	r1, r3
 23fe61c:	f7fe bd84 	b.w	23fd128 <network_off>

023fe620 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe620:	2100      	movs	r1, #0
 23fe622:	6840      	ldr	r0, [r0, #4]
 23fe624:	f7fe bdc6 	b.w	23fd1b4 <network_is_on>

023fe628 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe628:	2100      	movs	r1, #0
 23fe62a:	6840      	ldr	r0, [r0, #4]
 23fe62c:	f7fe bdd0 	b.w	23fd1d0 <network_is_off>

023fe630 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe630:	2200      	movs	r2, #0
 23fe632:	6840      	ldr	r0, [r0, #4]
 23fe634:	f081 0101 	eor.w	r1, r1, #1
 23fe638:	f7fe bd84 	b.w	23fd144 <network_listen>

023fe63c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe63c:	2200      	movs	r2, #0
 23fe63e:	6840      	ldr	r0, [r0, #4]
 23fe640:	f7fe bd9c 	b.w	23fd17c <network_set_listen_timeout>

023fe644 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe644:	2200      	movs	r2, #0
 23fe646:	6840      	ldr	r0, [r0, #4]
 23fe648:	4611      	mov	r1, r2
 23fe64a:	f7fe bda5 	b.w	23fd198 <network_get_listen_timeout>

023fe64e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe64e:	2200      	movs	r2, #0
 23fe650:	6840      	ldr	r0, [r0, #4]
 23fe652:	4611      	mov	r1, r2
 23fe654:	f7fe bd84 	b.w	23fd160 <network_listening>

023fe658 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fe658:	2100      	movs	r1, #0
 23fe65a:	6840      	ldr	r0, [r0, #4]
 23fe65c:	f7fe bdd4 	b.w	23fd208 <network_is_preferred>

023fe660 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe664:	b095      	sub	sp, #84	; 0x54
 23fe666:	4614      	mov	r4, r2
 23fe668:	460d      	mov	r5, r1
 23fe66a:	4607      	mov	r7, r0
    IPAddress addr;
 23fe66c:	f7ff fb3c 	bl	23fdce8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe670:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe672:	221c      	movs	r2, #28
 23fe674:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe676:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe678:	f000 fb21 	bl	23fecbe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe67c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe67e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe680:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe682:	2100      	movs	r1, #0
 23fe684:	466b      	mov	r3, sp
 23fe686:	aa0c      	add	r2, sp, #48	; 0x30
 23fe688:	f7fe f90a 	bl	23fc8a0 <netdb_getaddrinfo>
    if (!r) {
 23fe68c:	4604      	mov	r4, r0
 23fe68e:	2800      	cmp	r0, #0
 23fe690:	d14b      	bne.n	23fe72a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe692:	4602      	mov	r2, r0
 23fe694:	2101      	movs	r1, #1
 23fe696:	6868      	ldr	r0, [r5, #4]
 23fe698:	f7fe fd2a 	bl	23fd0f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe69c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe69e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe6a0:	4622      	mov	r2, r4
 23fe6a2:	6868      	ldr	r0, [r5, #4]
 23fe6a4:	f7fe fd24 	bl	23fd0f0 <network_ready>
        bool ok = false;
 23fe6a8:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe6aa:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe6ac:	9e00      	ldr	r6, [sp, #0]
 23fe6ae:	2e00      	cmp	r6, #0
 23fe6b0:	d03b      	beq.n	23fe72a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe6b2:	2900      	cmp	r1, #0
 23fe6b4:	d139      	bne.n	23fe72a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe6b6:	6873      	ldr	r3, [r6, #4]
 23fe6b8:	2b02      	cmp	r3, #2
 23fe6ba:	d003      	beq.n	23fe6c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe6bc:	2b0a      	cmp	r3, #10
 23fe6be:	d011      	beq.n	23fe6e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe6c0:	69f6      	ldr	r6, [r6, #28]
 23fe6c2:	e7f4      	b.n	23fe6ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe6c4:	f1b8 0f00 	cmp.w	r8, #0
 23fe6c8:	d0fa      	beq.n	23fe6c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe6ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe6cc:	a806      	add	r0, sp, #24
 23fe6ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe6d0:	1d3c      	adds	r4, r7, #4
 23fe6d2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe6d4:	f7ff fb4c 	bl	23fdd70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe6d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe6dc:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe6de:	4641      	mov	r1, r8
 23fe6e0:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe6e2:	e7ed      	b.n	23fe6c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe6e4:	f1b9 0f00 	cmp.w	r9, #0
 23fe6e8:	d0ea      	beq.n	23fe6c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe6ea:	2210      	movs	r2, #16
 23fe6ec:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe6ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe6f0:	f000 fae5 	bl	23fecbe <memset>
                    a.v = 6;
 23fe6f4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe6f6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe6f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe6fc:	f104 0308 	add.w	r3, r4, #8
 23fe700:	3418      	adds	r4, #24
 23fe702:	462a      	mov	r2, r5
 23fe704:	6818      	ldr	r0, [r3, #0]
 23fe706:	6859      	ldr	r1, [r3, #4]
 23fe708:	3308      	adds	r3, #8
 23fe70a:	c203      	stmia	r2!, {r0, r1}
 23fe70c:	42a3      	cmp	r3, r4
 23fe70e:	4615      	mov	r5, r2
 23fe710:	d1f7      	bne.n	23fe702 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe712:	a901      	add	r1, sp, #4
 23fe714:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe716:	1d3c      	adds	r4, r7, #4
 23fe718:	ad07      	add	r5, sp, #28
 23fe71a:	f7ff faf3 	bl	23fdd04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe71e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe722:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe724:	4649      	mov	r1, r9
 23fe726:	7023      	strb	r3, [r4, #0]
                    break;
 23fe728:	e7ca      	b.n	23fe6c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe72a:	9800      	ldr	r0, [sp, #0]
 23fe72c:	f7fe f8aa 	bl	23fc884 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe730:	4638      	mov	r0, r7
 23fe732:	b015      	add	sp, #84	; 0x54
 23fe734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe738 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fe738:	3803      	subs	r0, #3
 23fe73a:	2802      	cmp	r0, #2
 23fe73c:	bf9a      	itte	ls
 23fe73e:	4b02      	ldrls	r3, [pc, #8]	; (23fe748 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fe740:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fe744:	4801      	ldrhi	r0, [pc, #4]	; (23fe74c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fe746:	4770      	bx	lr
 23fe748:	023ffdf4 	.word	0x023ffdf4
 23fe74c:	1007aef8 	.word	0x1007aef8

023fe750 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23fe750:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23fe752:	2200      	movs	r2, #0
 23fe754:	6840      	ldr	r0, [r0, #4]
 23fe756:	f7fe fd49 	bl	23fd1ec <network_prefer>
}
 23fe75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fe75e:	f7ff bfeb 	b.w	23fe738 <_ZN5spark12NetworkClass4fromEm>
	...

023fe764 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe764:	4b02      	ldr	r3, [pc, #8]	; (23fe770 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe766:	4a03      	ldr	r2, [pc, #12]	; (23fe774 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe768:	601a      	str	r2, [r3, #0]
 23fe76a:	2200      	movs	r2, #0
 23fe76c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe76e:	4770      	bx	lr
 23fe770:	1007aef8 	.word	0x1007aef8
 23fe774:	023ffe08 	.word	0x023ffe08

023fe778 <getPinMode>:
 * AN_OUTPUT = 7
 * PIN_MODE_NONE = 255
 */
PinMode getPinMode(uint16_t pin)
{
  return hal_gpio_get_mode(pin);
 23fe778:	f7fe b8ae 	b.w	23fc8d8 <hal_gpio_get_mode>

023fe77c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe77c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe77e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe780:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe782:	d902      	bls.n	23fe78a <pinAvailable+0xe>
    return false;
 23fe784:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe786:	b003      	add	sp, #12
 23fe788:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe78a:	f1a0 030f 	sub.w	r3, r0, #15
 23fe78e:	2b02      	cmp	r3, #2
 23fe790:	d90b      	bls.n	23fe7aa <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe792:	2801      	cmp	r0, #1
 23fe794:	d821      	bhi.n	23fe7da <pinAvailable+0x5e>
 23fe796:	f000 f947 	bl	23fea28 <_Z19__fetch_global_Wirev>
 23fe79a:	2100      	movs	r1, #0
 23fe79c:	7c00      	ldrb	r0, [r0, #16]
 23fe79e:	f7fe fa85 	bl	23fccac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe7a2:	f080 0001 	eor.w	r0, r0, #1
 23fe7a6:	b2c0      	uxtb	r0, r0
 23fe7a8:	e7ed      	b.n	23fe786 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe7aa:	4d11      	ldr	r5, [pc, #68]	; (23fe7f0 <pinAvailable+0x74>)
 23fe7ac:	e8d5 1f8f 	ldab	r1, [r5]
 23fe7b0:	f011 0101 	ands.w	r1, r1, #1
 23fe7b4:	d10b      	bne.n	23fe7ce <pinAvailable+0x52>
 23fe7b6:	4628      	mov	r0, r5
 23fe7b8:	9101      	str	r1, [sp, #4]
 23fe7ba:	f7fa ff19 	bl	23f95f0 <__cxa_guard_acquire>
 23fe7be:	9901      	ldr	r1, [sp, #4]
 23fe7c0:	b128      	cbz	r0, 23fe7ce <pinAvailable+0x52>
 23fe7c2:	480c      	ldr	r0, [pc, #48]	; (23fe7f4 <pinAvailable+0x78>)
 23fe7c4:	f7fe fe36 	bl	23fd434 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe7c8:	4628      	mov	r0, r5
 23fe7ca:	f7fa ff16 	bl	23f95fa <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe7ce:	4b09      	ldr	r3, [pc, #36]	; (23fe7f4 <pinAvailable+0x78>)
 23fe7d0:	7818      	ldrb	r0, [r3, #0]
 23fe7d2:	f7fe fb13 	bl	23fcdfc <hal_spi_is_enabled>
 23fe7d6:	2800      	cmp	r0, #0
 23fe7d8:	d1d4      	bne.n	23fe784 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe7da:	3c08      	subs	r4, #8
 23fe7dc:	2c01      	cmp	r4, #1
 23fe7de:	d805      	bhi.n	23fe7ec <pinAvailable+0x70>
 23fe7e0:	f000 f876 	bl	23fe8d0 <_Z22__fetch_global_Serial1v>
 23fe7e4:	7c00      	ldrb	r0, [r0, #16]
 23fe7e6:	f7fe f9f1 	bl	23fcbcc <hal_usart_is_enabled>
 23fe7ea:	e7da      	b.n	23fe7a2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe7ec:	2001      	movs	r0, #1
 23fe7ee:	e7ca      	b.n	23fe786 <pinAvailable+0xa>
 23fe7f0:	1007ae40 	.word	0x1007ae40
 23fe7f4:	1007ae44 	.word	0x1007ae44

023fe7f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe7f8:	281b      	cmp	r0, #27
{
 23fe7fa:	b538      	push	{r3, r4, r5, lr}
 23fe7fc:	4604      	mov	r4, r0
 23fe7fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe800:	d80a      	bhi.n	23fe818 <pinMode+0x20>
 23fe802:	29ff      	cmp	r1, #255	; 0xff
 23fe804:	d008      	beq.n	23fe818 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe806:	f7ff ffb9 	bl	23fe77c <pinAvailable>
 23fe80a:	b128      	cbz	r0, 23fe818 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe80c:	4629      	mov	r1, r5
 23fe80e:	4620      	mov	r0, r4
}
 23fe810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe814:	f7fe b852 	b.w	23fc8bc <hal_gpio_mode>
}
 23fe818:	bd38      	pop	{r3, r4, r5, pc}

023fe81a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe81a:	b538      	push	{r3, r4, r5, lr}
 23fe81c:	4604      	mov	r4, r0
 23fe81e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe820:	f7fe f85a 	bl	23fc8d8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe824:	28ff      	cmp	r0, #255	; 0xff
 23fe826:	d010      	beq.n	23fe84a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe828:	2806      	cmp	r0, #6
 23fe82a:	d804      	bhi.n	23fe836 <digitalWrite+0x1c>
 23fe82c:	234d      	movs	r3, #77	; 0x4d
 23fe82e:	fa23 f000 	lsr.w	r0, r3, r0
 23fe832:	07c3      	lsls	r3, r0, #31
 23fe834:	d409      	bmi.n	23fe84a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe836:	4620      	mov	r0, r4
 23fe838:	f7ff ffa0 	bl	23fe77c <pinAvailable>
 23fe83c:	b128      	cbz	r0, 23fe84a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe83e:	4629      	mov	r1, r5
 23fe840:	4620      	mov	r0, r4
}
 23fe842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe846:	f7fe b855 	b.w	23fc8f4 <hal_gpio_write>
}
 23fe84a:	bd38      	pop	{r3, r4, r5, pc}

023fe84c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fe84c:	b510      	push	{r4, lr}
 23fe84e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fe850:	f7fe f842 	bl	23fc8d8 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fe854:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fe856:	b2db      	uxtb	r3, r3
 23fe858:	2b01      	cmp	r3, #1
 23fe85a:	d908      	bls.n	23fe86e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fe85c:	4620      	mov	r0, r4
 23fe85e:	f7ff ff8d 	bl	23fe77c <pinAvailable>
 23fe862:	b120      	cbz	r0, 23fe86e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fe864:	4620      	mov	r0, r4
}
 23fe866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fe86a:	f7fe b851 	b.w	23fc910 <hal_gpio_read>
}
 23fe86e:	2000      	movs	r0, #0
 23fe870:	bd10      	pop	{r4, pc}

023fe872 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe872:	4770      	bx	lr

023fe874 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe874:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe876:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe878:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe87a:	462a      	mov	r2, r5
 23fe87c:	2100      	movs	r1, #0
 23fe87e:	f000 fa1e 	bl	23fecbe <memset>
 23fe882:	8025      	strh	r5, [r4, #0]
 23fe884:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe886:	4907      	ldr	r1, [pc, #28]	; (23fe8a4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe888:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe88a:	8125      	strh	r5, [r4, #8]
 23fe88c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe88e:	f000 f8ef 	bl	23fea70 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe892:	4904      	ldr	r1, [pc, #16]	; (23fe8a4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe894:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe896:	4628      	mov	r0, r5
 23fe898:	f000 f8ea 	bl	23fea70 <_ZnajRKSt9nothrow_t>
    };
 23fe89c:	60e0      	str	r0, [r4, #12]
}
 23fe89e:	4620      	mov	r0, r4
 23fe8a0:	bd38      	pop	{r3, r4, r5, pc}
 23fe8a2:	bf00      	nop
 23fe8a4:	023ffe44 	.word	0x023ffe44

023fe8a8 <__tcf_2>:
 23fe8a8:	4770      	bx	lr

023fe8aa <__tcf_1>:
 23fe8aa:	4770      	bx	lr

023fe8ac <_Z20acquireSerial1Bufferv>:
{
 23fe8ac:	b510      	push	{r4, lr}
 23fe8ae:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe8b0:	f7ff ffe0 	bl	23fe874 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe8b4:	4620      	mov	r0, r4
 23fe8b6:	bd10      	pop	{r4, pc}

023fe8b8 <_Z20acquireSerial2Bufferv>:
 23fe8b8:	b510      	push	{r4, lr}
 23fe8ba:	4604      	mov	r4, r0
 23fe8bc:	f7ff ffda 	bl	23fe874 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe8c0:	4620      	mov	r0, r4
 23fe8c2:	bd10      	pop	{r4, pc}

023fe8c4 <_Z20acquireSerial3Bufferv>:
 23fe8c4:	b510      	push	{r4, lr}
 23fe8c6:	4604      	mov	r4, r0
 23fe8c8:	f7ff ffd4 	bl	23fe874 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe8cc:	4620      	mov	r0, r4
 23fe8ce:	bd10      	pop	{r4, pc}

023fe8d0 <_Z22__fetch_global_Serial1v>:
{
 23fe8d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe8d2:	4d0e      	ldr	r5, [pc, #56]	; (23fe90c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe8d4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe8d6:	e8d5 1f8f 	ldab	r1, [r5]
 23fe8da:	f011 0401 	ands.w	r4, r1, #1
 23fe8de:	d111      	bne.n	23fe904 <_Z22__fetch_global_Serial1v+0x34>
 23fe8e0:	4628      	mov	r0, r5
 23fe8e2:	f7fa fe85 	bl	23f95f0 <__cxa_guard_acquire>
 23fe8e6:	b168      	cbz	r0, 23fe904 <_Z22__fetch_global_Serial1v+0x34>
 23fe8e8:	a801      	add	r0, sp, #4
 23fe8ea:	f7ff ffdf 	bl	23fe8ac <_Z20acquireSerial1Bufferv>
 23fe8ee:	4621      	mov	r1, r4
 23fe8f0:	aa01      	add	r2, sp, #4
 23fe8f2:	4807      	ldr	r0, [pc, #28]	; (23fe910 <_Z22__fetch_global_Serial1v+0x40>)
 23fe8f4:	f7ff fb0c 	bl	23fdf10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe8f8:	4628      	mov	r0, r5
 23fe8fa:	f7fa fe7e 	bl	23f95fa <__cxa_guard_release>
 23fe8fe:	4805      	ldr	r0, [pc, #20]	; (23fe914 <_Z22__fetch_global_Serial1v+0x44>)
 23fe900:	f000 f9ca 	bl	23fec98 <atexit>
    return serial1;
}
 23fe904:	4802      	ldr	r0, [pc, #8]	; (23fe910 <_Z22__fetch_global_Serial1v+0x40>)
 23fe906:	b007      	add	sp, #28
 23fe908:	bd30      	pop	{r4, r5, pc}
 23fe90a:	bf00      	nop
 23fe90c:	1007af00 	.word	0x1007af00
 23fe910:	1007af0c 	.word	0x1007af0c
 23fe914:	023fe873 	.word	0x023fe873

023fe918 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe918:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe91a:	4c0d      	ldr	r4, [pc, #52]	; (23fe950 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe91c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe91e:	e8d4 3f8f 	ldab	r3, [r4]
 23fe922:	07db      	lsls	r3, r3, #31
 23fe924:	d411      	bmi.n	23fe94a <_Z22__fetch_global_Serial2v+0x32>
 23fe926:	4620      	mov	r0, r4
 23fe928:	f7fa fe62 	bl	23f95f0 <__cxa_guard_acquire>
 23fe92c:	b168      	cbz	r0, 23fe94a <_Z22__fetch_global_Serial2v+0x32>
 23fe92e:	a801      	add	r0, sp, #4
 23fe930:	f7ff ffc2 	bl	23fe8b8 <_Z20acquireSerial2Bufferv>
 23fe934:	2101      	movs	r1, #1
 23fe936:	aa01      	add	r2, sp, #4
 23fe938:	4806      	ldr	r0, [pc, #24]	; (23fe954 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe93a:	f7ff fae9 	bl	23fdf10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe93e:	4620      	mov	r0, r4
 23fe940:	f7fa fe5b 	bl	23f95fa <__cxa_guard_release>
 23fe944:	4804      	ldr	r0, [pc, #16]	; (23fe958 <_Z22__fetch_global_Serial2v+0x40>)
 23fe946:	f000 f9a7 	bl	23fec98 <atexit>
	return serial2;
}
 23fe94a:	4802      	ldr	r0, [pc, #8]	; (23fe954 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe94c:	b006      	add	sp, #24
 23fe94e:	bd10      	pop	{r4, pc}
 23fe950:	1007af04 	.word	0x1007af04
 23fe954:	1007af20 	.word	0x1007af20
 23fe958:	023fe8ab 	.word	0x023fe8ab

023fe95c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe95c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe95e:	f7ff ffdb 	bl	23fe918 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe962:	4b07      	ldr	r3, [pc, #28]	; (23fe980 <_Z15serialEventRun2v+0x24>)
 23fe964:	4604      	mov	r4, r0
 23fe966:	b153      	cbz	r3, 23fe97e <_Z15serialEventRun2v+0x22>
 23fe968:	f7ff fae6 	bl	23fdf38 <_ZN11USARTSerial9isEnabledEv>
 23fe96c:	b138      	cbz	r0, 23fe97e <_Z15serialEventRun2v+0x22>
 23fe96e:	6823      	ldr	r3, [r4, #0]
 23fe970:	4620      	mov	r0, r4
 23fe972:	691b      	ldr	r3, [r3, #16]
 23fe974:	4798      	blx	r3
 23fe976:	2800      	cmp	r0, #0
 23fe978:	dd01      	ble.n	23fe97e <_Z15serialEventRun2v+0x22>
        handler();
 23fe97a:	e000      	b.n	23fe97e <_Z15serialEventRun2v+0x22>
 23fe97c:	bf00      	nop
}
 23fe97e:	bd10      	pop	{r4, pc}
 23fe980:	00000000 	.word	0x00000000

023fe984 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe984:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe986:	4c0d      	ldr	r4, [pc, #52]	; (23fe9bc <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe988:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe98a:	e8d4 3f8f 	ldab	r3, [r4]
 23fe98e:	07db      	lsls	r3, r3, #31
 23fe990:	d411      	bmi.n	23fe9b6 <_Z22__fetch_global_Serial3v+0x32>
 23fe992:	4620      	mov	r0, r4
 23fe994:	f7fa fe2c 	bl	23f95f0 <__cxa_guard_acquire>
 23fe998:	b168      	cbz	r0, 23fe9b6 <_Z22__fetch_global_Serial3v+0x32>
 23fe99a:	a801      	add	r0, sp, #4
 23fe99c:	f7ff ff92 	bl	23fe8c4 <_Z20acquireSerial3Bufferv>
 23fe9a0:	2102      	movs	r1, #2
 23fe9a2:	aa01      	add	r2, sp, #4
 23fe9a4:	4806      	ldr	r0, [pc, #24]	; (23fe9c0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe9a6:	f7ff fab3 	bl	23fdf10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe9aa:	4620      	mov	r0, r4
 23fe9ac:	f7fa fe25 	bl	23f95fa <__cxa_guard_release>
 23fe9b0:	4804      	ldr	r0, [pc, #16]	; (23fe9c4 <_Z22__fetch_global_Serial3v+0x40>)
 23fe9b2:	f000 f971 	bl	23fec98 <atexit>
	return serial3;
}
 23fe9b6:	4802      	ldr	r0, [pc, #8]	; (23fe9c0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe9b8:	b006      	add	sp, #24
 23fe9ba:	bd10      	pop	{r4, pc}
 23fe9bc:	1007af08 	.word	0x1007af08
 23fe9c0:	1007af34 	.word	0x1007af34
 23fe9c4:	023fe8a9 	.word	0x023fe8a9

023fe9c8 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe9c8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe9ca:	f7ff ffdb 	bl	23fe984 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe9ce:	4b07      	ldr	r3, [pc, #28]	; (23fe9ec <_Z15serialEventRun3v+0x24>)
 23fe9d0:	4604      	mov	r4, r0
 23fe9d2:	b153      	cbz	r3, 23fe9ea <_Z15serialEventRun3v+0x22>
 23fe9d4:	f7ff fab0 	bl	23fdf38 <_ZN11USARTSerial9isEnabledEv>
 23fe9d8:	b138      	cbz	r0, 23fe9ea <_Z15serialEventRun3v+0x22>
 23fe9da:	6823      	ldr	r3, [r4, #0]
 23fe9dc:	4620      	mov	r0, r4
 23fe9de:	691b      	ldr	r3, [r3, #16]
 23fe9e0:	4798      	blx	r3
 23fe9e2:	2800      	cmp	r0, #0
 23fe9e4:	dd01      	ble.n	23fe9ea <_Z15serialEventRun3v+0x22>
        handler();
 23fe9e6:	e000      	b.n	23fe9ea <_Z15serialEventRun3v+0x22>
 23fe9e8:	bf00      	nop
}
 23fe9ea:	bd10      	pop	{r4, pc}
 23fe9ec:	00000000 	.word	0x00000000

023fe9f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe9f0:	4770      	bx	lr
	...

023fe9f4 <_Z17acquireWireBufferv>:
{
 23fe9f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe9f6:	4b0a      	ldr	r3, [pc, #40]	; (23fea20 <_Z17acquireWireBufferv+0x2c>)
{
 23fe9f8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe9fa:	6003      	str	r3, [r0, #0]
 23fe9fc:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe9fe:	4909      	ldr	r1, [pc, #36]	; (23fea24 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fea00:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fea02:	2020      	movs	r0, #32
 23fea04:	f000 f834 	bl	23fea70 <_ZnajRKSt9nothrow_t>
	};
 23fea08:	2520      	movs	r5, #32
 23fea0a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fea0c:	4905      	ldr	r1, [pc, #20]	; (23fea24 <_Z17acquireWireBufferv+0x30>)
 23fea0e:	4628      	mov	r0, r5
	};
 23fea10:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fea12:	f000 f82d 	bl	23fea70 <_ZnajRKSt9nothrow_t>
	};
 23fea16:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fea1a:	4620      	mov	r0, r4
 23fea1c:	bd38      	pop	{r3, r4, r5, pc}
 23fea1e:	bf00      	nop
 23fea20:	00010018 	.word	0x00010018
 23fea24:	023ffe44 	.word	0x023ffe44

023fea28 <_Z19__fetch_global_Wirev>:
{
 23fea28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fea2a:	4d0e      	ldr	r5, [pc, #56]	; (23fea64 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fea2c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fea2e:	e8d5 1f8f 	ldab	r1, [r5]
 23fea32:	f011 0401 	ands.w	r4, r1, #1
 23fea36:	d111      	bne.n	23fea5c <_Z19__fetch_global_Wirev+0x34>
 23fea38:	4628      	mov	r0, r5
 23fea3a:	f7fa fdd9 	bl	23f95f0 <__cxa_guard_acquire>
 23fea3e:	b168      	cbz	r0, 23fea5c <_Z19__fetch_global_Wirev+0x34>
 23fea40:	4668      	mov	r0, sp
 23fea42:	f7ff ffd7 	bl	23fe9f4 <_Z17acquireWireBufferv>
 23fea46:	466a      	mov	r2, sp
 23fea48:	4621      	mov	r1, r4
 23fea4a:	4807      	ldr	r0, [pc, #28]	; (23fea68 <_Z19__fetch_global_Wirev+0x40>)
 23fea4c:	f7ff faa4 	bl	23fdf98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fea50:	4628      	mov	r0, r5
 23fea52:	f7fa fdd2 	bl	23f95fa <__cxa_guard_release>
 23fea56:	4805      	ldr	r0, [pc, #20]	; (23fea6c <_Z19__fetch_global_Wirev+0x44>)
 23fea58:	f000 f91e 	bl	23fec98 <atexit>
	return wire;
}
 23fea5c:	4802      	ldr	r0, [pc, #8]	; (23fea68 <_Z19__fetch_global_Wirev+0x40>)
 23fea5e:	b007      	add	sp, #28
 23fea60:	bd30      	pop	{r4, r5, pc}
 23fea62:	bf00      	nop
 23fea64:	1007af4c 	.word	0x1007af4c
 23fea68:	1007af50 	.word	0x1007af50
 23fea6c:	023fe9f1 	.word	0x023fe9f1

023fea70 <_ZnajRKSt9nothrow_t>:
 23fea70:	f7fa bdad 	b.w	23f95ce <_Znaj>

023fea74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fea74:	4901      	ldr	r1, [pc, #4]	; (23fea7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fea76:	f000 b8f9 	b.w	23fec6c <_ZNKSt9type_infoeqERKS_>
 23fea7a:	bf00      	nop
 23fea7c:	023ffe60 	.word	0x023ffe60

023fea80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fea80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fea82:	2400      	movs	r4, #0
 23fea84:	2310      	movs	r3, #16
 23fea86:	4615      	mov	r5, r2
 23fea88:	6812      	ldr	r2, [r2, #0]
 23fea8a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fea8e:	6803      	ldr	r3, [r0, #0]
 23fea90:	e9cd 4400 	strd	r4, r4, [sp]
 23fea94:	699e      	ldr	r6, [r3, #24]
 23fea96:	466b      	mov	r3, sp
 23fea98:	47b0      	blx	r6
 23fea9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fea9e:	f003 0306 	and.w	r3, r3, #6
 23feaa2:	2b06      	cmp	r3, #6
 23feaa4:	bf05      	ittet	eq
 23feaa6:	9b00      	ldreq	r3, [sp, #0]
 23feaa8:	2001      	moveq	r0, #1
 23feaaa:	4620      	movne	r0, r4
 23feaac:	602b      	streq	r3, [r5, #0]
 23feaae:	b004      	add	sp, #16
 23feab0:	bd70      	pop	{r4, r5, r6, pc}

023feab2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23feab2:	9800      	ldr	r0, [sp, #0]
 23feab4:	4290      	cmp	r0, r2
 23feab6:	bf14      	ite	ne
 23feab8:	2001      	movne	r0, #1
 23feaba:	2006      	moveq	r0, #6
 23feabc:	4770      	bx	lr
	...

023feac0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23feac0:	4b03      	ldr	r3, [pc, #12]	; (23fead0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23feac2:	b510      	push	{r4, lr}
 23feac4:	4604      	mov	r4, r0
 23feac6:	6003      	str	r3, [r0, #0]
 23feac8:	f000 f8cd 	bl	23fec66 <_ZNSt9type_infoD1Ev>
 23feacc:	4620      	mov	r0, r4
 23feace:	bd10      	pop	{r4, pc}
 23fead0:	023ffea0 	.word	0x023ffea0

023fead4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fead4:	b510      	push	{r4, lr}
 23fead6:	4604      	mov	r4, r0
 23fead8:	f7ff fff2 	bl	23feac0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23feadc:	2108      	movs	r1, #8
 23feade:	4620      	mov	r0, r4
 23feae0:	f7fa fd77 	bl	23f95d2 <_ZdlPvj>
 23feae4:	4620      	mov	r0, r4
 23feae6:	bd10      	pop	{r4, pc}

023feae8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23feae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feaec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23feaf0:	461f      	mov	r7, r3
 23feaf2:	4606      	mov	r6, r0
 23feaf4:	4615      	mov	r5, r2
 23feaf6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23feafa:	4598      	cmp	r8, r3
 23feafc:	d107      	bne.n	23feb0e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23feafe:	9907      	ldr	r1, [sp, #28]
 23feb00:	f000 f8b4 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23feb04:	b118      	cbz	r0, 23feb0e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23feb06:	7165      	strb	r5, [r4, #5]
 23feb08:	2000      	movs	r0, #0
 23feb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23feb0e:	4639      	mov	r1, r7
 23feb10:	4630      	mov	r0, r6
 23feb12:	f000 f8ab 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23feb16:	2800      	cmp	r0, #0
 23feb18:	d0f6      	beq.n	23feb08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23feb1a:	2301      	movs	r3, #1
 23feb1c:	f8c4 8000 	str.w	r8, [r4]
 23feb20:	7125      	strb	r5, [r4, #4]
 23feb22:	71a3      	strb	r3, [r4, #6]
 23feb24:	e7f0      	b.n	23feb08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023feb26 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23feb26:	b538      	push	{r3, r4, r5, lr}
 23feb28:	4615      	mov	r5, r2
 23feb2a:	461c      	mov	r4, r3
 23feb2c:	f000 f89e 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23feb30:	b120      	cbz	r0, 23feb3c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23feb32:	2308      	movs	r3, #8
 23feb34:	6025      	str	r5, [r4, #0]
 23feb36:	60e3      	str	r3, [r4, #12]
 23feb38:	2306      	movs	r3, #6
 23feb3a:	7123      	strb	r3, [r4, #4]
 23feb3c:	bd38      	pop	{r3, r4, r5, pc}

023feb3e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23feb3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23feb40:	4605      	mov	r5, r0
 23feb42:	460c      	mov	r4, r1
 23feb44:	461e      	mov	r6, r3
 23feb46:	9201      	str	r2, [sp, #4]
 23feb48:	f000 f890 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23feb4c:	b950      	cbnz	r0, 23feb64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23feb4e:	2e03      	cmp	r6, #3
 23feb50:	d808      	bhi.n	23feb64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23feb52:	6823      	ldr	r3, [r4, #0]
 23feb54:	4629      	mov	r1, r5
 23feb56:	9a01      	ldr	r2, [sp, #4]
 23feb58:	4620      	mov	r0, r4
 23feb5a:	695b      	ldr	r3, [r3, #20]
 23feb5c:	b002      	add	sp, #8
 23feb5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23feb62:	4718      	bx	r3
 23feb64:	b002      	add	sp, #8
 23feb66:	bd70      	pop	{r4, r5, r6, pc}

023feb68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23feb68:	4b03      	ldr	r3, [pc, #12]	; (23feb78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23feb6a:	b510      	push	{r4, lr}
 23feb6c:	4604      	mov	r4, r0
 23feb6e:	6003      	str	r3, [r0, #0]
 23feb70:	f7ff ffa6 	bl	23feac0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23feb74:	4620      	mov	r0, r4
 23feb76:	bd10      	pop	{r4, pc}
 23feb78:	023fff00 	.word	0x023fff00

023feb7c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23feb7c:	b510      	push	{r4, lr}
 23feb7e:	4604      	mov	r4, r0
 23feb80:	f7ff fff2 	bl	23feb68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23feb84:	210c      	movs	r1, #12
 23feb86:	4620      	mov	r0, r4
 23feb88:	f7fa fd23 	bl	23f95d2 <_ZdlPvj>
 23feb8c:	4620      	mov	r0, r4
 23feb8e:	bd10      	pop	{r4, pc}

023feb90 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23feb90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23feb92:	9f08      	ldr	r7, [sp, #32]
 23feb94:	4605      	mov	r5, r0
 23feb96:	460e      	mov	r6, r1
 23feb98:	4614      	mov	r4, r2
 23feb9a:	4297      	cmp	r7, r2
 23feb9c:	d00a      	beq.n	23febb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23feb9e:	68a8      	ldr	r0, [r5, #8]
 23feba0:	4631      	mov	r1, r6
 23feba2:	6802      	ldr	r2, [r0, #0]
 23feba4:	9708      	str	r7, [sp, #32]
 23feba6:	6a15      	ldr	r5, [r2, #32]
 23feba8:	4622      	mov	r2, r4
 23febaa:	46ac      	mov	ip, r5
 23febac:	b003      	add	sp, #12
 23febae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23febb2:	4760      	bx	ip
 23febb4:	4619      	mov	r1, r3
 23febb6:	9301      	str	r3, [sp, #4]
 23febb8:	f000 f858 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23febbc:	9b01      	ldr	r3, [sp, #4]
 23febbe:	2800      	cmp	r0, #0
 23febc0:	d0ed      	beq.n	23feb9e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23febc2:	2006      	movs	r0, #6
 23febc4:	b003      	add	sp, #12
 23febc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023febc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23febc8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23febcc:	460d      	mov	r5, r1
 23febce:	4619      	mov	r1, r3
 23febd0:	4681      	mov	r9, r0
 23febd2:	4617      	mov	r7, r2
 23febd4:	4698      	mov	r8, r3
 23febd6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23febda:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23febde:	f000 f845 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23febe2:	b190      	cbz	r0, 23fec0a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23febe4:	2d00      	cmp	r5, #0
 23febe6:	6034      	str	r4, [r6, #0]
 23febe8:	7137      	strb	r7, [r6, #4]
 23febea:	db09      	blt.n	23fec00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23febec:	1961      	adds	r1, r4, r5
 23febee:	458a      	cmp	sl, r1
 23febf0:	bf0c      	ite	eq
 23febf2:	2106      	moveq	r1, #6
 23febf4:	2101      	movne	r1, #1
 23febf6:	71b1      	strb	r1, [r6, #6]
 23febf8:	2000      	movs	r0, #0
 23febfa:	b001      	add	sp, #4
 23febfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fec00:	3502      	adds	r5, #2
 23fec02:	d1f9      	bne.n	23febf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fec04:	2301      	movs	r3, #1
 23fec06:	71b3      	strb	r3, [r6, #6]
 23fec08:	e7f6      	b.n	23febf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fec0a:	4554      	cmp	r4, sl
 23fec0c:	d106      	bne.n	23fec1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fec0e:	4659      	mov	r1, fp
 23fec10:	4648      	mov	r0, r9
 23fec12:	f000 f82b 	bl	23fec6c <_ZNKSt9type_infoeqERKS_>
 23fec16:	b108      	cbz	r0, 23fec1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fec18:	7177      	strb	r7, [r6, #5]
 23fec1a:	e7ed      	b.n	23febf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fec1c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fec20:	463a      	mov	r2, r7
 23fec22:	4629      	mov	r1, r5
 23fec24:	6803      	ldr	r3, [r0, #0]
 23fec26:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fec2a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fec2e:	69dc      	ldr	r4, [r3, #28]
 23fec30:	4643      	mov	r3, r8
 23fec32:	46a4      	mov	ip, r4
 23fec34:	b001      	add	sp, #4
 23fec36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fec3a:	4760      	bx	ip

023fec3c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fec40:	4607      	mov	r7, r0
 23fec42:	460c      	mov	r4, r1
 23fec44:	4615      	mov	r5, r2
 23fec46:	461e      	mov	r6, r3
 23fec48:	f7ff ff6d 	bl	23feb26 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fec4c:	b948      	cbnz	r0, 23fec62 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fec4e:	68b8      	ldr	r0, [r7, #8]
 23fec50:	462a      	mov	r2, r5
 23fec52:	4621      	mov	r1, r4
 23fec54:	6803      	ldr	r3, [r0, #0]
 23fec56:	699f      	ldr	r7, [r3, #24]
 23fec58:	4633      	mov	r3, r6
 23fec5a:	46bc      	mov	ip, r7
 23fec5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fec60:	4760      	bx	ip
 23fec62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fec66 <_ZNSt9type_infoD1Ev>:
 23fec66:	4770      	bx	lr

023fec68 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fec68:	2000      	movs	r0, #0
 23fec6a:	4770      	bx	lr

023fec6c <_ZNKSt9type_infoeqERKS_>:
 23fec6c:	4281      	cmp	r1, r0
 23fec6e:	b508      	push	{r3, lr}
 23fec70:	d00e      	beq.n	23fec90 <_ZNKSt9type_infoeqERKS_+0x24>
 23fec72:	6840      	ldr	r0, [r0, #4]
 23fec74:	7803      	ldrb	r3, [r0, #0]
 23fec76:	2b2a      	cmp	r3, #42	; 0x2a
 23fec78:	d00c      	beq.n	23fec94 <_ZNKSt9type_infoeqERKS_+0x28>
 23fec7a:	6849      	ldr	r1, [r1, #4]
 23fec7c:	780b      	ldrb	r3, [r1, #0]
 23fec7e:	2b2a      	cmp	r3, #42	; 0x2a
 23fec80:	bf08      	it	eq
 23fec82:	3101      	addeq	r1, #1
 23fec84:	f7fa fc72 	bl	23f956c <strcmp>
 23fec88:	fab0 f080 	clz	r0, r0
 23fec8c:	0940      	lsrs	r0, r0, #5
 23fec8e:	bd08      	pop	{r3, pc}
 23fec90:	2001      	movs	r0, #1
 23fec92:	e7fc      	b.n	23fec8e <_ZNKSt9type_infoeqERKS_+0x22>
 23fec94:	2000      	movs	r0, #0
 23fec96:	e7fa      	b.n	23fec8e <_ZNKSt9type_infoeqERKS_+0x22>

023fec98 <atexit>:
 23fec98:	2300      	movs	r3, #0
 23fec9a:	4601      	mov	r1, r0
 23fec9c:	461a      	mov	r2, r3
 23fec9e:	4618      	mov	r0, r3
 23feca0:	f000 b844 	b.w	23fed2c <__register_exitproc>

023feca4 <memcpy>:
 23feca4:	440a      	add	r2, r1
 23feca6:	1e43      	subs	r3, r0, #1
 23feca8:	4291      	cmp	r1, r2
 23fecaa:	d100      	bne.n	23fecae <memcpy+0xa>
 23fecac:	4770      	bx	lr
 23fecae:	b510      	push	{r4, lr}
 23fecb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fecb4:	4291      	cmp	r1, r2
 23fecb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fecba:	d1f9      	bne.n	23fecb0 <memcpy+0xc>
 23fecbc:	bd10      	pop	{r4, pc}

023fecbe <memset>:
 23fecbe:	4402      	add	r2, r0
 23fecc0:	4603      	mov	r3, r0
 23fecc2:	4293      	cmp	r3, r2
 23fecc4:	d100      	bne.n	23fecc8 <memset+0xa>
 23fecc6:	4770      	bx	lr
 23fecc8:	f803 1b01 	strb.w	r1, [r3], #1
 23feccc:	e7f9      	b.n	23fecc2 <memset+0x4>
	...

023fecd0 <srand>:
 23fecd0:	b538      	push	{r3, r4, r5, lr}
 23fecd2:	4b10      	ldr	r3, [pc, #64]	; (23fed14 <srand+0x44>)
 23fecd4:	4604      	mov	r4, r0
 23fecd6:	681d      	ldr	r5, [r3, #0]
 23fecd8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fecda:	b9b3      	cbnz	r3, 23fed0a <srand+0x3a>
 23fecdc:	2018      	movs	r0, #24
 23fecde:	f7fe fae7 	bl	23fd2b0 <malloc>
 23fece2:	4602      	mov	r2, r0
 23fece4:	63a8      	str	r0, [r5, #56]	; 0x38
 23fece6:	b920      	cbnz	r0, 23fecf2 <srand+0x22>
 23fece8:	4b0b      	ldr	r3, [pc, #44]	; (23fed18 <srand+0x48>)
 23fecea:	2142      	movs	r1, #66	; 0x42
 23fecec:	480b      	ldr	r0, [pc, #44]	; (23fed1c <srand+0x4c>)
 23fecee:	f7fe fb33 	bl	23fd358 <__assert_func>
 23fecf2:	490b      	ldr	r1, [pc, #44]	; (23fed20 <srand+0x50>)
 23fecf4:	4b0b      	ldr	r3, [pc, #44]	; (23fed24 <srand+0x54>)
 23fecf6:	e9c0 1300 	strd	r1, r3, [r0]
 23fecfa:	4b0b      	ldr	r3, [pc, #44]	; (23fed28 <srand+0x58>)
 23fecfc:	2100      	movs	r1, #0
 23fecfe:	6083      	str	r3, [r0, #8]
 23fed00:	230b      	movs	r3, #11
 23fed02:	8183      	strh	r3, [r0, #12]
 23fed04:	2001      	movs	r0, #1
 23fed06:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fed0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fed0c:	2200      	movs	r2, #0
 23fed0e:	611c      	str	r4, [r3, #16]
 23fed10:	615a      	str	r2, [r3, #20]
 23fed12:	bd38      	pop	{r3, r4, r5, pc}
 23fed14:	1007aca8 	.word	0x1007aca8
 23fed18:	023fff39 	.word	0x023fff39
 23fed1c:	023fff50 	.word	0x023fff50
 23fed20:	abcd330e 	.word	0xabcd330e
 23fed24:	e66d1234 	.word	0xe66d1234
 23fed28:	0005deec 	.word	0x0005deec

023fed2c <__register_exitproc>:
 23fed2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fed30:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fedf0 <__register_exitproc+0xc4>
 23fed34:	4606      	mov	r6, r0
 23fed36:	461f      	mov	r7, r3
 23fed38:	460d      	mov	r5, r1
 23fed3a:	f8d8 0000 	ldr.w	r0, [r8]
 23fed3e:	4691      	mov	r9, r2
 23fed40:	f000 f858 	bl	23fedf4 <__retarget_lock_acquire_recursive>
 23fed44:	4b26      	ldr	r3, [pc, #152]	; (23fede0 <__register_exitproc+0xb4>)
 23fed46:	681c      	ldr	r4, [r3, #0]
 23fed48:	b934      	cbnz	r4, 23fed58 <__register_exitproc+0x2c>
 23fed4a:	4c26      	ldr	r4, [pc, #152]	; (23fede4 <__register_exitproc+0xb8>)
 23fed4c:	601c      	str	r4, [r3, #0]
 23fed4e:	4b26      	ldr	r3, [pc, #152]	; (23fede8 <__register_exitproc+0xbc>)
 23fed50:	b113      	cbz	r3, 23fed58 <__register_exitproc+0x2c>
 23fed52:	681b      	ldr	r3, [r3, #0]
 23fed54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fed58:	6863      	ldr	r3, [r4, #4]
 23fed5a:	2b1f      	cmp	r3, #31
 23fed5c:	dd07      	ble.n	23fed6e <__register_exitproc+0x42>
 23fed5e:	f8d8 0000 	ldr.w	r0, [r8]
 23fed62:	f000 f849 	bl	23fedf8 <__retarget_lock_release_recursive>
 23fed66:	f04f 30ff 	mov.w	r0, #4294967295
 23fed6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fed6e:	b35e      	cbz	r6, 23fedc8 <__register_exitproc+0x9c>
 23fed70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fed74:	b988      	cbnz	r0, 23fed9a <__register_exitproc+0x6e>
 23fed76:	4b1d      	ldr	r3, [pc, #116]	; (23fedec <__register_exitproc+0xc0>)
 23fed78:	b923      	cbnz	r3, 23fed84 <__register_exitproc+0x58>
 23fed7a:	f8d8 0000 	ldr.w	r0, [r8]
 23fed7e:	f000 f83a 	bl	23fedf6 <__retarget_lock_release>
 23fed82:	e7f0      	b.n	23fed66 <__register_exitproc+0x3a>
 23fed84:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fed88:	f7fe fa92 	bl	23fd2b0 <malloc>
 23fed8c:	2800      	cmp	r0, #0
 23fed8e:	d0f4      	beq.n	23fed7a <__register_exitproc+0x4e>
 23fed90:	2300      	movs	r3, #0
 23fed92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fed96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fed9a:	6863      	ldr	r3, [r4, #4]
 23fed9c:	2201      	movs	r2, #1
 23fed9e:	2e02      	cmp	r6, #2
 23feda0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23feda4:	fa02 f203 	lsl.w	r2, r2, r3
 23feda8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fedac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fedb0:	ea43 0302 	orr.w	r3, r3, r2
 23fedb4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fedb8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fedbc:	bf02      	ittt	eq
 23fedbe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fedc2:	4313      	orreq	r3, r2
 23fedc4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fedc8:	6863      	ldr	r3, [r4, #4]
 23fedca:	f8d8 0000 	ldr.w	r0, [r8]
 23fedce:	1c5a      	adds	r2, r3, #1
 23fedd0:	3302      	adds	r3, #2
 23fedd2:	6062      	str	r2, [r4, #4]
 23fedd4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fedd8:	f000 f80e 	bl	23fedf8 <__retarget_lock_release_recursive>
 23feddc:	2000      	movs	r0, #0
 23fedde:	e7c4      	b.n	23fed6a <__register_exitproc+0x3e>
 23fede0:	1007aff0 	.word	0x1007aff0
 23fede4:	1007af64 	.word	0x1007af64
 23fede8:	00000000 	.word	0x00000000
 23fedec:	023fd2b1 	.word	0x023fd2b1
 23fedf0:	1007ad0c 	.word	0x1007ad0c

023fedf4 <__retarget_lock_acquire_recursive>:
 23fedf4:	4770      	bx	lr

023fedf6 <__retarget_lock_release>:
 23fedf6:	4770      	bx	lr

023fedf8 <__retarget_lock_release_recursive>:
 23fedf8:	4770      	bx	lr
	...

023fedfc <dynalib_user>:
 23fedfc:	9591 023f 95b9 023f 95bd 023f 0000 0000     ..?...?...?.....
 23fee0c:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fee1c:	7574 6c61 5300 6977 6374 6968 676e 4f20     tual.Switching O
 23fee2c:	206e 6557 6f6d 2320 6925 000a 3f3c 6d78     n Wemo #%i..<?xm
 23fee3c:	206c 6576 7372 6f69 3d6e 3122 302e 2022     l version="1.0" 
 23fee4c:	6e65 6f63 6964 676e 223d 7475 2d66 2238     encoding="utf-8"
 23fee5c:	3e3f 733c 453a 766e 6c65 706f 2065 6d78     ?><s:Envelope xm
 23fee6c:	6e6c 3a73 3d73 6822 7474 3a70 2f2f 6373     lns:s="http://sc
 23fee7c:	6568 616d 2e73 6d78 736c 616f 2e70 726f     hemas.xmlsoap.or
 23fee8c:	2f67 6f73 7061 652f 766e 6c65 706f 2f65     g/soap/envelope/
 23fee9c:	2022 3a73 6e65 6f63 6964 676e 7453 6c79     " s:encodingStyl
 23feeac:	3d65 6822 7474 3a70 2f2f 6373 6568 616d     e="http://schema
 23feebc:	2e73 6d78 736c 616f 2e70 726f 2f67 6f73     s.xmlsoap.org/so
 23feecc:	7061 652f 636e 646f 6e69 2f67 3e22 733c     ap/encoding/"><s
 23feedc:	423a 646f 3e79 753c 533a 7465 6942 616e     :Body><u:SetBina
 23feeec:	7972 7453 7461 2065 6d78 6e6c 3a73 3d75     ryState xmlns:u=
 23feefc:	7522 6e72 423a 6c65 696b 3a6e 6573 7672     "urn:Belkin:serv
 23fef0c:	6369 3a65 6162 6973 6563 6576 746e 313a     ice:basicevent:1
 23fef1c:	3e22 423c 6e69 7261 5379 6174 6574 313e     "><BinaryState>1
 23fef2c:	2f3c 6942 616e 7972 7453 7461 3e65 2f3c     </BinaryState></
 23fef3c:	3a75 6553 4274 6e69 7261 5379 6174 6574     u:SetBinaryState
 23fef4c:	3c3e 732f 423a 646f 3e79 2f3c 3a73 6e45     ></s:Body></s:En
 23fef5c:	6576 6f6c 6570 003e 4f50 5453 2f20 7075     velope>.POST /up
 23fef6c:	706e 632f 6e6f 7274 6c6f 622f 7361 6369     np/control/basic
 23fef7c:	7665 6e65 3174 4820 5454 2f50 2e31 0031     event1 HTTP/1.1.
 23fef8c:	6f43 746e 6e65 2d74 7954 6570 203a 6574     Content-Type: te
 23fef9c:	7478 782f 6c6d 203b 6863 7261 6573 3d74     xt/xml; charset=
 23fefac:	7475 2d66 0038 4f53 5041 4341 4954 4e4f     utf-8.SOAPACTION
 23fefbc:	203a 7522 6e72 423a 6c65 696b 3a6e 6573     : "urn:Belkin:se
 23fefcc:	7672 6369 3a65 6162 6973 6563 6576 746e     rvice:basicevent
 23fefdc:	313a 5323 7465 6942 616e 7972 7453 7461     :1#SetBinaryStat
 23fefec:	2265 4300 6e6f 656e 7463 6f69 3a6e 6b20     e".Connection: k
 23feffc:	6565 2d70 6c61 7669 0065 6f43 746e 6e65     eep-alive.Conten
 23ff00c:	2d74 654c 676e 6874 203a 5300 6977 6374     t-Length: .Switc
 23ff01c:	6968 676e 4f20 6666 5720 6d65 206f 2523     hing Off Wemo #%
 23ff02c:	2069 000a 3f3c 6d78 206c 6576 7372 6f69     i ..<?xml versio
 23ff03c:	3d6e 3122 302e 2022 6e65 6f63 6964 676e     n="1.0" encoding
 23ff04c:	223d 7475 2d66 2238 3e3f 733c 453a 766e     ="utf-8"?><s:Env
 23ff05c:	6c65 706f 2065 6d78 6e6c 3a73 3d73 6822     elope xmlns:s="h
 23ff06c:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
 23ff07c:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
 23ff08c:	766e 6c65 706f 2f65 2022 3a73 6e65 6f63     nvelope/" s:enco
 23ff09c:	6964 676e 7453 6c79 3d65 6822 7474 3a70     dingStyle="http:
 23ff0ac:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
 23ff0bc:	2e70 726f 2f67 6f73 7061 652f 636e 646f     p.org/soap/encod
 23ff0cc:	6e69 2f67 3e22 733c 423a 646f 3e79 753c     ing/"><s:Body><u
 23ff0dc:	533a 7465 6942 616e 7972 7453 7461 2065     :SetBinaryState 
 23ff0ec:	6d78 6e6c 3a73 3d75 7522 6e72 423a 6c65     xmlns:u="urn:Bel
 23ff0fc:	696b 3a6e 6573 7672 6369 3a65 6162 6973     kin:service:basi
 23ff10c:	6563 6576 746e 313a 3e22 423c 6e69 7261     cevent:1"><Binar
 23ff11c:	5379 6174 6574 303e 2f3c 6942 616e 7972     yState>0</Binary
 23ff12c:	7453 7461 3e65 2f3c 3a75 6553 4274 6e69     State></u:SetBin
 23ff13c:	7261 5379 6174 6574 3c3e 732f 423a 646f     aryState></s:Bod
 23ff14c:	3e79 2f3c 3a73 6e45 6576 6f6c 6570 003e     y></s:Envelope>.
 23ff15c:	6548 6c6c 206f 6154 6d6d 6c79 6565 0021     Hello Tammylee!.
 23ff16c:	002e 6f48 2077 7241 2065 6f79 3f75 4a00     ..How Are you?.J
 23ff17c:	6d61 6569 6c20 766f 7365 7920 756f 0021     amie loves you!.
 23ff18c:	6954 656d 7420 206f 656d 7465 7920 756f     Time to meet you
 23ff19c:	2072 6568 706c 6e69 2067 6168 646e 2073     r helping hands 
 23ff1ac:	6170 006c 2749 206d 2061 6564 6976 6563     pal.I'm a device
 23ff1bc:	4a20 6d61 6569 6d20 6461 2065 6f66 2072      Jamie made for 
 23ff1cc:	6f79 0075 2749 206d 6568 6572 7420 206f     you.I'm here to 
 23ff1dc:	6568 706c 7920 756f 7220 6d65 6d65 6562     help you remembe
 23ff1ec:	2172 5400 6d69 2065 6f74 7420 7972 7420     r!.Time to try t
 23ff1fc:	206f 7375 2065 740a 6568 7220 7365 7274     o use .the restr
 23ff20c:	6f6f 216d 4100 6572 7920 756f 2072 6566     oom!.Are your fe
 23ff21c:	7465 7520 3f70 4c00 7465 2073 6567 2074     et up?.Lets get 
 23ff22c:	7075 0a20 6e61 2064 6f6d 6576 6120 6f72     up .and move aro
 23ff23c:	6e75 2164 4e00 746f 7320 6e79 6563 2064     und!.Not synced 
 23ff24c:	6977 6874 5020 7261 6974 6c63 2065 6c43     with Particle Cl
 23ff25c:	756f 2e64 4120 7474 6d65 7470 6e69 2067     oud. Attempting 
 23ff26c:	7973 636e 2e2e 0a2e 2500 3230 3a64 3025     sync.....%02d:%0
 23ff27c:	6432 2000 3025 6432 252d 3230 2d64 3025     2d. %02d-%02d-%0
 23ff28c:	6434 4300 7275 6572 746e 5420 6d69 3a65     4d.Current Time:
 23ff29c:	2520 0a73 4300 7275 6572 746e 4420 7461      %s..Current Dat
 23ff2ac:	3a65 2520 0a73 4400 7369 6c70 7961 5020     e: %s..Display P
 23ff2bc:	776f 7265 4d20 646f 3a65 3020 0078 414d     ower Mode: 0x.MA
 23ff2cc:	4344 4c54 4d20 646f 3a65 3020 0078 6950     DCTL Mode: 0x.Pi
 23ff2dc:	6578 206c 6f46 6d72 7461 203a 7830 4900     xel Format: 0x.I
 23ff2ec:	616d 6567 4620 726f 616d 3a74 3020 0078     mage Format: 0x.
 23ff2fc:	6553 666c 4420 6169 6e67 736f 6974 3a63     Self Diagnostic:
 23ff30c:	3020 0078 6542 636e 6d68 7261 206b 2020      0x.Benchmark   
 23ff31c:	2020 2020 2020 2020 2020 2020 5420 6d69                  Tim
 23ff32c:	2065 6d28 6369 6f72 6573 6f63 646e 2973     e (microseconds)
 23ff33c:	5300 7263 6565 206e 6966 6c6c 2020 2020     .Screen fill    
 23ff34c:	2020 2020 2020 2020 2020 5400 7865 2074               .Text 
 23ff35c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ff36c:	2020 2020 4c00 6e69 7365 2020 2020 2020         .Lines      
 23ff37c:	2020 2020 2020 2020 2020 2020 2020 4800                   .H
 23ff38c:	726f 7a69 562f 7265 2074 694c 656e 2073     oriz/Vert Lines 
 23ff39c:	2020 2020 2020 2020 5200 6365 6174 676e             .Rectang
 23ff3ac:	656c 2073 6f28 7475 696c 656e 2029 2020     les (outline)   
 23ff3bc:	2020 5200 6365 6174 676e 656c 2073 6628       .Rectangles (f
 23ff3cc:	6c69 656c 2964 2020 2020 2020 4300 7269     illed)      .Cir
 23ff3dc:	6c63 7365 2820 6966 6c6c 6465 2029 2020     cles (filled)   
 23ff3ec:	2020 2020 2020 4300 7269 6c63 7365 2820           .Circles (
 23ff3fc:	756f 6c74 6e69 2965 2020 2020 2020 2020     outline)        
 23ff40c:	5400 6972 6e61 6c67 7365 2820 756f 6c74     .Triangles (outl
 23ff41c:	6e69 2965 2020 2020 2020 5400 6972 6e61     ine)      .Trian
 23ff42c:	6c67 7365 2820 6966 6c6c 6465 2029 2020     gles (filled)   
 23ff43c:	2020 2020 5200 756f 646e 6465 7220 6365         .Rounded rec
 23ff44c:	7374 2820 756f 6c74 6e69 2965 2020 5200     ts (outline)  .R
 23ff45c:	756f 646e 6465 7220 6365 7374 2820 6966     ounded rects (fi
 23ff46c:	6c6c 6465 2029 2020 0000 0000               lled)   ....

023ff478 <_ZTV5Timer>:
	...
 23ff480:	9729 023f 977d 023f 9601 023f 6157 656b     ).?.}.?...?.Wake
 23ff490:	5520 0070 7242 6165 666b 7361 0074 6154      Up.Breakfast.Ta
 23ff4a0:	656b 4d20 6465 6369 7461 6f69 006e 754c     ke Medication.Lu
 23ff4b0:	636e 0068 7845 7265 6963 6573 4400 6e69     nch.Exercise.Din
 23ff4c0:	656e 0072 6542 7464 6d69 0065 3031 302e     ner.Bedtime.10.0
 23ff4d0:	302e 312e 3539 6400 6665 7561 746c 0020     .0.195.default .
 23ff4e0:	534d 0042 534c 0042 533c 4950 6553 7474     MSB.LSB.<SPISett
 23ff4f0:	6e69 7367 6420 6665 7561 746c 003e 533c     ings default>.<S
 23ff500:	4950 6553 7474 6e69 7367 2520 2573 2075     PISettings %s%u 
 23ff510:	7325 4d20 444f 2545 3e75 0000               %s MODE%u>..

023ff51c <_ZTV15Adafruit_SPITFT>:
	...
 23ff52c:	c151 023f d791 023f b1d1 023f ac0f 023f     Q.?...?...?...?.
 23ff53c:	b193 023f ad87 023f b03f 023f afe7 023f     ..?...?.?.?...?.
 23ff54c:	b297 023f ac3b 023f b57f 023f b10d 023f     ..?.;.?...?...?.
 23ff55c:	af6b 023f aeeb 023f ae27 023f b45f 023f     k.?...?.'.?._.?.
 23ff56c:	b47b 023f b4fd 023f 95d9 023f 95d9 023f     {.?...?...?...?.

023ff57c <_ZL4font>:
 23ff57c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff58c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff59c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff5ac:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff5bc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff5cc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff5dc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff5ec:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff5fc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff60c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff61c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff62c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff63c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff64c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff65c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff66c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff67c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff68c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff69c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff6ac:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff6bc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff6cc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff6dc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff6ec:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff6fc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff70c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff71c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff72c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff73c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff74c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff75c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff76c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff77c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff78c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff79c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff7ac:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff7bc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff7cc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff7dc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff7ec:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff7fc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff80c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff81c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff82c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff83c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ff84c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ff85c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ff86c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ff87c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ff88c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ff89c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ff8ac:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ff8bc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ff8cc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ff8dc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ff8ec:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ff8fc:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ff90c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ff91c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ff92c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ff93c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ff94c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ff95c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ff96c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ff97c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ff98c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ff99c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ff9ac:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ff9bc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ff9cc:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ff9dc:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ff9ec:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ff9fc:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffa0c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffa1c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffa2c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffa3c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffa4c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffa5c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffa6c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffa7c <_ZTV12Adafruit_GFX>:
	...
 23ffa8c:	c151 023f d791 023f 95d9 023f b355 023f     Q.?...?...?.U.?.
 23ffa9c:	b357 023f b389 023f b365 023f b377 023f     W.?...?.e.?.w.?.
 23ffaac:	b297 023f b355 023f b57f 023f b57d 023f     ..?.U.?...?.}.?.
 23ffabc:	b3a1 023f b3df 023f b419 023f b45f 023f     ..?...?...?._.?.
 23ffacc:	b47b 023f b4fd 023f                         {.?...?.

023ffad4 <_ZTVN8particle11SPISettingsE>:
	...
 23ffadc:	a9c1 023f a981 023f a983 023f 5053 2f49     ..?...?...?.SPI/
 23ffaec:	5053 3149 6920 746e 7265 6166 6563 6e20     SPI1 interface n
 23ffafc:	746f 6420 6665 6e69 6465 0021 6950 6578     ot defined!.Pixe
 23ffb0c:	206c 7974 6570 6e20 746f 7320 7075 6f70     l type not suppo
 23ffb1c:	7472 6465 0021 0000 6f4e 2074 6e65 756f     rted!...Not enou
 23ffb2c:	6867 6d20 6d65 726f 2079 7661 6961 616c     gh memory availa
 23ffb3c:	6c62 2165                                    ble!.

023ffb41 <_ZL7initcmd>:
 23ffb41:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
 23ffb51:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
 23ffb61:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
 23ffb71:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
 23ffb81:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
 23ffb91:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
 23ffba1:	3107 48c1 0f08 310c 0f36 8011 8029           .1.H...16...)..

023ffbb0 <_ZTV16Adafruit_ILI9341>:
	...
 23ffbb8:	c6c3 023f c807 023f c151 023f d791 023f     ..?...?.Q.?...?.
 23ffbc8:	b1d1 023f ac0f 023f b193 023f ad87 023f     ..?...?...?...?.
 23ffbd8:	b03f 023f afe7 023f b297 023f ac3b 023f     ?.?...?...?.;.?.
 23ffbe8:	c6ed 023f c6c5 023f af6b 023f aeeb 023f     ..?...?.k.?...?.
 23ffbf8:	ae27 023f b45f 023f b47b 023f b4fd 023f     '.?._.?.{.?...?.
 23ffc08:	c74d 023f c7c5 023f                         M.?...?.

023ffc10 <_ZTVN5spark13EthernetClassE>:
	...
 23ffc18:	d40b 023f d401 023f d3f7 023f d3ed 023f     ..?...?...?...?.
 23ffc28:	d3e1 023f d3d5 023f e621 023f e629 023f     ..?...?.!.?.).?.
 23ffc38:	d3c9 023f d3c1 023f d3b7 023f d3ad 023f     ..?...?...?...?.
 23ffc48:	e751 023f e659 023f e661 023f               Q.?.Y.?.a.?.

023ffc54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffc54:	0800 1810 2820 3830                         .... (08

023ffc5c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
 23ffc64:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
 23ffc74:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffc84 <_ZTV9IPAddress>:
	...
 23ffc8c:	dc85 023f dc75 023f dc77 023f               ..?.u.?.w.?.

023ffc98 <_ZTV9USBSerial>:
	...
 23ffca0:	dd97 023f ddff 023f ddd5 023f d791 023f     ..?...?...?...?.
 23ffcb0:	ddc7 023f dd99 023f dda9 023f ddf9 023f     ..?...?...?...?.
 23ffcc0:	d8ef 023f ddb9 023f dd91 023f               ..?...?...?.

023ffccc <_ZTV11USARTSerial>:
	...
 23ffcd4:	de95 023f df01 023f ded9 023f d791 023f     ..?...?...?...?.
 23ffce4:	dea9 023f dec5 023f deb7 023f ded3 023f     ..?...?...?...?.
 23ffcf4:	d8ef 023f de97 023f de9b 023f               ..?...?...?.

023ffd00 <_ZTV7TwoWire>:
	...
 23ffd08:	df3f 023f df89 023f df61 023f df41 023f     ?.?...?.a.?.A.?.
 23ffd18:	df69 023f df71 023f df79 023f df81 023f     i.?.q.?.y.?...?.
 23ffd28:	d8ef 023f 6977 6972 676e 7200 6365 2076     ..?.wiring.recv 
 23ffd38:	7265 6f72 2072 203d 6425 0000               error = %d..

023ffd44 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffd4c:	e059 023f e07d 023f e55f 023f e08b 023f     Y.?.}.?._.?...?.
 23ffd5c:	e05d 023f                                   ].?.

023ffd60 <_ZTV9TCPClient>:
	...
 23ffd68:	daed 023f db05 023f dfd5 023f dfef 023f     ..?...?...?...?.
 23ffd78:	e3f5 023f e019 023f e273 023f e04d 023f     ..?...?.s.?.M.?.
 23ffd88:	d8ef 023f e305 023f e145 023f e2a1 023f     ..?...?.E.?...?.
 23ffd98:	e4a9 023f e241 023f e04f 023f e001 023f     ..?.A.?.O.?...?.
 23ffda8:	e091 023f e125 023f                         ..?.%.?.

023ffdb0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffdb8:	e5c3 023f e5b9 023f e5af 023f e565 023f     ..?...?...?.e.?.
 23ffdc8:	e5a3 023f e597 023f e621 023f e629 023f     ..?...?.!.?.).?.
 23ffdd8:	e58b 023f e583 023f e579 023f e56f 023f     ..?...?.y.?.o.?.
 23ffde8:	e751 023f e659 023f e661 023f               Q.?.Y.?.a.?.

023ffdf4 <CSWTCH.109>:
 23ffdf4:	ae5c 1007 aef0 1007 aef8 1007               \...........

023ffe00 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe08:	e5e1 023f e5eb 023f e5f5 023f e5ff 023f     ..?...?...?...?.
 23ffe18:	e609 023f e615 023f e621 023f e629 023f     ..?...?.!.?.).?.
 23ffe28:	e631 023f e63d 023f e645 023f e64f 023f     1.?.=.?.E.?.O.?.
 23ffe38:	e751 023f e659 023f e661 023f               Q.?.Y.?.a.?.

023ffe44 <_ZSt7nothrow>:
	...

023ffe45 <_ZTSSt19_Sp_make_shared_tag>:
 23ffe45:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 23ffe55:	6572 5f64 6174 0067 0000                     red_tag....

023ffe60 <_ZTISt19_Sp_make_shared_tag>:
 23ffe60:	fea0 023f fe45 023f                         ..?.E.?.

023ffe68 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffe68:	ff00 023f fe74 023f ff24 023f               ..?.t.?.$.?.

023ffe74 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffe74:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 23ffe84:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 23ffe94:	0045 0000                                   E...

023ffe98 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffe98:	0000 0000 fe68 023f eac1 023f ead5 023f     ....h.?...?...?.
 23ffea8:	ec69 023f ec69 023f eb3f 023f ea81 023f     i.?.i.?.?.?...?.
 23ffeb8:	eb27 023f eae9 023f eab3 023f               '.?...?...?.

023ffec4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffec4:	ff00 023f fed0 023f fe68 023f               ..?...?.h.?.

023ffed0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffed0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 23ffee0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 23ffef0:	666e 456f 0000 0000                         nfoE....

023ffef8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffef8:	0000 0000 fec4 023f eb69 023f eb7d 023f     ......?.i.?.}.?.
 23fff08:	ec69 023f ec69 023f eb3f 023f ea81 023f     i.?.i.?.?.?...?.
 23fff18:	ec3d 023f ebc9 023f eb91 023f               =.?...?...?.

023fff24 <_ZTISt9type_info>:
 23fff24:	fea0 023f ff2c 023f                         ..?.,.?.

023fff2c <_ZTSSt9type_info>:
 23fff2c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
 23fff3c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
 23fff4c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
 23fff5c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
 23fff6c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
 23fff7c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff8c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff9c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
 23fffac:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffbc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffcd <link_const_data_end>:
 23fffcd:	00          	.byte	0x00
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fa869 	.word	0x023fa869
 23fffd4:	023fc261 	.word	0x023fc261
 23fffd8:	023fd415 	.word	0x023fd415
 23fffdc:	023fd61d 	.word	0x023fd61d
 23fffe0:	023fd781 	.word	0x023fd781
 23fffe4:	023fd919 	.word	0x023fd919
 23fffe8:	023fdad1 	.word	0x023fdad1
 23fffec:	023fdb19 	.word	0x023fdb19
 23ffff0:	023fe5cd 	.word	0x023fe5cd
 23ffff4:	023fe765 	.word	0x023fe765
